// Code generated by "enumer -type=Chain -linecomment -json=true -sql -yaml"; DO NOT EDIT.

package chains

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_ChainName_0      = "ethereum"
	_ChainLowerName_0 = "ethereum"
	_ChainName_1      = "bsc"
	_ChainLowerName_1 = "bsc"
	_ChainName_2      = "polygon"
	_ChainLowerName_2 = "polygon"
	_ChainName_3      = "fantom"
	_ChainLowerName_3 = "fantom"
	_ChainName_4      = "arbitrum"
	_ChainLowerName_4 = "arbitrum"
	_ChainName_5      = "avalanche"
	_ChainLowerName_5 = "avalanche"
)

var (
	_ChainIndex_0 = [...]uint8{0, 8}
	_ChainIndex_1 = [...]uint8{0, 3}
	_ChainIndex_2 = [...]uint8{0, 7}
	_ChainIndex_3 = [...]uint8{0, 6}
	_ChainIndex_4 = [...]uint8{0, 8}
	_ChainIndex_5 = [...]uint8{0, 9}
)

func (i Chain) String() string {
	switch {
	case i == 1:
		return _ChainName_0
	case i == 56:
		return _ChainName_1
	case i == 137:
		return _ChainName_2
	case i == 250:
		return _ChainName_3
	case i == 42161:
		return _ChainName_4
	case i == 43114:
		return _ChainName_5
	default:
		return fmt.Sprintf("Chain(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ChainNoOp() {
	var x [1]struct{}
	_ = x[Ethereum-(1)]
	_ = x[BSC-(56)]
	_ = x[Polygon-(137)]
	_ = x[Fantom-(250)]
	_ = x[Arbitrum-(42161)]
	_ = x[Avalanche-(43114)]
}

var _ChainValues = []Chain{Ethereum, BSC, Polygon, Fantom, Arbitrum, Avalanche}

var _ChainNameToValueMap = map[string]Chain{
	_ChainName_0[0:8]:      Ethereum,
	_ChainLowerName_0[0:8]: Ethereum,
	_ChainName_1[0:3]:      BSC,
	_ChainLowerName_1[0:3]: BSC,
	_ChainName_2[0:7]:      Polygon,
	_ChainLowerName_2[0:7]: Polygon,
	_ChainName_3[0:6]:      Fantom,
	_ChainLowerName_3[0:6]: Fantom,
	_ChainName_4[0:8]:      Arbitrum,
	_ChainLowerName_4[0:8]: Arbitrum,
	_ChainName_5[0:9]:      Avalanche,
	_ChainLowerName_5[0:9]: Avalanche,
}

var _ChainNames = []string{
	_ChainName_0[0:8],
	_ChainName_1[0:3],
	_ChainName_2[0:7],
	_ChainName_3[0:6],
	_ChainName_4[0:8],
	_ChainName_5[0:9],
}

// ChainString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChainString(s string) (Chain, error) {
	if val, ok := _ChainNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ChainNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Chain values", s)
}

// ChainValues returns all values of the enum
func ChainValues() []Chain {
	return _ChainValues
}

// ChainStrings returns a slice of all String values of the enum
func ChainStrings() []string {
	strs := make([]string, len(_ChainNames))
	copy(strs, _ChainNames)
	return strs
}

// IsAChain returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Chain) IsAChain() bool {
	for _, v := range _ChainValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Chain
func (i Chain) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Chain
func (i *Chain) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Chain should be a string, got %s", data)
	}

	var err error
	*i, err = ChainString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Chain
func (i Chain) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Chain
func (i *Chain) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ChainString(s)
	return err
}

func (i Chain) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Chain) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Chain: %[1]T(%[1]v)", value)
	}

	val, err := ChainString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
