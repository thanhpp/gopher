// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package benchjsonallocate

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC4ff3609DecodeGithubComThanhppGopherCmdBenchJsonAllocate(in *jlexer.Lexer, out *AutoGenerated) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "product":
			easyjsonC4ff3609Decode(in, &out.Product)
		case "status":
			out.Status = int(in.Int())
		case "status_verbose":
			out.StatusVerbose = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609EncodeGithubComThanhppGopherCmdBenchJsonAllocate(out *jwriter.Writer, in AutoGenerated) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"product\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode(out, in.Product)
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"status_verbose\":"
		out.RawString(prefix)
		out.String(string(in.StatusVerbose))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AutoGenerated) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC4ff3609EncodeGithubComThanhppGopherCmdBenchJsonAllocate(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AutoGenerated) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC4ff3609EncodeGithubComThanhppGopherCmdBenchJsonAllocate(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AutoGenerated) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC4ff3609DecodeGithubComThanhppGopherCmdBenchJsonAllocate(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AutoGenerated) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC4ff3609DecodeGithubComThanhppGopherCmdBenchJsonAllocate(l, v)
}
func easyjsonC4ff3609Decode(in *jlexer.Lexer, out *struct {
	ID                                       string        `json:"_id"`
	Keywords                                 []string      `json:"_keywords"`
	AddedCountriesTags                       []interface{} `json:"added_countries_tags"`
	AdditivesDebugTags                       []interface{} `json:"additives_debug_tags"`
	AdditivesN                               int           `json:"additives_n"`
	AdditivesOldN                            int           `json:"additives_old_n"`
	AdditivesOldTags                         []string      `json:"additives_old_tags"`
	AdditivesOriginalTags                    []string      `json:"additives_original_tags"`
	AdditivesPrevOriginalTags                []string      `json:"additives_prev_original_tags"`
	AdditivesTags                            []string      `json:"additives_tags"`
	Allergens                                string        `json:"allergens"`
	AllergensFromIngredients                 string        `json:"allergens_from_ingredients"`
	AllergensFromUser                        string        `json:"allergens_from_user"`
	AllergensHierarchy                       []string      `json:"allergens_hierarchy"`
	AllergensLc                              string        `json:"allergens_lc"`
	AllergensTags                            []string      `json:"allergens_tags"`
	AminoAcidsPrevTags                       []interface{} `json:"amino_acids_prev_tags"`
	AminoAcidsTags                           []interface{} `json:"amino_acids_tags"`
	Brands                                   string        `json:"brands"`
	BrandsTags                               []string      `json:"brands_tags"`
	CarbonFootprintFromKnownIngredientsDebug string        `json:"carbon_footprint_from_known_ingredients_debug"`
	CarbonFootprintPercentOfKnownIngredients int           `json:"carbon_footprint_percent_of_known_ingredients"`
	Categories                               string        `json:"categories"`
	CategoriesHierarchy                      []string      `json:"categories_hierarchy"`
	CategoriesLc                             string        `json:"categories_lc"`
	CategoriesOld                            string        `json:"categories_old"`
	CategoriesProperties                     struct {
		AgribalyseFoodCodeEn string `json:"agribalyse_food_code:en"`
		CiqualFoodCodeEn     string `json:"ciqual_food_code:en"`
	} `json:"categories_properties"`
	CategoriesPropertiesTags []string `json:"categories_properties_tags"`
	CategoriesTags           []string `json:"categories_tags"`
	CategoryProperties       struct {
		CiqualFoodNameEn string `json:"ciqual_food_name:en"`
		CiqualFoodNameFr string `json:"ciqual_food_name:fr"`
	} `json:"category_properties"`
	CheckersTags            []interface{} `json:"checkers_tags"`
	CiqualFoodNameTags      []string      `json:"ciqual_food_name_tags"`
	CitiesTags              []interface{} `json:"cities_tags"`
	Code                    string        `json:"code"`
	CodesTags               []string      `json:"codes_tags"`
	ComparedToCategory      string        `json:"compared_to_category"`
	Complete                int           `json:"complete"`
	Completeness            float64       `json:"completeness"`
	CorrectorsTags          []string      `json:"correctors_tags"`
	Countries               string        `json:"countries"`
	CountriesHierarchy      []string      `json:"countries_hierarchy"`
	CountriesLc             string        `json:"countries_lc"`
	CountriesTags           []string      `json:"countries_tags"`
	CreatedT                int           `json:"created_t"`
	Creator                 string        `json:"creator"`
	DataQualityBugsTags     []interface{} `json:"data_quality_bugs_tags"`
	DataQualityErrorsTags   []interface{} `json:"data_quality_errors_tags"`
	DataQualityInfoTags     []string      `json:"data_quality_info_tags"`
	DataQualityTags         []string      `json:"data_quality_tags"`
	DataQualityWarningsTags []string      `json:"data_quality_warnings_tags"`
	DataSources             string        `json:"data_sources"`
	DataSourcesTags         []string      `json:"data_sources_tags"`
	DebugParamSortedLangs   []string      `json:"debug_param_sorted_langs"`
	EcoscoreData            struct {
		Adjustments struct {
			OriginsOfIngredients struct {
				AggregatedOrigins []struct {
					EpiScore            string      `json:"epi_score"`
					Origin              string      `json:"origin"`
					Percent             int         `json:"percent"`
					TransportationScore interface{} `json:"transportation_score"`
				} `json:"aggregated_origins"`
				EpiScore                int      `json:"epi_score"`
				EpiValue                int      `json:"epi_value"`
				OriginsFromOriginsField []string `json:"origins_from_origins_field"`
				TransportationScore     int      `json:"transportation_score"`
				TransportationScores    struct {
					Ad    int `json:"ad"`
					Al    int `json:"al"`
					At    int `json:"at"`
					Ax    int `json:"ax"`
					Ba    int `json:"ba"`
					Be    int `json:"be"`
					Bg    int `json:"bg"`
					Ch    int `json:"ch"`
					Cy    int `json:"cy"`
					Cz    int `json:"cz"`
					De    int `json:"de"`
					Dk    int `json:"dk"`
					Dz    int `json:"dz"`
					Ee    int `json:"ee"`
					Eg    int `json:"eg"`
					Es    int `json:"es"`
					Fi    int `json:"fi"`
					Fo    int `json:"fo"`
					Fr    int `json:"fr"`
					Gg    int `json:"gg"`
					Gi    int `json:"gi"`
					Gr    int `json:"gr"`
					Hr    int `json:"hr"`
					Hu    int `json:"hu"`
					Ie    int `json:"ie"`
					Il    int `json:"il"`
					Im    int `json:"im"`
					Is    int `json:"is"`
					It    int `json:"it"`
					Je    int `json:"je"`
					Lb    int `json:"lb"`
					Li    int `json:"li"`
					Lt    int `json:"lt"`
					Lu    int `json:"lu"`
					Lv    int `json:"lv"`
					Ly    int `json:"ly"`
					Ma    int `json:"ma"`
					Mc    int `json:"mc"`
					Md    int `json:"md"`
					Me    int `json:"me"`
					Mk    int `json:"mk"`
					Mt    int `json:"mt"`
					Nl    int `json:"nl"`
					No    int `json:"no"`
					Pl    int `json:"pl"`
					Ps    int `json:"ps"`
					Pt    int `json:"pt"`
					Ro    int `json:"ro"`
					Rs    int `json:"rs"`
					Se    int `json:"se"`
					Si    int `json:"si"`
					Sj    int `json:"sj"`
					Sk    int `json:"sk"`
					Sm    int `json:"sm"`
					Sy    int `json:"sy"`
					Tn    int `json:"tn"`
					Tr    int `json:"tr"`
					Ua    int `json:"ua"`
					Uk    int `json:"uk"`
					Us    int `json:"us"`
					Va    int `json:"va"`
					World int `json:"world"`
					Xk    int `json:"xk"`
				} `json:"transportation_scores"`
				TransportationValue  int `json:"transportation_value"`
				TransportationValues struct {
					Ad    int `json:"ad"`
					Al    int `json:"al"`
					At    int `json:"at"`
					Ax    int `json:"ax"`
					Ba    int `json:"ba"`
					Be    int `json:"be"`
					Bg    int `json:"bg"`
					Ch    int `json:"ch"`
					Cy    int `json:"cy"`
					Cz    int `json:"cz"`
					De    int `json:"de"`
					Dk    int `json:"dk"`
					Dz    int `json:"dz"`
					Ee    int `json:"ee"`
					Eg    int `json:"eg"`
					Es    int `json:"es"`
					Fi    int `json:"fi"`
					Fo    int `json:"fo"`
					Fr    int `json:"fr"`
					Gg    int `json:"gg"`
					Gi    int `json:"gi"`
					Gr    int `json:"gr"`
					Hr    int `json:"hr"`
					Hu    int `json:"hu"`
					Ie    int `json:"ie"`
					Il    int `json:"il"`
					Im    int `json:"im"`
					Is    int `json:"is"`
					It    int `json:"it"`
					Je    int `json:"je"`
					Lb    int `json:"lb"`
					Li    int `json:"li"`
					Lt    int `json:"lt"`
					Lu    int `json:"lu"`
					Lv    int `json:"lv"`
					Ly    int `json:"ly"`
					Ma    int `json:"ma"`
					Mc    int `json:"mc"`
					Md    int `json:"md"`
					Me    int `json:"me"`
					Mk    int `json:"mk"`
					Mt    int `json:"mt"`
					Nl    int `json:"nl"`
					No    int `json:"no"`
					Pl    int `json:"pl"`
					Ps    int `json:"ps"`
					Pt    int `json:"pt"`
					Ro    int `json:"ro"`
					Rs    int `json:"rs"`
					Se    int `json:"se"`
					Si    int `json:"si"`
					Sj    int `json:"sj"`
					Sk    int `json:"sk"`
					Sm    int `json:"sm"`
					Sy    int `json:"sy"`
					Tn    int `json:"tn"`
					Tr    int `json:"tr"`
					Ua    int `json:"ua"`
					Uk    int `json:"uk"`
					Us    int `json:"us"`
					Va    int `json:"va"`
					World int `json:"world"`
					Xk    int `json:"xk"`
				} `json:"transportation_values"`
				Value  int `json:"value"`
				Values struct {
					Ad    int `json:"ad"`
					Al    int `json:"al"`
					At    int `json:"at"`
					Ax    int `json:"ax"`
					Ba    int `json:"ba"`
					Be    int `json:"be"`
					Bg    int `json:"bg"`
					Ch    int `json:"ch"`
					Cy    int `json:"cy"`
					Cz    int `json:"cz"`
					De    int `json:"de"`
					Dk    int `json:"dk"`
					Dz    int `json:"dz"`
					Ee    int `json:"ee"`
					Eg    int `json:"eg"`
					Es    int `json:"es"`
					Fi    int `json:"fi"`
					Fo    int `json:"fo"`
					Fr    int `json:"fr"`
					Gg    int `json:"gg"`
					Gi    int `json:"gi"`
					Gr    int `json:"gr"`
					Hr    int `json:"hr"`
					Hu    int `json:"hu"`
					Ie    int `json:"ie"`
					Il    int `json:"il"`
					Im    int `json:"im"`
					Is    int `json:"is"`
					It    int `json:"it"`
					Je    int `json:"je"`
					Lb    int `json:"lb"`
					Li    int `json:"li"`
					Lt    int `json:"lt"`
					Lu    int `json:"lu"`
					Lv    int `json:"lv"`
					Ly    int `json:"ly"`
					Ma    int `json:"ma"`
					Mc    int `json:"mc"`
					Md    int `json:"md"`
					Me    int `json:"me"`
					Mk    int `json:"mk"`
					Mt    int `json:"mt"`
					Nl    int `json:"nl"`
					No    int `json:"no"`
					Pl    int `json:"pl"`
					Ps    int `json:"ps"`
					Pt    int `json:"pt"`
					Ro    int `json:"ro"`
					Rs    int `json:"rs"`
					Se    int `json:"se"`
					Si    int `json:"si"`
					Sj    int `json:"sj"`
					Sk    int `json:"sk"`
					Sm    int `json:"sm"`
					Sy    int `json:"sy"`
					Tn    int `json:"tn"`
					Tr    int `json:"tr"`
					Ua    int `json:"ua"`
					Uk    int `json:"uk"`
					Us    int `json:"us"`
					Va    int `json:"va"`
					World int `json:"world"`
					Xk    int `json:"xk"`
				} `json:"values"`
				Warning string `json:"warning"`
			} `json:"origins_of_ingredients"`
			Packaging struct {
				NonRecyclableAndNonBiodegradableMaterials int `json:"non_recyclable_and_non_biodegradable_materials"`
				Packagings                                []struct {
					EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
					EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
					Material                         string `json:"material"`
					NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
					Shape                            string `json:"shape"`
				} `json:"packagings"`
				Score int `json:"score"`
				Value int `json:"value"`
			} `json:"packaging"`
			ProductionSystem struct {
				Labels  []interface{} `json:"labels"`
				Value   int           `json:"value"`
				Warning string        `json:"warning"`
			} `json:"production_system"`
			ThreatenedSpecies struct{} `json:"threatened_species"`
		} `json:"adjustments"`
		Agribalyse struct {
			AgribalyseFoodCode string  `json:"agribalyse_food_code"`
			Co2Agriculture     float64 `json:"co2_agriculture"`
			Co2Consumption     int     `json:"co2_consumption"`
			Co2Distribution    float64 `json:"co2_distribution"`
			Co2Packaging       float64 `json:"co2_packaging"`
			Co2Processing      float64 `json:"co2_processing"`
			Co2Total           float64 `json:"co2_total"`
			Co2Transportation  float64 `json:"co2_transportation"`
			Code               string  `json:"code"`
			Dqr                string  `json:"dqr"`
			EfAgriculture      float64 `json:"ef_agriculture"`
			EfConsumption      int     `json:"ef_consumption"`
			EfDistribution     float64 `json:"ef_distribution"`
			EfPackaging        float64 `json:"ef_packaging"`
			EfProcessing       float64 `json:"ef_processing"`
			EfTotal            float64 `json:"ef_total"`
			EfTransportation   float64 `json:"ef_transportation"`
			IsBeverage         int     `json:"is_beverage"`
			NameEn             string  `json:"name_en"`
			NameFr             string  `json:"name_fr"`
			Score              int     `json:"score"`
			Version            string  `json:"version"`
		} `json:"agribalyse"`
		Grade  string `json:"grade"`
		Grades struct {
			Ad    string `json:"ad"`
			Al    string `json:"al"`
			At    string `json:"at"`
			Ax    string `json:"ax"`
			Ba    string `json:"ba"`
			Be    string `json:"be"`
			Bg    string `json:"bg"`
			Ch    string `json:"ch"`
			Cy    string `json:"cy"`
			Cz    string `json:"cz"`
			De    string `json:"de"`
			Dk    string `json:"dk"`
			Dz    string `json:"dz"`
			Ee    string `json:"ee"`
			Eg    string `json:"eg"`
			Es    string `json:"es"`
			Fi    string `json:"fi"`
			Fo    string `json:"fo"`
			Fr    string `json:"fr"`
			Gg    string `json:"gg"`
			Gi    string `json:"gi"`
			Gr    string `json:"gr"`
			Hr    string `json:"hr"`
			Hu    string `json:"hu"`
			Ie    string `json:"ie"`
			Il    string `json:"il"`
			Im    string `json:"im"`
			Is    string `json:"is"`
			It    string `json:"it"`
			Je    string `json:"je"`
			Lb    string `json:"lb"`
			Li    string `json:"li"`
			Lt    string `json:"lt"`
			Lu    string `json:"lu"`
			Lv    string `json:"lv"`
			Ly    string `json:"ly"`
			Ma    string `json:"ma"`
			Mc    string `json:"mc"`
			Md    string `json:"md"`
			Me    string `json:"me"`
			Mk    string `json:"mk"`
			Mt    string `json:"mt"`
			Nl    string `json:"nl"`
			No    string `json:"no"`
			Pl    string `json:"pl"`
			Ps    string `json:"ps"`
			Pt    string `json:"pt"`
			Ro    string `json:"ro"`
			Rs    string `json:"rs"`
			Se    string `json:"se"`
			Si    string `json:"si"`
			Sj    string `json:"sj"`
			Sk    string `json:"sk"`
			Sm    string `json:"sm"`
			Sy    string `json:"sy"`
			Tn    string `json:"tn"`
			Tr    string `json:"tr"`
			Ua    string `json:"ua"`
			Uk    string `json:"uk"`
			Us    string `json:"us"`
			Va    string `json:"va"`
			World string `json:"world"`
			Xk    string `json:"xk"`
		} `json:"grades"`
		Missing struct {
			Labels  int `json:"labels"`
			Origins int `json:"origins"`
		} `json:"missing"`
		MissingDataWarning int `json:"missing_data_warning"`
		PreviousData       struct {
			Agribalyse struct {
				AgribalyseFoodCode string  `json:"agribalyse_food_code"`
				Co2Agriculture     float64 `json:"co2_agriculture"`
				Co2Consumption     int     `json:"co2_consumption"`
				Co2Distribution    float64 `json:"co2_distribution"`
				Co2Packaging       float64 `json:"co2_packaging"`
				Co2Processing      float64 `json:"co2_processing"`
				Co2Total           float64 `json:"co2_total"`
				Co2Transportation  float64 `json:"co2_transportation"`
				Code               string  `json:"code"`
				Dqr                string  `json:"dqr"`
				EfAgriculture      float64 `json:"ef_agriculture"`
				EfConsumption      int     `json:"ef_consumption"`
				EfDistribution     float64 `json:"ef_distribution"`
				EfPackaging        float64 `json:"ef_packaging"`
				EfProcessing       float64 `json:"ef_processing"`
				EfTotal            float64 `json:"ef_total"`
				EfTransportation   float64 `json:"ef_transportation"`
				IsBeverage         int     `json:"is_beverage"`
				NameEn             string  `json:"name_en"`
				NameFr             string  `json:"name_fr"`
				Score              int     `json:"score"`
			} `json:"agribalyse"`
			Grade string `json:"grade"`
			Score int    `json:"score"`
		} `json:"previous_data"`
		Score  int `json:"score"`
		Scores struct {
			Ad    int `json:"ad"`
			Al    int `json:"al"`
			At    int `json:"at"`
			Ax    int `json:"ax"`
			Ba    int `json:"ba"`
			Be    int `json:"be"`
			Bg    int `json:"bg"`
			Ch    int `json:"ch"`
			Cy    int `json:"cy"`
			Cz    int `json:"cz"`
			De    int `json:"de"`
			Dk    int `json:"dk"`
			Dz    int `json:"dz"`
			Ee    int `json:"ee"`
			Eg    int `json:"eg"`
			Es    int `json:"es"`
			Fi    int `json:"fi"`
			Fo    int `json:"fo"`
			Fr    int `json:"fr"`
			Gg    int `json:"gg"`
			Gi    int `json:"gi"`
			Gr    int `json:"gr"`
			Hr    int `json:"hr"`
			Hu    int `json:"hu"`
			Ie    int `json:"ie"`
			Il    int `json:"il"`
			Im    int `json:"im"`
			Is    int `json:"is"`
			It    int `json:"it"`
			Je    int `json:"je"`
			Lb    int `json:"lb"`
			Li    int `json:"li"`
			Lt    int `json:"lt"`
			Lu    int `json:"lu"`
			Lv    int `json:"lv"`
			Ly    int `json:"ly"`
			Ma    int `json:"ma"`
			Mc    int `json:"mc"`
			Md    int `json:"md"`
			Me    int `json:"me"`
			Mk    int `json:"mk"`
			Mt    int `json:"mt"`
			Nl    int `json:"nl"`
			No    int `json:"no"`
			Pl    int `json:"pl"`
			Ps    int `json:"ps"`
			Pt    int `json:"pt"`
			Ro    int `json:"ro"`
			Rs    int `json:"rs"`
			Se    int `json:"se"`
			Si    int `json:"si"`
			Sj    int `json:"sj"`
			Sk    int `json:"sk"`
			Sm    int `json:"sm"`
			Sy    int `json:"sy"`
			Tn    int `json:"tn"`
			Tr    int `json:"tr"`
			Ua    int `json:"ua"`
			Uk    int `json:"uk"`
			Us    int `json:"us"`
			Va    int `json:"va"`
			World int `json:"world"`
			Xk    int `json:"xk"`
		} `json:"scores"`
		Status string `json:"status"`
	} `json:"ecoscore_data"`
	EcoscoreExtendedData struct {
		Impact struct {
			EfSingleScoreLogStddev float64 `json:"ef_single_score_log_stddev"`
			LikeliestImpacts       struct {
				ClimateChange float64 `json:"Climate_change"`
				EFSingleScore float64 `json:"EF_single_score"`
			} `json:"likeliest_impacts"`
			LikeliestRecipe struct {
				EnOakSmokedSeaSaltiYeastExtract float64 `json:"en:Oak_smoked_sea_salti_yeast_extract"`
				EnE160C                         float64 `json:"en:e160c"`
				EnE330                          float64 `json:"en:e330"`
				EnFlavouring                    float64 `json:"en:flavouring"`
				EnGarlicPowder                  float64 `json:"en:garlic_powder"`
				EnMilk                          float64 `json:"en:milk"`
				EnOnion                         float64 `json:"en:onion"`
				EnPotato                        float64 `json:"en:potato"`
				EnPotatoStarch                  float64 `json:"en:potato_starch"`
				EnRiceFlour                     float64 `json:"en:rice_flour"`
				EnSalt                          float64 `json:"en:salt"`
				EnSpice                         float64 `json:"en:spice"`
				EnSugar                         float64 `json:"en:sugar"`
				EnSunflowerOil                  float64 `json:"en:sunflower_oil"`
				EnTomatoPowder                  float64 `json:"en:tomato_powder"`
				EnWater                         float64 `json:"en:water"`
				EnYeastPowder                   float64 `json:"en:yeast_powder"`
			} `json:"likeliest_recipe"`
			MassRatioUncharacterized   float64 `json:"mass_ratio_uncharacterized"`
			UncharacterizedIngredients struct {
				Impact    []string `json:"impact"`
				Nutrition []string `json:"nutrition"`
			} `json:"uncharacterized_ingredients"`
			UncharacterizedIngredientsMassProportion struct {
				Impact    float64 `json:"impact"`
				Nutrition float64 `json:"nutrition"`
			} `json:"uncharacterized_ingredients_mass_proportion"`
			UncharacterizedIngredientsRatio struct {
				Impact    float64 `json:"impact"`
				Nutrition float64 `json:"nutrition"`
			} `json:"uncharacterized_ingredients_ratio"`
			Warnings []string `json:"warnings"`
		} `json:"impact"`
	} `json:"ecoscore_extended_data"`
	EcoscoreExtendedDataVersion      string        `json:"ecoscore_extended_data_version"`
	EcoscoreGrade                    string        `json:"ecoscore_grade"`
	EcoscoreScore                    int           `json:"ecoscore_score"`
	EcoscoreTags                     []string      `json:"ecoscore_tags"`
	Editors                          []string      `json:"editors"`
	EditorsTags                      []string      `json:"editors_tags"`
	EmbCodes                         string        `json:"emb_codes"`
	EmbCodes20141016                 string        `json:"emb_codes_20141016"`
	EmbCodesOrig                     string        `json:"emb_codes_orig"`
	EmbCodesTags                     []interface{} `json:"emb_codes_tags"`
	EntryDatesTags                   []string      `json:"entry_dates_tags"`
	ExpirationDate                   string        `json:"expiration_date"`
	FoodGroups                       string        `json:"food_groups"`
	FoodGroupsTags                   []string      `json:"food_groups_tags"`
	FruitsVegetablesNuts100GEstimate int           `json:"fruits-vegetables-nuts_100g_estimate"`
	GenericNameEn                    string        `json:"generic_name_en"`
	GenericNameFr                    string        `json:"generic_name_fr"`
	GenericNameFrDebugTags           []interface{} `json:"generic_name_fr_debug_tags"`
	ID0                              string        `json:"id"`
	ImageFrontSmallURL               string        `json:"image_front_small_url"`
	ImageFrontThumbURL               string        `json:"image_front_thumb_url"`
	ImageFrontURL                    string        `json:"image_front_url"`
	ImageIngredientsSmallURL         string        `json:"image_ingredients_small_url"`
	ImageIngredientsThumbURL         string        `json:"image_ingredients_thumb_url"`
	ImageIngredientsURL              string        `json:"image_ingredients_url"`
	ImageNutritionSmallURL           string        `json:"image_nutrition_small_url"`
	ImageNutritionThumbURL           string        `json:"image_nutrition_thumb_url"`
	ImageNutritionURL                string        `json:"image_nutrition_url"`
	ImageSmallURL                    string        `json:"image_small_url"`
	ImageThumbURL                    string        `json:"image_thumb_url"`
	ImageURL                         string        `json:"image_url"`
	Images                           struct {
		Num1 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"1"`
		Num2 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"2"`
		Num3 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"3"`
		Num4 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"4"`
		Num5 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"5"`
		Num6 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"6"`
		Num7 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT string `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"7"`
		Num8 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"8"`
		Num9 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"9"`
		Front struct {
			Geometry  string `json:"geometry"`
			Imgid     string `json:"imgid"`
			Normalize string `json:"normalize"`
			Rev       string `json:"rev"`
			Sizes     struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic string `json:"white_magic"`
		} `json:"front"`
		FrontEn struct {
			Angle                int         `json:"angle"`
			CoordinatesImageSize string      `json:"coordinates_image_size"`
			Geometry             string      `json:"geometry"`
			Imgid                string      `json:"imgid"`
			Normalize            interface{} `json:"normalize"`
			Rev                  string      `json:"rev"`
			Sizes                struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic interface{} `json:"white_magic"`
			X1         string      `json:"x1"`
			X2         string      `json:"x2"`
			Y1         string      `json:"y1"`
			Y2         string      `json:"y2"`
		} `json:"front_en"`
		Ingredients struct {
			Geometry    string `json:"geometry"`
			Imgid       string `json:"imgid"`
			Normalize   string `json:"normalize"`
			Ocr         int    `json:"ocr"`
			Orientation string `json:"orientation"`
			Rev         string `json:"rev"`
			Sizes       struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic string `json:"white_magic"`
		} `json:"ingredients"`
		IngredientsEn struct {
			Geometry    string `json:"geometry"`
			Imgid       string `json:"imgid"`
			Normalize   string `json:"normalize"`
			Ocr         int    `json:"ocr"`
			Orientation string `json:"orientation"`
			Rev         string `json:"rev"`
			Sizes       struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic string `json:"white_magic"`
		} `json:"ingredients_en"`
		Nutrition struct {
			Geometry    string `json:"geometry"`
			Imgid       string `json:"imgid"`
			Normalize   string `json:"normalize"`
			Ocr         int    `json:"ocr"`
			Orientation string `json:"orientation"`
			Rev         string `json:"rev"`
			Sizes       struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic string `json:"white_magic"`
		} `json:"nutrition"`
		NutritionEn struct {
			Angle                int         `json:"angle"`
			CoordinatesImageSize string      `json:"coordinates_image_size"`
			Geometry             string      `json:"geometry"`
			Imgid                string      `json:"imgid"`
			Normalize            interface{} `json:"normalize"`
			Rev                  string      `json:"rev"`
			Sizes                struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic interface{} `json:"white_magic"`
			X1         string      `json:"x1"`
			X2         string      `json:"x2"`
			Y1         string      `json:"y1"`
			Y2         string      `json:"y2"`
		} `json:"nutrition_en"`
	} `json:"images"`
	InformersTags []string `json:"informers_tags"`
	Ingredients   []struct {
		ID                string `json:"id"`
		Percent           int    `json:"percent,omitempty"`
		PercentEstimate   int    `json:"percent_estimate"`
		PercentMax        int    `json:"percent_max"`
		PercentMin        int    `json:"percent_min"`
		Processing        string `json:"processing,omitempty"`
		Rank              int    `json:"rank,omitempty"`
		Text              string `json:"text"`
		Vegan             string `json:"vegan,omitempty"`
		Vegetarian        string `json:"vegetarian,omitempty"`
		FromPalmOil       string `json:"from_palm_oil,omitempty"`
		HasSubIngredients string `json:"has_sub_ingredients,omitempty"`
	} `json:"ingredients"`
	IngredientsAnalysis struct {
		EnNonVegan                []string `json:"en:non-vegan"`
		EnPalmOilContentUnknown   []string `json:"en:palm-oil-content-unknown"`
		EnVeganStatusUnknown      []string `json:"en:vegan-status-unknown"`
		EnVegetarianStatusUnknown []string `json:"en:vegetarian-status-unknown"`
	} `json:"ingredients_analysis"`
	IngredientsAnalysisTags                []string      `json:"ingredients_analysis_tags"`
	IngredientsDebug                       []interface{} `json:"ingredients_debug"`
	IngredientsFromOrThatMayBeFromPalmOilN int           `json:"ingredients_from_or_that_may_be_from_palm_oil_n"`
	IngredientsFromPalmOilN                int           `json:"ingredients_from_palm_oil_n"`
	IngredientsFromPalmOilTags             []interface{} `json:"ingredients_from_palm_oil_tags"`
	IngredientsHierarchy                   []string      `json:"ingredients_hierarchy"`
	IngredientsIdsDebug                    []string      `json:"ingredients_ids_debug"`
	IngredientsN                           int           `json:"ingredients_n"`
	IngredientsNTags                       []string      `json:"ingredients_n_tags"`
	IngredientsOriginalTags                []string      `json:"ingredients_original_tags"`
	IngredientsPercentAnalysis             int           `json:"ingredients_percent_analysis"`
	IngredientsTags                        []string      `json:"ingredients_tags"`
	IngredientsText                        string        `json:"ingredients_text"`
	IngredientsTextDebug                   string        `json:"ingredients_text_debug"`
	IngredientsTextDebugTags               []interface{} `json:"ingredients_text_debug_tags"`
	IngredientsTextEn                      string        `json:"ingredients_text_en"`
	IngredientsTextFr                      string        `json:"ingredients_text_fr"`
	IngredientsTextFrDebugTags             []interface{} `json:"ingredients_text_fr_debug_tags"`
	IngredientsTextWithAllergens           string        `json:"ingredients_text_with_allergens"`
	IngredientsTextWithAllergensEn         string        `json:"ingredients_text_with_allergens_en"`
	IngredientsThatMayBeFromPalmOilN       int           `json:"ingredients_that_may_be_from_palm_oil_n"`
	IngredientsThatMayBeFromPalmOilTags    []interface{} `json:"ingredients_that_may_be_from_palm_oil_tags"`
	IngredientsWithSpecifiedPercentN       int           `json:"ingredients_with_specified_percent_n"`
	IngredientsWithSpecifiedPercentSum     int           `json:"ingredients_with_specified_percent_sum"`
	IngredientsWithUnspecifiedPercentN     int           `json:"ingredients_with_unspecified_percent_n"`
	IngredientsWithUnspecifiedPercentSum   int           `json:"ingredients_with_unspecified_percent_sum"`
	InterfaceVersionCreated                string        `json:"interface_version_created"`
	InterfaceVersionModified               string        `json:"interface_version_modified"`
	KnownIngredientsN                      int           `json:"known_ingredients_n"`
	Labels                                 string        `json:"labels"`
	LabelsHierarchy                        []string      `json:"labels_hierarchy"`
	LabelsLc                               string        `json:"labels_lc"`
	LabelsOld                              string        `json:"labels_old"`
	LabelsTags                             []string      `json:"labels_tags"`
	Lang                                   string        `json:"lang"`
	Languages                              struct {
		EnEnglish int `json:"en:english"`
	} `json:"languages"`
	LanguagesCodes struct {
		En int `json:"en"`
	} `json:"languages_codes"`
	LanguagesHierarchy      []string      `json:"languages_hierarchy"`
	LanguagesTags           []string      `json:"languages_tags"`
	LastEditDatesTags       []string      `json:"last_edit_dates_tags"`
	LastEditor              string        `json:"last_editor"`
	LastImageDatesTags      []string      `json:"last_image_dates_tags"`
	LastImageT              int           `json:"last_image_t"`
	LastModifiedBy          string        `json:"last_modified_by"`
	LastModifiedT           int           `json:"last_modified_t"`
	Lc                      string        `json:"lc"`
	Link                    string        `json:"link"`
	MainCountriesTags       []interface{} `json:"main_countries_tags"`
	ManufacturingPlaces     string        `json:"manufacturing_places"`
	ManufacturingPlacesTags []string      `json:"manufacturing_places_tags"`
	MaxImgid                string        `json:"max_imgid"`
	MineralsPrevTags        []interface{} `json:"minerals_prev_tags"`
	MineralsTags            []interface{} `json:"minerals_tags"`
	MiscTags                []string      `json:"misc_tags"`
	NoNutritionData         string        `json:"no_nutrition_data"`
	NovaGroup               int           `json:"nova_group"`
	NovaGroupDebug          string        `json:"nova_group_debug"`
	NovaGroups              string        `json:"nova_groups"`
	NovaGroupsMarkers       struct {
		Num3 [][]string `json:"3"`
		Num4 [][]string `json:"4"`
	} `json:"nova_groups_markers"`
	NovaGroupsTags      []string      `json:"nova_groups_tags"`
	NucleotidesPrevTags []interface{} `json:"nucleotides_prev_tags"`
	NucleotidesTags     []interface{} `json:"nucleotides_tags"`
	NutrientLevels      struct {
		Fat          string `json:"fat"`
		Salt         string `json:"salt"`
		SaturatedFat string `json:"saturated-fat"`
		Sugars       string `json:"sugars"`
	} `json:"nutrient_levels"`
	NutrientLevelsTags []string `json:"nutrient_levels_tags"`
	Nutriments         struct {
		Carbohydrates                                      int     `json:"carbohydrates"`
		Carbohydrates100G                                  int     `json:"carbohydrates_100g"`
		CarbohydratesServing                               float64 `json:"carbohydrates_serving"`
		CarbohydratesUnit                                  string  `json:"carbohydrates_unit"`
		CarbohydratesValue                                 int     `json:"carbohydrates_value"`
		CarbonFootprintFromKnownIngredients100G            float64 `json:"carbon-footprint-from-known-ingredients_100g"`
		CarbonFootprintFromKnownIngredientsProduct         float64 `json:"carbon-footprint-from-known-ingredients_product"`
		CarbonFootprintFromKnownIngredientsServing         float64 `json:"carbon-footprint-from-known-ingredients_serving"`
		Energy                                             int     `json:"energy"`
		EnergyKcal                                         int     `json:"energy-kcal"`
		EnergyKcal100G                                     int     `json:"energy-kcal_100g"`
		EnergyKcalServing                                  float64 `json:"energy-kcal_serving"`
		EnergyKcalUnit                                     string  `json:"energy-kcal_unit"`
		EnergyKcalValue                                    int     `json:"energy-kcal_value"`
		EnergyKcalValueComputed                            float64 `json:"energy-kcal_value_computed"`
		EnergyKj                                           int     `json:"energy-kj"`
		EnergyKj100G                                       int     `json:"energy-kj_100g"`
		EnergyKjServing                                    int     `json:"energy-kj_serving"`
		EnergyKjUnit                                       string  `json:"energy-kj_unit"`
		EnergyKjValue                                      int     `json:"energy-kj_value"`
		EnergyKjValueComputed                              float64 `json:"energy-kj_value_computed"`
		Energy100G                                         int     `json:"energy_100g"`
		EnergyServing                                      int     `json:"energy_serving"`
		EnergyUnit                                         string  `json:"energy_unit"`
		EnergyValue                                        int     `json:"energy_value"`
		Fat                                                int     `json:"fat"`
		Fat100G                                            int     `json:"fat_100g"`
		FatServing                                         float64 `json:"fat_serving"`
		FatUnit                                            string  `json:"fat_unit"`
		FatValue                                           int     `json:"fat_value"`
		Fiber                                              float64 `json:"fiber"`
		Fiber100G                                          float64 `json:"fiber_100g"`
		FiberServing                                       float64 `json:"fiber_serving"`
		FiberUnit                                          string  `json:"fiber_unit"`
		FiberValue                                         float64 `json:"fiber_value"`
		FruitsVegetablesNutsEstimateFromIngredients100G    int     `json:"fruits-vegetables-nuts-estimate-from-ingredients_100g"`
		FruitsVegetablesNutsEstimateFromIngredientsServing int     `json:"fruits-vegetables-nuts-estimate-from-ingredients_serving"`
		NovaGroup                                          int     `json:"nova-group"`
		NovaGroup100G                                      int     `json:"nova-group_100g"`
		NovaGroupServing                                   int     `json:"nova-group_serving"`
		NutritionScoreFr                                   int     `json:"nutrition-score-fr"`
		NutritionScoreFr100G                               int     `json:"nutrition-score-fr_100g"`
		Proteins                                           float64 `json:"proteins"`
		Proteins100G                                       float64 `json:"proteins_100g"`
		ProteinsServing                                    float64 `json:"proteins_serving"`
		ProteinsUnit                                       string  `json:"proteins_unit"`
		ProteinsValue                                      float64 `json:"proteins_value"`
		Salt                                               float64 `json:"salt"`
		Salt100G                                           float64 `json:"salt_100g"`
		SaltServing                                        float64 `json:"salt_serving"`
		SaltUnit                                           string  `json:"salt_unit"`
		SaltValue                                          float64 `json:"salt_value"`
		SaturatedFat                                       float64 `json:"saturated-fat"`
		SaturatedFat100G                                   float64 `json:"saturated-fat_100g"`
		SaturatedFatServing                                float64 `json:"saturated-fat_serving"`
		SaturatedFatUnit                                   string  `json:"saturated-fat_unit"`
		SaturatedFatValue                                  float64 `json:"saturated-fat_value"`
		Sodium                                             float64 `json:"sodium"`
		Sodium100G                                         float64 `json:"sodium_100g"`
		SodiumServing                                      float64 `json:"sodium_serving"`
		SodiumUnit                                         string  `json:"sodium_unit"`
		SodiumValue                                        float64 `json:"sodium_value"`
		Sugars                                             float64 `json:"sugars"`
		Sugars100G                                         float64 `json:"sugars_100g"`
		SugarsServing                                      int     `json:"sugars_serving"`
		SugarsUnit                                         string  `json:"sugars_unit"`
		SugarsValue                                        float64 `json:"sugars_value"`
	} `json:"nutriments"`
	NutriscoreData struct {
		Energy                                         int     `json:"energy"`
		EnergyPoints                                   int     `json:"energy_points"`
		EnergyValue                                    int     `json:"energy_value"`
		Fiber                                          float64 `json:"fiber"`
		FiberPoints                                    int     `json:"fiber_points"`
		FiberValue                                     float64 `json:"fiber_value"`
		FruitsVegetablesNutsColzaWalnutOliveOils       int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils"`
		FruitsVegetablesNutsColzaWalnutOliveOilsPoints int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils_points"`
		FruitsVegetablesNutsColzaWalnutOliveOilsValue  int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils_value"`
		Grade                                          string  `json:"grade"`
		IsBeverage                                     int     `json:"is_beverage"`
		IsCheese                                       int     `json:"is_cheese"`
		IsFat                                          int     `json:"is_fat"`
		IsWater                                        int     `json:"is_water"`
		NegativePoints                                 int     `json:"negative_points"`
		PositivePoints                                 int     `json:"positive_points"`
		Proteins                                       float64 `json:"proteins"`
		ProteinsPoints                                 int     `json:"proteins_points"`
		ProteinsValue                                  float64 `json:"proteins_value"`
		SaturatedFat                                   float64 `json:"saturated_fat"`
		SaturatedFatPoints                             int     `json:"saturated_fat_points"`
		SaturatedFatRatio                              float64 `json:"saturated_fat_ratio"`
		SaturatedFatRatioPoints                        int     `json:"saturated_fat_ratio_points"`
		SaturatedFatRatioValue                         float64 `json:"saturated_fat_ratio_value"`
		SaturatedFatValue                              float64 `json:"saturated_fat_value"`
		Score                                          int     `json:"score"`
		Sodium                                         int     `json:"sodium"`
		SodiumPoints                                   int     `json:"sodium_points"`
		SodiumValue                                    int     `json:"sodium_value"`
		Sugars                                         float64 `json:"sugars"`
		SugarsPoints                                   int     `json:"sugars_points"`
		SugarsValue                                    float64 `json:"sugars_value"`
	} `json:"nutriscore_data"`
	NutriscoreGrade                                                       string        `json:"nutriscore_grade"`
	NutriscoreScore                                                       int           `json:"nutriscore_score"`
	NutriscoreScoreOpposite                                               int           `json:"nutriscore_score_opposite"`
	NutritionData                                                         string        `json:"nutrition_data"`
	NutritionDataPer                                                      string        `json:"nutrition_data_per"`
	NutritionDataPrepared                                                 string        `json:"nutrition_data_prepared"`
	NutritionDataPreparedPer                                              string        `json:"nutrition_data_prepared_per"`
	NutritionGradeFr                                                      string        `json:"nutrition_grade_fr"`
	NutritionGrades                                                       string        `json:"nutrition_grades"`
	NutritionGradesTags                                                   []string      `json:"nutrition_grades_tags"`
	NutritionScoreBeverage                                                int           `json:"nutrition_score_beverage"`
	NutritionScoreDebug                                                   string        `json:"nutrition_score_debug"`
	NutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients      int           `json:"nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients"`
	NutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue int           `json:"nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value"`
	Obsolete                                                              string        `json:"obsolete"`
	ObsoleteSinceDate                                                     string        `json:"obsolete_since_date"`
	OriginEn                                                              string        `json:"origin_en"`
	Origins                                                               string        `json:"origins"`
	OriginsHierarchy                                                      []interface{} `json:"origins_hierarchy"`
	OriginsLc                                                             string        `json:"origins_lc"`
	OriginsOld                                                            string        `json:"origins_old"`
	OriginsTags                                                           []interface{} `json:"origins_tags"`
	OtherNutritionalSubstancesTags                                        []interface{} `json:"other_nutritional_substances_tags"`
	Packaging                                                             string        `json:"packaging"`
	PackagingHierarchy                                                    []string      `json:"packaging_hierarchy"`
	PackagingLc                                                           string        `json:"packaging_lc"`
	PackagingOld                                                          string        `json:"packaging_old"`
	PackagingOldBeforeTaxonomization                                      string        `json:"packaging_old_before_taxonomization"`
	PackagingTags                                                         []string      `json:"packaging_tags"`
	PackagingTextEn                                                       string        `json:"packaging_text_en"`
	Packagings                                                            []struct {
		Material string `json:"material"`
		Shape    string `json:"shape"`
	} `json:"packagings"`
	PackagingsComplete     int           `json:"packagings_complete"`
	PhotographersTags      []string      `json:"photographers_tags"`
	PnnsGroups1            string        `json:"pnns_groups_1"`
	PnnsGroups1Tags        []string      `json:"pnns_groups_1_tags"`
	PnnsGroups2            string        `json:"pnns_groups_2"`
	PnnsGroups2Tags        []string      `json:"pnns_groups_2_tags"`
	PopularityKey          int64         `json:"popularity_key"`
	PopularityTags         []string      `json:"popularity_tags"`
	ProductName            string        `json:"product_name"`
	ProductNameEn          string        `json:"product_name_en"`
	ProductNameFr          string        `json:"product_name_fr"`
	ProductNameFrDebugTags []interface{} `json:"product_name_fr_debug_tags"`
	ProductQuantity        string        `json:"product_quantity"`
	PurchasePlaces         string        `json:"purchase_places"`
	PurchasePlacesTags     []interface{} `json:"purchase_places_tags"`
	Quantity               string        `json:"quantity"`
	RemovedCountriesTags   []interface{} `json:"removed_countries_tags"`
	Rev                    int           `json:"rev"`
	ScansN                 int           `json:"scans_n"`
	SelectedImages         struct {
		Front struct {
			Display struct {
				En string `json:"en"`
			} `json:"display"`
			Small struct {
				En string `json:"en"`
			} `json:"small"`
			Thumb struct {
				En string `json:"en"`
			} `json:"thumb"`
		} `json:"front"`
		Ingredients struct {
			Display struct {
				En string `json:"en"`
			} `json:"display"`
			Small struct {
				En string `json:"en"`
			} `json:"small"`
			Thumb struct {
				En string `json:"en"`
			} `json:"thumb"`
		} `json:"ingredients"`
		Nutrition struct {
			Display struct {
				En string `json:"en"`
			} `json:"display"`
			Small struct {
				En string `json:"en"`
			} `json:"small"`
			Thumb struct {
				En string `json:"en"`
			} `json:"thumb"`
		} `json:"nutrition"`
	} `json:"selected_images"`
	ServingQuantity       string        `json:"serving_quantity"`
	ServingSize           string        `json:"serving_size"`
	Sortkey               int           `json:"sortkey"`
	States                string        `json:"states"`
	StatesHierarchy       []string      `json:"states_hierarchy"`
	StatesTags            []string      `json:"states_tags"`
	Stores                string        `json:"stores"`
	StoresTags            []interface{} `json:"stores_tags"`
	Teams                 string        `json:"teams"`
	TeamsTags             []string      `json:"teams_tags"`
	Traces                string        `json:"traces"`
	TracesFromIngredients string        `json:"traces_from_ingredients"`
	TracesFromUser        string        `json:"traces_from_user"`
	TracesHierarchy       []interface{} `json:"traces_hierarchy"`
	TracesLc              string        `json:"traces_lc"`
	TracesTags            []interface{} `json:"traces_tags"`
	UniqueScansN          int           `json:"unique_scans_n"`
	UnknownIngredientsN   int           `json:"unknown_ingredients_n"`
	UnknownNutrientsTags  []interface{} `json:"unknown_nutrients_tags"`
	UpdateKey             string        `json:"update_key"`
	VitaminsPrevTags      []interface{} `json:"vitamins_prev_tags"`
	VitaminsTags          []interface{} `json:"vitamins_tags"`
	WeighersTags          []interface{} `json:"weighers_tags"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			out.ID = string(in.String())
		case "_keywords":
			if in.IsNull() {
				in.Skip()
				out.Keywords = nil
			} else {
				in.Delim('[')
				if out.Keywords == nil {
					if !in.IsDelim(']') {
						out.Keywords = make([]string, 0, 4)
					} else {
						out.Keywords = []string{}
					}
				} else {
					out.Keywords = (out.Keywords)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Keywords = append(out.Keywords, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "added_countries_tags":
			if in.IsNull() {
				in.Skip()
				out.AddedCountriesTags = nil
			} else {
				in.Delim('[')
				if out.AddedCountriesTags == nil {
					if !in.IsDelim(']') {
						out.AddedCountriesTags = make([]interface{}, 0, 4)
					} else {
						out.AddedCountriesTags = []interface{}{}
					}
				} else {
					out.AddedCountriesTags = (out.AddedCountriesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v2 interface{}
					if m, ok := v2.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v2.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v2 = in.Interface()
					}
					out.AddedCountriesTags = append(out.AddedCountriesTags, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "additives_debug_tags":
			if in.IsNull() {
				in.Skip()
				out.AdditivesDebugTags = nil
			} else {
				in.Delim('[')
				if out.AdditivesDebugTags == nil {
					if !in.IsDelim(']') {
						out.AdditivesDebugTags = make([]interface{}, 0, 4)
					} else {
						out.AdditivesDebugTags = []interface{}{}
					}
				} else {
					out.AdditivesDebugTags = (out.AdditivesDebugTags)[:0]
				}
				for !in.IsDelim(']') {
					var v3 interface{}
					if m, ok := v3.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v3.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v3 = in.Interface()
					}
					out.AdditivesDebugTags = append(out.AdditivesDebugTags, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "additives_n":
			out.AdditivesN = int(in.Int())
		case "additives_old_n":
			out.AdditivesOldN = int(in.Int())
		case "additives_old_tags":
			if in.IsNull() {
				in.Skip()
				out.AdditivesOldTags = nil
			} else {
				in.Delim('[')
				if out.AdditivesOldTags == nil {
					if !in.IsDelim(']') {
						out.AdditivesOldTags = make([]string, 0, 4)
					} else {
						out.AdditivesOldTags = []string{}
					}
				} else {
					out.AdditivesOldTags = (out.AdditivesOldTags)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.AdditivesOldTags = append(out.AdditivesOldTags, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "additives_original_tags":
			if in.IsNull() {
				in.Skip()
				out.AdditivesOriginalTags = nil
			} else {
				in.Delim('[')
				if out.AdditivesOriginalTags == nil {
					if !in.IsDelim(']') {
						out.AdditivesOriginalTags = make([]string, 0, 4)
					} else {
						out.AdditivesOriginalTags = []string{}
					}
				} else {
					out.AdditivesOriginalTags = (out.AdditivesOriginalTags)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.AdditivesOriginalTags = append(out.AdditivesOriginalTags, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "additives_prev_original_tags":
			if in.IsNull() {
				in.Skip()
				out.AdditivesPrevOriginalTags = nil
			} else {
				in.Delim('[')
				if out.AdditivesPrevOriginalTags == nil {
					if !in.IsDelim(']') {
						out.AdditivesPrevOriginalTags = make([]string, 0, 4)
					} else {
						out.AdditivesPrevOriginalTags = []string{}
					}
				} else {
					out.AdditivesPrevOriginalTags = (out.AdditivesPrevOriginalTags)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.AdditivesPrevOriginalTags = append(out.AdditivesPrevOriginalTags, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "additives_tags":
			if in.IsNull() {
				in.Skip()
				out.AdditivesTags = nil
			} else {
				in.Delim('[')
				if out.AdditivesTags == nil {
					if !in.IsDelim(']') {
						out.AdditivesTags = make([]string, 0, 4)
					} else {
						out.AdditivesTags = []string{}
					}
				} else {
					out.AdditivesTags = (out.AdditivesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.AdditivesTags = append(out.AdditivesTags, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "allergens":
			out.Allergens = string(in.String())
		case "allergens_from_ingredients":
			out.AllergensFromIngredients = string(in.String())
		case "allergens_from_user":
			out.AllergensFromUser = string(in.String())
		case "allergens_hierarchy":
			if in.IsNull() {
				in.Skip()
				out.AllergensHierarchy = nil
			} else {
				in.Delim('[')
				if out.AllergensHierarchy == nil {
					if !in.IsDelim(']') {
						out.AllergensHierarchy = make([]string, 0, 4)
					} else {
						out.AllergensHierarchy = []string{}
					}
				} else {
					out.AllergensHierarchy = (out.AllergensHierarchy)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.AllergensHierarchy = append(out.AllergensHierarchy, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "allergens_lc":
			out.AllergensLc = string(in.String())
		case "allergens_tags":
			if in.IsNull() {
				in.Skip()
				out.AllergensTags = nil
			} else {
				in.Delim('[')
				if out.AllergensTags == nil {
					if !in.IsDelim(']') {
						out.AllergensTags = make([]string, 0, 4)
					} else {
						out.AllergensTags = []string{}
					}
				} else {
					out.AllergensTags = (out.AllergensTags)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.AllergensTags = append(out.AllergensTags, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "amino_acids_prev_tags":
			if in.IsNull() {
				in.Skip()
				out.AminoAcidsPrevTags = nil
			} else {
				in.Delim('[')
				if out.AminoAcidsPrevTags == nil {
					if !in.IsDelim(']') {
						out.AminoAcidsPrevTags = make([]interface{}, 0, 4)
					} else {
						out.AminoAcidsPrevTags = []interface{}{}
					}
				} else {
					out.AminoAcidsPrevTags = (out.AminoAcidsPrevTags)[:0]
				}
				for !in.IsDelim(']') {
					var v10 interface{}
					if m, ok := v10.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v10.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v10 = in.Interface()
					}
					out.AminoAcidsPrevTags = append(out.AminoAcidsPrevTags, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "amino_acids_tags":
			if in.IsNull() {
				in.Skip()
				out.AminoAcidsTags = nil
			} else {
				in.Delim('[')
				if out.AminoAcidsTags == nil {
					if !in.IsDelim(']') {
						out.AminoAcidsTags = make([]interface{}, 0, 4)
					} else {
						out.AminoAcidsTags = []interface{}{}
					}
				} else {
					out.AminoAcidsTags = (out.AminoAcidsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v11 interface{}
					if m, ok := v11.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v11.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v11 = in.Interface()
					}
					out.AminoAcidsTags = append(out.AminoAcidsTags, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "brands":
			out.Brands = string(in.String())
		case "brands_tags":
			if in.IsNull() {
				in.Skip()
				out.BrandsTags = nil
			} else {
				in.Delim('[')
				if out.BrandsTags == nil {
					if !in.IsDelim(']') {
						out.BrandsTags = make([]string, 0, 4)
					} else {
						out.BrandsTags = []string{}
					}
				} else {
					out.BrandsTags = (out.BrandsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v12 string
					v12 = string(in.String())
					out.BrandsTags = append(out.BrandsTags, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "carbon_footprint_from_known_ingredients_debug":
			out.CarbonFootprintFromKnownIngredientsDebug = string(in.String())
		case "carbon_footprint_percent_of_known_ingredients":
			out.CarbonFootprintPercentOfKnownIngredients = int(in.Int())
		case "categories":
			out.Categories = string(in.String())
		case "categories_hierarchy":
			if in.IsNull() {
				in.Skip()
				out.CategoriesHierarchy = nil
			} else {
				in.Delim('[')
				if out.CategoriesHierarchy == nil {
					if !in.IsDelim(']') {
						out.CategoriesHierarchy = make([]string, 0, 4)
					} else {
						out.CategoriesHierarchy = []string{}
					}
				} else {
					out.CategoriesHierarchy = (out.CategoriesHierarchy)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.CategoriesHierarchy = append(out.CategoriesHierarchy, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "categories_lc":
			out.CategoriesLc = string(in.String())
		case "categories_old":
			out.CategoriesOld = string(in.String())
		case "categories_properties":
			easyjsonC4ff3609Decode1(in, &out.CategoriesProperties)
		case "categories_properties_tags":
			if in.IsNull() {
				in.Skip()
				out.CategoriesPropertiesTags = nil
			} else {
				in.Delim('[')
				if out.CategoriesPropertiesTags == nil {
					if !in.IsDelim(']') {
						out.CategoriesPropertiesTags = make([]string, 0, 4)
					} else {
						out.CategoriesPropertiesTags = []string{}
					}
				} else {
					out.CategoriesPropertiesTags = (out.CategoriesPropertiesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.CategoriesPropertiesTags = append(out.CategoriesPropertiesTags, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "categories_tags":
			if in.IsNull() {
				in.Skip()
				out.CategoriesTags = nil
			} else {
				in.Delim('[')
				if out.CategoriesTags == nil {
					if !in.IsDelim(']') {
						out.CategoriesTags = make([]string, 0, 4)
					} else {
						out.CategoriesTags = []string{}
					}
				} else {
					out.CategoriesTags = (out.CategoriesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v15 string
					v15 = string(in.String())
					out.CategoriesTags = append(out.CategoriesTags, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "category_properties":
			easyjsonC4ff3609Decode2(in, &out.CategoryProperties)
		case "checkers_tags":
			if in.IsNull() {
				in.Skip()
				out.CheckersTags = nil
			} else {
				in.Delim('[')
				if out.CheckersTags == nil {
					if !in.IsDelim(']') {
						out.CheckersTags = make([]interface{}, 0, 4)
					} else {
						out.CheckersTags = []interface{}{}
					}
				} else {
					out.CheckersTags = (out.CheckersTags)[:0]
				}
				for !in.IsDelim(']') {
					var v16 interface{}
					if m, ok := v16.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v16.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v16 = in.Interface()
					}
					out.CheckersTags = append(out.CheckersTags, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ciqual_food_name_tags":
			if in.IsNull() {
				in.Skip()
				out.CiqualFoodNameTags = nil
			} else {
				in.Delim('[')
				if out.CiqualFoodNameTags == nil {
					if !in.IsDelim(']') {
						out.CiqualFoodNameTags = make([]string, 0, 4)
					} else {
						out.CiqualFoodNameTags = []string{}
					}
				} else {
					out.CiqualFoodNameTags = (out.CiqualFoodNameTags)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.CiqualFoodNameTags = append(out.CiqualFoodNameTags, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cities_tags":
			if in.IsNull() {
				in.Skip()
				out.CitiesTags = nil
			} else {
				in.Delim('[')
				if out.CitiesTags == nil {
					if !in.IsDelim(']') {
						out.CitiesTags = make([]interface{}, 0, 4)
					} else {
						out.CitiesTags = []interface{}{}
					}
				} else {
					out.CitiesTags = (out.CitiesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v18 interface{}
					if m, ok := v18.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v18.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v18 = in.Interface()
					}
					out.CitiesTags = append(out.CitiesTags, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "code":
			out.Code = string(in.String())
		case "codes_tags":
			if in.IsNull() {
				in.Skip()
				out.CodesTags = nil
			} else {
				in.Delim('[')
				if out.CodesTags == nil {
					if !in.IsDelim(']') {
						out.CodesTags = make([]string, 0, 4)
					} else {
						out.CodesTags = []string{}
					}
				} else {
					out.CodesTags = (out.CodesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.CodesTags = append(out.CodesTags, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "compared_to_category":
			out.ComparedToCategory = string(in.String())
		case "complete":
			out.Complete = int(in.Int())
		case "completeness":
			out.Completeness = float64(in.Float64())
		case "correctors_tags":
			if in.IsNull() {
				in.Skip()
				out.CorrectorsTags = nil
			} else {
				in.Delim('[')
				if out.CorrectorsTags == nil {
					if !in.IsDelim(']') {
						out.CorrectorsTags = make([]string, 0, 4)
					} else {
						out.CorrectorsTags = []string{}
					}
				} else {
					out.CorrectorsTags = (out.CorrectorsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v20 string
					v20 = string(in.String())
					out.CorrectorsTags = append(out.CorrectorsTags, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "countries":
			out.Countries = string(in.String())
		case "countries_hierarchy":
			if in.IsNull() {
				in.Skip()
				out.CountriesHierarchy = nil
			} else {
				in.Delim('[')
				if out.CountriesHierarchy == nil {
					if !in.IsDelim(']') {
						out.CountriesHierarchy = make([]string, 0, 4)
					} else {
						out.CountriesHierarchy = []string{}
					}
				} else {
					out.CountriesHierarchy = (out.CountriesHierarchy)[:0]
				}
				for !in.IsDelim(']') {
					var v21 string
					v21 = string(in.String())
					out.CountriesHierarchy = append(out.CountriesHierarchy, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "countries_lc":
			out.CountriesLc = string(in.String())
		case "countries_tags":
			if in.IsNull() {
				in.Skip()
				out.CountriesTags = nil
			} else {
				in.Delim('[')
				if out.CountriesTags == nil {
					if !in.IsDelim(']') {
						out.CountriesTags = make([]string, 0, 4)
					} else {
						out.CountriesTags = []string{}
					}
				} else {
					out.CountriesTags = (out.CountriesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v22 string
					v22 = string(in.String())
					out.CountriesTags = append(out.CountriesTags, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "created_t":
			out.CreatedT = int(in.Int())
		case "creator":
			out.Creator = string(in.String())
		case "data_quality_bugs_tags":
			if in.IsNull() {
				in.Skip()
				out.DataQualityBugsTags = nil
			} else {
				in.Delim('[')
				if out.DataQualityBugsTags == nil {
					if !in.IsDelim(']') {
						out.DataQualityBugsTags = make([]interface{}, 0, 4)
					} else {
						out.DataQualityBugsTags = []interface{}{}
					}
				} else {
					out.DataQualityBugsTags = (out.DataQualityBugsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v23 interface{}
					if m, ok := v23.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v23.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v23 = in.Interface()
					}
					out.DataQualityBugsTags = append(out.DataQualityBugsTags, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_quality_errors_tags":
			if in.IsNull() {
				in.Skip()
				out.DataQualityErrorsTags = nil
			} else {
				in.Delim('[')
				if out.DataQualityErrorsTags == nil {
					if !in.IsDelim(']') {
						out.DataQualityErrorsTags = make([]interface{}, 0, 4)
					} else {
						out.DataQualityErrorsTags = []interface{}{}
					}
				} else {
					out.DataQualityErrorsTags = (out.DataQualityErrorsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v24 interface{}
					if m, ok := v24.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v24.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v24 = in.Interface()
					}
					out.DataQualityErrorsTags = append(out.DataQualityErrorsTags, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_quality_info_tags":
			if in.IsNull() {
				in.Skip()
				out.DataQualityInfoTags = nil
			} else {
				in.Delim('[')
				if out.DataQualityInfoTags == nil {
					if !in.IsDelim(']') {
						out.DataQualityInfoTags = make([]string, 0, 4)
					} else {
						out.DataQualityInfoTags = []string{}
					}
				} else {
					out.DataQualityInfoTags = (out.DataQualityInfoTags)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.DataQualityInfoTags = append(out.DataQualityInfoTags, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_quality_tags":
			if in.IsNull() {
				in.Skip()
				out.DataQualityTags = nil
			} else {
				in.Delim('[')
				if out.DataQualityTags == nil {
					if !in.IsDelim(']') {
						out.DataQualityTags = make([]string, 0, 4)
					} else {
						out.DataQualityTags = []string{}
					}
				} else {
					out.DataQualityTags = (out.DataQualityTags)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.DataQualityTags = append(out.DataQualityTags, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_quality_warnings_tags":
			if in.IsNull() {
				in.Skip()
				out.DataQualityWarningsTags = nil
			} else {
				in.Delim('[')
				if out.DataQualityWarningsTags == nil {
					if !in.IsDelim(']') {
						out.DataQualityWarningsTags = make([]string, 0, 4)
					} else {
						out.DataQualityWarningsTags = []string{}
					}
				} else {
					out.DataQualityWarningsTags = (out.DataQualityWarningsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.DataQualityWarningsTags = append(out.DataQualityWarningsTags, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data_sources":
			out.DataSources = string(in.String())
		case "data_sources_tags":
			if in.IsNull() {
				in.Skip()
				out.DataSourcesTags = nil
			} else {
				in.Delim('[')
				if out.DataSourcesTags == nil {
					if !in.IsDelim(']') {
						out.DataSourcesTags = make([]string, 0, 4)
					} else {
						out.DataSourcesTags = []string{}
					}
				} else {
					out.DataSourcesTags = (out.DataSourcesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.DataSourcesTags = append(out.DataSourcesTags, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "debug_param_sorted_langs":
			if in.IsNull() {
				in.Skip()
				out.DebugParamSortedLangs = nil
			} else {
				in.Delim('[')
				if out.DebugParamSortedLangs == nil {
					if !in.IsDelim(']') {
						out.DebugParamSortedLangs = make([]string, 0, 4)
					} else {
						out.DebugParamSortedLangs = []string{}
					}
				} else {
					out.DebugParamSortedLangs = (out.DebugParamSortedLangs)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.DebugParamSortedLangs = append(out.DebugParamSortedLangs, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ecoscore_data":
			easyjsonC4ff3609Decode3(in, &out.EcoscoreData)
		case "ecoscore_extended_data":
			easyjsonC4ff3609Decode4(in, &out.EcoscoreExtendedData)
		case "ecoscore_extended_data_version":
			out.EcoscoreExtendedDataVersion = string(in.String())
		case "ecoscore_grade":
			out.EcoscoreGrade = string(in.String())
		case "ecoscore_score":
			out.EcoscoreScore = int(in.Int())
		case "ecoscore_tags":
			if in.IsNull() {
				in.Skip()
				out.EcoscoreTags = nil
			} else {
				in.Delim('[')
				if out.EcoscoreTags == nil {
					if !in.IsDelim(']') {
						out.EcoscoreTags = make([]string, 0, 4)
					} else {
						out.EcoscoreTags = []string{}
					}
				} else {
					out.EcoscoreTags = (out.EcoscoreTags)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.EcoscoreTags = append(out.EcoscoreTags, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "editors":
			if in.IsNull() {
				in.Skip()
				out.Editors = nil
			} else {
				in.Delim('[')
				if out.Editors == nil {
					if !in.IsDelim(']') {
						out.Editors = make([]string, 0, 4)
					} else {
						out.Editors = []string{}
					}
				} else {
					out.Editors = (out.Editors)[:0]
				}
				for !in.IsDelim(']') {
					var v31 string
					v31 = string(in.String())
					out.Editors = append(out.Editors, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "editors_tags":
			if in.IsNull() {
				in.Skip()
				out.EditorsTags = nil
			} else {
				in.Delim('[')
				if out.EditorsTags == nil {
					if !in.IsDelim(']') {
						out.EditorsTags = make([]string, 0, 4)
					} else {
						out.EditorsTags = []string{}
					}
				} else {
					out.EditorsTags = (out.EditorsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v32 string
					v32 = string(in.String())
					out.EditorsTags = append(out.EditorsTags, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "emb_codes":
			out.EmbCodes = string(in.String())
		case "emb_codes_20141016":
			out.EmbCodes20141016 = string(in.String())
		case "emb_codes_orig":
			out.EmbCodesOrig = string(in.String())
		case "emb_codes_tags":
			if in.IsNull() {
				in.Skip()
				out.EmbCodesTags = nil
			} else {
				in.Delim('[')
				if out.EmbCodesTags == nil {
					if !in.IsDelim(']') {
						out.EmbCodesTags = make([]interface{}, 0, 4)
					} else {
						out.EmbCodesTags = []interface{}{}
					}
				} else {
					out.EmbCodesTags = (out.EmbCodesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v33 interface{}
					if m, ok := v33.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v33.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v33 = in.Interface()
					}
					out.EmbCodesTags = append(out.EmbCodesTags, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "entry_dates_tags":
			if in.IsNull() {
				in.Skip()
				out.EntryDatesTags = nil
			} else {
				in.Delim('[')
				if out.EntryDatesTags == nil {
					if !in.IsDelim(']') {
						out.EntryDatesTags = make([]string, 0, 4)
					} else {
						out.EntryDatesTags = []string{}
					}
				} else {
					out.EntryDatesTags = (out.EntryDatesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.EntryDatesTags = append(out.EntryDatesTags, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "expiration_date":
			out.ExpirationDate = string(in.String())
		case "food_groups":
			out.FoodGroups = string(in.String())
		case "food_groups_tags":
			if in.IsNull() {
				in.Skip()
				out.FoodGroupsTags = nil
			} else {
				in.Delim('[')
				if out.FoodGroupsTags == nil {
					if !in.IsDelim(']') {
						out.FoodGroupsTags = make([]string, 0, 4)
					} else {
						out.FoodGroupsTags = []string{}
					}
				} else {
					out.FoodGroupsTags = (out.FoodGroupsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v35 string
					v35 = string(in.String())
					out.FoodGroupsTags = append(out.FoodGroupsTags, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fruits-vegetables-nuts_100g_estimate":
			out.FruitsVegetablesNuts100GEstimate = int(in.Int())
		case "generic_name_en":
			out.GenericNameEn = string(in.String())
		case "generic_name_fr":
			out.GenericNameFr = string(in.String())
		case "generic_name_fr_debug_tags":
			if in.IsNull() {
				in.Skip()
				out.GenericNameFrDebugTags = nil
			} else {
				in.Delim('[')
				if out.GenericNameFrDebugTags == nil {
					if !in.IsDelim(']') {
						out.GenericNameFrDebugTags = make([]interface{}, 0, 4)
					} else {
						out.GenericNameFrDebugTags = []interface{}{}
					}
				} else {
					out.GenericNameFrDebugTags = (out.GenericNameFrDebugTags)[:0]
				}
				for !in.IsDelim(']') {
					var v36 interface{}
					if m, ok := v36.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v36.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v36 = in.Interface()
					}
					out.GenericNameFrDebugTags = append(out.GenericNameFrDebugTags, v36)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID0 = string(in.String())
		case "image_front_small_url":
			out.ImageFrontSmallURL = string(in.String())
		case "image_front_thumb_url":
			out.ImageFrontThumbURL = string(in.String())
		case "image_front_url":
			out.ImageFrontURL = string(in.String())
		case "image_ingredients_small_url":
			out.ImageIngredientsSmallURL = string(in.String())
		case "image_ingredients_thumb_url":
			out.ImageIngredientsThumbURL = string(in.String())
		case "image_ingredients_url":
			out.ImageIngredientsURL = string(in.String())
		case "image_nutrition_small_url":
			out.ImageNutritionSmallURL = string(in.String())
		case "image_nutrition_thumb_url":
			out.ImageNutritionThumbURL = string(in.String())
		case "image_nutrition_url":
			out.ImageNutritionURL = string(in.String())
		case "image_small_url":
			out.ImageSmallURL = string(in.String())
		case "image_thumb_url":
			out.ImageThumbURL = string(in.String())
		case "image_url":
			out.ImageURL = string(in.String())
		case "images":
			easyjsonC4ff3609Decode5(in, &out.Images)
		case "informers_tags":
			if in.IsNull() {
				in.Skip()
				out.InformersTags = nil
			} else {
				in.Delim('[')
				if out.InformersTags == nil {
					if !in.IsDelim(']') {
						out.InformersTags = make([]string, 0, 4)
					} else {
						out.InformersTags = []string{}
					}
				} else {
					out.InformersTags = (out.InformersTags)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.InformersTags = append(out.InformersTags, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients":
			if in.IsNull() {
				in.Skip()
				out.Ingredients = nil
			} else {
				in.Delim('[')
				if out.Ingredients == nil {
					if !in.IsDelim(']') {
						out.Ingredients = make([]struct {
							ID                string `json:"id"`
							Percent           int    `json:"percent,omitempty"`
							PercentEstimate   int    `json:"percent_estimate"`
							PercentMax        int    `json:"percent_max"`
							PercentMin        int    `json:"percent_min"`
							Processing        string `json:"processing,omitempty"`
							Rank              int    `json:"rank,omitempty"`
							Text              string `json:"text"`
							Vegan             string `json:"vegan,omitempty"`
							Vegetarian        string `json:"vegetarian,omitempty"`
							FromPalmOil       string `json:"from_palm_oil,omitempty"`
							HasSubIngredients string `json:"has_sub_ingredients,omitempty"`
						}, 0, 0)
					} else {
						out.Ingredients = []struct {
							ID                string `json:"id"`
							Percent           int    `json:"percent,omitempty"`
							PercentEstimate   int    `json:"percent_estimate"`
							PercentMax        int    `json:"percent_max"`
							PercentMin        int    `json:"percent_min"`
							Processing        string `json:"processing,omitempty"`
							Rank              int    `json:"rank,omitempty"`
							Text              string `json:"text"`
							Vegan             string `json:"vegan,omitempty"`
							Vegetarian        string `json:"vegetarian,omitempty"`
							FromPalmOil       string `json:"from_palm_oil,omitempty"`
							HasSubIngredients string `json:"has_sub_ingredients,omitempty"`
						}{}
					}
				} else {
					out.Ingredients = (out.Ingredients)[:0]
				}
				for !in.IsDelim(']') {
					var v38 struct {
						ID                string `json:"id"`
						Percent           int    `json:"percent,omitempty"`
						PercentEstimate   int    `json:"percent_estimate"`
						PercentMax        int    `json:"percent_max"`
						PercentMin        int    `json:"percent_min"`
						Processing        string `json:"processing,omitempty"`
						Rank              int    `json:"rank,omitempty"`
						Text              string `json:"text"`
						Vegan             string `json:"vegan,omitempty"`
						Vegetarian        string `json:"vegetarian,omitempty"`
						FromPalmOil       string `json:"from_palm_oil,omitempty"`
						HasSubIngredients string `json:"has_sub_ingredients,omitempty"`
					}
					easyjsonC4ff3609Decode6(in, &v38)
					out.Ingredients = append(out.Ingredients, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_analysis":
			easyjsonC4ff3609Decode7(in, &out.IngredientsAnalysis)
		case "ingredients_analysis_tags":
			if in.IsNull() {
				in.Skip()
				out.IngredientsAnalysisTags = nil
			} else {
				in.Delim('[')
				if out.IngredientsAnalysisTags == nil {
					if !in.IsDelim(']') {
						out.IngredientsAnalysisTags = make([]string, 0, 4)
					} else {
						out.IngredientsAnalysisTags = []string{}
					}
				} else {
					out.IngredientsAnalysisTags = (out.IngredientsAnalysisTags)[:0]
				}
				for !in.IsDelim(']') {
					var v39 string
					v39 = string(in.String())
					out.IngredientsAnalysisTags = append(out.IngredientsAnalysisTags, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_debug":
			if in.IsNull() {
				in.Skip()
				out.IngredientsDebug = nil
			} else {
				in.Delim('[')
				if out.IngredientsDebug == nil {
					if !in.IsDelim(']') {
						out.IngredientsDebug = make([]interface{}, 0, 4)
					} else {
						out.IngredientsDebug = []interface{}{}
					}
				} else {
					out.IngredientsDebug = (out.IngredientsDebug)[:0]
				}
				for !in.IsDelim(']') {
					var v40 interface{}
					if m, ok := v40.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v40.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v40 = in.Interface()
					}
					out.IngredientsDebug = append(out.IngredientsDebug, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_from_or_that_may_be_from_palm_oil_n":
			out.IngredientsFromOrThatMayBeFromPalmOilN = int(in.Int())
		case "ingredients_from_palm_oil_n":
			out.IngredientsFromPalmOilN = int(in.Int())
		case "ingredients_from_palm_oil_tags":
			if in.IsNull() {
				in.Skip()
				out.IngredientsFromPalmOilTags = nil
			} else {
				in.Delim('[')
				if out.IngredientsFromPalmOilTags == nil {
					if !in.IsDelim(']') {
						out.IngredientsFromPalmOilTags = make([]interface{}, 0, 4)
					} else {
						out.IngredientsFromPalmOilTags = []interface{}{}
					}
				} else {
					out.IngredientsFromPalmOilTags = (out.IngredientsFromPalmOilTags)[:0]
				}
				for !in.IsDelim(']') {
					var v41 interface{}
					if m, ok := v41.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v41.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v41 = in.Interface()
					}
					out.IngredientsFromPalmOilTags = append(out.IngredientsFromPalmOilTags, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_hierarchy":
			if in.IsNull() {
				in.Skip()
				out.IngredientsHierarchy = nil
			} else {
				in.Delim('[')
				if out.IngredientsHierarchy == nil {
					if !in.IsDelim(']') {
						out.IngredientsHierarchy = make([]string, 0, 4)
					} else {
						out.IngredientsHierarchy = []string{}
					}
				} else {
					out.IngredientsHierarchy = (out.IngredientsHierarchy)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.IngredientsHierarchy = append(out.IngredientsHierarchy, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_ids_debug":
			if in.IsNull() {
				in.Skip()
				out.IngredientsIdsDebug = nil
			} else {
				in.Delim('[')
				if out.IngredientsIdsDebug == nil {
					if !in.IsDelim(']') {
						out.IngredientsIdsDebug = make([]string, 0, 4)
					} else {
						out.IngredientsIdsDebug = []string{}
					}
				} else {
					out.IngredientsIdsDebug = (out.IngredientsIdsDebug)[:0]
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.IngredientsIdsDebug = append(out.IngredientsIdsDebug, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_n":
			out.IngredientsN = int(in.Int())
		case "ingredients_n_tags":
			if in.IsNull() {
				in.Skip()
				out.IngredientsNTags = nil
			} else {
				in.Delim('[')
				if out.IngredientsNTags == nil {
					if !in.IsDelim(']') {
						out.IngredientsNTags = make([]string, 0, 4)
					} else {
						out.IngredientsNTags = []string{}
					}
				} else {
					out.IngredientsNTags = (out.IngredientsNTags)[:0]
				}
				for !in.IsDelim(']') {
					var v44 string
					v44 = string(in.String())
					out.IngredientsNTags = append(out.IngredientsNTags, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_original_tags":
			if in.IsNull() {
				in.Skip()
				out.IngredientsOriginalTags = nil
			} else {
				in.Delim('[')
				if out.IngredientsOriginalTags == nil {
					if !in.IsDelim(']') {
						out.IngredientsOriginalTags = make([]string, 0, 4)
					} else {
						out.IngredientsOriginalTags = []string{}
					}
				} else {
					out.IngredientsOriginalTags = (out.IngredientsOriginalTags)[:0]
				}
				for !in.IsDelim(']') {
					var v45 string
					v45 = string(in.String())
					out.IngredientsOriginalTags = append(out.IngredientsOriginalTags, v45)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_percent_analysis":
			out.IngredientsPercentAnalysis = int(in.Int())
		case "ingredients_tags":
			if in.IsNull() {
				in.Skip()
				out.IngredientsTags = nil
			} else {
				in.Delim('[')
				if out.IngredientsTags == nil {
					if !in.IsDelim(']') {
						out.IngredientsTags = make([]string, 0, 4)
					} else {
						out.IngredientsTags = []string{}
					}
				} else {
					out.IngredientsTags = (out.IngredientsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.IngredientsTags = append(out.IngredientsTags, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_text":
			out.IngredientsText = string(in.String())
		case "ingredients_text_debug":
			out.IngredientsTextDebug = string(in.String())
		case "ingredients_text_debug_tags":
			if in.IsNull() {
				in.Skip()
				out.IngredientsTextDebugTags = nil
			} else {
				in.Delim('[')
				if out.IngredientsTextDebugTags == nil {
					if !in.IsDelim(']') {
						out.IngredientsTextDebugTags = make([]interface{}, 0, 4)
					} else {
						out.IngredientsTextDebugTags = []interface{}{}
					}
				} else {
					out.IngredientsTextDebugTags = (out.IngredientsTextDebugTags)[:0]
				}
				for !in.IsDelim(']') {
					var v47 interface{}
					if m, ok := v47.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v47.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v47 = in.Interface()
					}
					out.IngredientsTextDebugTags = append(out.IngredientsTextDebugTags, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_text_en":
			out.IngredientsTextEn = string(in.String())
		case "ingredients_text_fr":
			out.IngredientsTextFr = string(in.String())
		case "ingredients_text_fr_debug_tags":
			if in.IsNull() {
				in.Skip()
				out.IngredientsTextFrDebugTags = nil
			} else {
				in.Delim('[')
				if out.IngredientsTextFrDebugTags == nil {
					if !in.IsDelim(']') {
						out.IngredientsTextFrDebugTags = make([]interface{}, 0, 4)
					} else {
						out.IngredientsTextFrDebugTags = []interface{}{}
					}
				} else {
					out.IngredientsTextFrDebugTags = (out.IngredientsTextFrDebugTags)[:0]
				}
				for !in.IsDelim(']') {
					var v48 interface{}
					if m, ok := v48.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v48.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v48 = in.Interface()
					}
					out.IngredientsTextFrDebugTags = append(out.IngredientsTextFrDebugTags, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_text_with_allergens":
			out.IngredientsTextWithAllergens = string(in.String())
		case "ingredients_text_with_allergens_en":
			out.IngredientsTextWithAllergensEn = string(in.String())
		case "ingredients_that_may_be_from_palm_oil_n":
			out.IngredientsThatMayBeFromPalmOilN = int(in.Int())
		case "ingredients_that_may_be_from_palm_oil_tags":
			if in.IsNull() {
				in.Skip()
				out.IngredientsThatMayBeFromPalmOilTags = nil
			} else {
				in.Delim('[')
				if out.IngredientsThatMayBeFromPalmOilTags == nil {
					if !in.IsDelim(']') {
						out.IngredientsThatMayBeFromPalmOilTags = make([]interface{}, 0, 4)
					} else {
						out.IngredientsThatMayBeFromPalmOilTags = []interface{}{}
					}
				} else {
					out.IngredientsThatMayBeFromPalmOilTags = (out.IngredientsThatMayBeFromPalmOilTags)[:0]
				}
				for !in.IsDelim(']') {
					var v49 interface{}
					if m, ok := v49.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v49.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v49 = in.Interface()
					}
					out.IngredientsThatMayBeFromPalmOilTags = append(out.IngredientsThatMayBeFromPalmOilTags, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ingredients_with_specified_percent_n":
			out.IngredientsWithSpecifiedPercentN = int(in.Int())
		case "ingredients_with_specified_percent_sum":
			out.IngredientsWithSpecifiedPercentSum = int(in.Int())
		case "ingredients_with_unspecified_percent_n":
			out.IngredientsWithUnspecifiedPercentN = int(in.Int())
		case "ingredients_with_unspecified_percent_sum":
			out.IngredientsWithUnspecifiedPercentSum = int(in.Int())
		case "interface_version_created":
			out.InterfaceVersionCreated = string(in.String())
		case "interface_version_modified":
			out.InterfaceVersionModified = string(in.String())
		case "known_ingredients_n":
			out.KnownIngredientsN = int(in.Int())
		case "labels":
			out.Labels = string(in.String())
		case "labels_hierarchy":
			if in.IsNull() {
				in.Skip()
				out.LabelsHierarchy = nil
			} else {
				in.Delim('[')
				if out.LabelsHierarchy == nil {
					if !in.IsDelim(']') {
						out.LabelsHierarchy = make([]string, 0, 4)
					} else {
						out.LabelsHierarchy = []string{}
					}
				} else {
					out.LabelsHierarchy = (out.LabelsHierarchy)[:0]
				}
				for !in.IsDelim(']') {
					var v50 string
					v50 = string(in.String())
					out.LabelsHierarchy = append(out.LabelsHierarchy, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "labels_lc":
			out.LabelsLc = string(in.String())
		case "labels_old":
			out.LabelsOld = string(in.String())
		case "labels_tags":
			if in.IsNull() {
				in.Skip()
				out.LabelsTags = nil
			} else {
				in.Delim('[')
				if out.LabelsTags == nil {
					if !in.IsDelim(']') {
						out.LabelsTags = make([]string, 0, 4)
					} else {
						out.LabelsTags = []string{}
					}
				} else {
					out.LabelsTags = (out.LabelsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v51 string
					v51 = string(in.String())
					out.LabelsTags = append(out.LabelsTags, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lang":
			out.Lang = string(in.String())
		case "languages":
			easyjsonC4ff3609Decode8(in, &out.Languages)
		case "languages_codes":
			easyjsonC4ff3609Decode9(in, &out.LanguagesCodes)
		case "languages_hierarchy":
			if in.IsNull() {
				in.Skip()
				out.LanguagesHierarchy = nil
			} else {
				in.Delim('[')
				if out.LanguagesHierarchy == nil {
					if !in.IsDelim(']') {
						out.LanguagesHierarchy = make([]string, 0, 4)
					} else {
						out.LanguagesHierarchy = []string{}
					}
				} else {
					out.LanguagesHierarchy = (out.LanguagesHierarchy)[:0]
				}
				for !in.IsDelim(']') {
					var v52 string
					v52 = string(in.String())
					out.LanguagesHierarchy = append(out.LanguagesHierarchy, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "languages_tags":
			if in.IsNull() {
				in.Skip()
				out.LanguagesTags = nil
			} else {
				in.Delim('[')
				if out.LanguagesTags == nil {
					if !in.IsDelim(']') {
						out.LanguagesTags = make([]string, 0, 4)
					} else {
						out.LanguagesTags = []string{}
					}
				} else {
					out.LanguagesTags = (out.LanguagesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v53 string
					v53 = string(in.String())
					out.LanguagesTags = append(out.LanguagesTags, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_edit_dates_tags":
			if in.IsNull() {
				in.Skip()
				out.LastEditDatesTags = nil
			} else {
				in.Delim('[')
				if out.LastEditDatesTags == nil {
					if !in.IsDelim(']') {
						out.LastEditDatesTags = make([]string, 0, 4)
					} else {
						out.LastEditDatesTags = []string{}
					}
				} else {
					out.LastEditDatesTags = (out.LastEditDatesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v54 string
					v54 = string(in.String())
					out.LastEditDatesTags = append(out.LastEditDatesTags, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_editor":
			out.LastEditor = string(in.String())
		case "last_image_dates_tags":
			if in.IsNull() {
				in.Skip()
				out.LastImageDatesTags = nil
			} else {
				in.Delim('[')
				if out.LastImageDatesTags == nil {
					if !in.IsDelim(']') {
						out.LastImageDatesTags = make([]string, 0, 4)
					} else {
						out.LastImageDatesTags = []string{}
					}
				} else {
					out.LastImageDatesTags = (out.LastImageDatesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v55 string
					v55 = string(in.String())
					out.LastImageDatesTags = append(out.LastImageDatesTags, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "last_image_t":
			out.LastImageT = int(in.Int())
		case "last_modified_by":
			out.LastModifiedBy = string(in.String())
		case "last_modified_t":
			out.LastModifiedT = int(in.Int())
		case "lc":
			out.Lc = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "main_countries_tags":
			if in.IsNull() {
				in.Skip()
				out.MainCountriesTags = nil
			} else {
				in.Delim('[')
				if out.MainCountriesTags == nil {
					if !in.IsDelim(']') {
						out.MainCountriesTags = make([]interface{}, 0, 4)
					} else {
						out.MainCountriesTags = []interface{}{}
					}
				} else {
					out.MainCountriesTags = (out.MainCountriesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v56 interface{}
					if m, ok := v56.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v56.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v56 = in.Interface()
					}
					out.MainCountriesTags = append(out.MainCountriesTags, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "manufacturing_places":
			out.ManufacturingPlaces = string(in.String())
		case "manufacturing_places_tags":
			if in.IsNull() {
				in.Skip()
				out.ManufacturingPlacesTags = nil
			} else {
				in.Delim('[')
				if out.ManufacturingPlacesTags == nil {
					if !in.IsDelim(']') {
						out.ManufacturingPlacesTags = make([]string, 0, 4)
					} else {
						out.ManufacturingPlacesTags = []string{}
					}
				} else {
					out.ManufacturingPlacesTags = (out.ManufacturingPlacesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v57 string
					v57 = string(in.String())
					out.ManufacturingPlacesTags = append(out.ManufacturingPlacesTags, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "max_imgid":
			out.MaxImgid = string(in.String())
		case "minerals_prev_tags":
			if in.IsNull() {
				in.Skip()
				out.MineralsPrevTags = nil
			} else {
				in.Delim('[')
				if out.MineralsPrevTags == nil {
					if !in.IsDelim(']') {
						out.MineralsPrevTags = make([]interface{}, 0, 4)
					} else {
						out.MineralsPrevTags = []interface{}{}
					}
				} else {
					out.MineralsPrevTags = (out.MineralsPrevTags)[:0]
				}
				for !in.IsDelim(']') {
					var v58 interface{}
					if m, ok := v58.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v58.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v58 = in.Interface()
					}
					out.MineralsPrevTags = append(out.MineralsPrevTags, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "minerals_tags":
			if in.IsNull() {
				in.Skip()
				out.MineralsTags = nil
			} else {
				in.Delim('[')
				if out.MineralsTags == nil {
					if !in.IsDelim(']') {
						out.MineralsTags = make([]interface{}, 0, 4)
					} else {
						out.MineralsTags = []interface{}{}
					}
				} else {
					out.MineralsTags = (out.MineralsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v59 interface{}
					if m, ok := v59.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v59.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v59 = in.Interface()
					}
					out.MineralsTags = append(out.MineralsTags, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "misc_tags":
			if in.IsNull() {
				in.Skip()
				out.MiscTags = nil
			} else {
				in.Delim('[')
				if out.MiscTags == nil {
					if !in.IsDelim(']') {
						out.MiscTags = make([]string, 0, 4)
					} else {
						out.MiscTags = []string{}
					}
				} else {
					out.MiscTags = (out.MiscTags)[:0]
				}
				for !in.IsDelim(']') {
					var v60 string
					v60 = string(in.String())
					out.MiscTags = append(out.MiscTags, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "no_nutrition_data":
			out.NoNutritionData = string(in.String())
		case "nova_group":
			out.NovaGroup = int(in.Int())
		case "nova_group_debug":
			out.NovaGroupDebug = string(in.String())
		case "nova_groups":
			out.NovaGroups = string(in.String())
		case "nova_groups_markers":
			easyjsonC4ff3609Decode10(in, &out.NovaGroupsMarkers)
		case "nova_groups_tags":
			if in.IsNull() {
				in.Skip()
				out.NovaGroupsTags = nil
			} else {
				in.Delim('[')
				if out.NovaGroupsTags == nil {
					if !in.IsDelim(']') {
						out.NovaGroupsTags = make([]string, 0, 4)
					} else {
						out.NovaGroupsTags = []string{}
					}
				} else {
					out.NovaGroupsTags = (out.NovaGroupsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v61 string
					v61 = string(in.String())
					out.NovaGroupsTags = append(out.NovaGroupsTags, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nucleotides_prev_tags":
			if in.IsNull() {
				in.Skip()
				out.NucleotidesPrevTags = nil
			} else {
				in.Delim('[')
				if out.NucleotidesPrevTags == nil {
					if !in.IsDelim(']') {
						out.NucleotidesPrevTags = make([]interface{}, 0, 4)
					} else {
						out.NucleotidesPrevTags = []interface{}{}
					}
				} else {
					out.NucleotidesPrevTags = (out.NucleotidesPrevTags)[:0]
				}
				for !in.IsDelim(']') {
					var v62 interface{}
					if m, ok := v62.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v62.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v62 = in.Interface()
					}
					out.NucleotidesPrevTags = append(out.NucleotidesPrevTags, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nucleotides_tags":
			if in.IsNull() {
				in.Skip()
				out.NucleotidesTags = nil
			} else {
				in.Delim('[')
				if out.NucleotidesTags == nil {
					if !in.IsDelim(']') {
						out.NucleotidesTags = make([]interface{}, 0, 4)
					} else {
						out.NucleotidesTags = []interface{}{}
					}
				} else {
					out.NucleotidesTags = (out.NucleotidesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v63 interface{}
					if m, ok := v63.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v63.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v63 = in.Interface()
					}
					out.NucleotidesTags = append(out.NucleotidesTags, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nutrient_levels":
			easyjsonC4ff3609Decode11(in, &out.NutrientLevels)
		case "nutrient_levels_tags":
			if in.IsNull() {
				in.Skip()
				out.NutrientLevelsTags = nil
			} else {
				in.Delim('[')
				if out.NutrientLevelsTags == nil {
					if !in.IsDelim(']') {
						out.NutrientLevelsTags = make([]string, 0, 4)
					} else {
						out.NutrientLevelsTags = []string{}
					}
				} else {
					out.NutrientLevelsTags = (out.NutrientLevelsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v64 string
					v64 = string(in.String())
					out.NutrientLevelsTags = append(out.NutrientLevelsTags, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nutriments":
			easyjsonC4ff3609Decode12(in, &out.Nutriments)
		case "nutriscore_data":
			easyjsonC4ff3609Decode13(in, &out.NutriscoreData)
		case "nutriscore_grade":
			out.NutriscoreGrade = string(in.String())
		case "nutriscore_score":
			out.NutriscoreScore = int(in.Int())
		case "nutriscore_score_opposite":
			out.NutriscoreScoreOpposite = int(in.Int())
		case "nutrition_data":
			out.NutritionData = string(in.String())
		case "nutrition_data_per":
			out.NutritionDataPer = string(in.String())
		case "nutrition_data_prepared":
			out.NutritionDataPrepared = string(in.String())
		case "nutrition_data_prepared_per":
			out.NutritionDataPreparedPer = string(in.String())
		case "nutrition_grade_fr":
			out.NutritionGradeFr = string(in.String())
		case "nutrition_grades":
			out.NutritionGrades = string(in.String())
		case "nutrition_grades_tags":
			if in.IsNull() {
				in.Skip()
				out.NutritionGradesTags = nil
			} else {
				in.Delim('[')
				if out.NutritionGradesTags == nil {
					if !in.IsDelim(']') {
						out.NutritionGradesTags = make([]string, 0, 4)
					} else {
						out.NutritionGradesTags = []string{}
					}
				} else {
					out.NutritionGradesTags = (out.NutritionGradesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v65 string
					v65 = string(in.String())
					out.NutritionGradesTags = append(out.NutritionGradesTags, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nutrition_score_beverage":
			out.NutritionScoreBeverage = int(in.Int())
		case "nutrition_score_debug":
			out.NutritionScoreDebug = string(in.String())
		case "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients":
			out.NutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients = int(in.Int())
		case "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value":
			out.NutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue = int(in.Int())
		case "obsolete":
			out.Obsolete = string(in.String())
		case "obsolete_since_date":
			out.ObsoleteSinceDate = string(in.String())
		case "origin_en":
			out.OriginEn = string(in.String())
		case "origins":
			out.Origins = string(in.String())
		case "origins_hierarchy":
			if in.IsNull() {
				in.Skip()
				out.OriginsHierarchy = nil
			} else {
				in.Delim('[')
				if out.OriginsHierarchy == nil {
					if !in.IsDelim(']') {
						out.OriginsHierarchy = make([]interface{}, 0, 4)
					} else {
						out.OriginsHierarchy = []interface{}{}
					}
				} else {
					out.OriginsHierarchy = (out.OriginsHierarchy)[:0]
				}
				for !in.IsDelim(']') {
					var v66 interface{}
					if m, ok := v66.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v66.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v66 = in.Interface()
					}
					out.OriginsHierarchy = append(out.OriginsHierarchy, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "origins_lc":
			out.OriginsLc = string(in.String())
		case "origins_old":
			out.OriginsOld = string(in.String())
		case "origins_tags":
			if in.IsNull() {
				in.Skip()
				out.OriginsTags = nil
			} else {
				in.Delim('[')
				if out.OriginsTags == nil {
					if !in.IsDelim(']') {
						out.OriginsTags = make([]interface{}, 0, 4)
					} else {
						out.OriginsTags = []interface{}{}
					}
				} else {
					out.OriginsTags = (out.OriginsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v67 interface{}
					if m, ok := v67.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v67.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v67 = in.Interface()
					}
					out.OriginsTags = append(out.OriginsTags, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "other_nutritional_substances_tags":
			if in.IsNull() {
				in.Skip()
				out.OtherNutritionalSubstancesTags = nil
			} else {
				in.Delim('[')
				if out.OtherNutritionalSubstancesTags == nil {
					if !in.IsDelim(']') {
						out.OtherNutritionalSubstancesTags = make([]interface{}, 0, 4)
					} else {
						out.OtherNutritionalSubstancesTags = []interface{}{}
					}
				} else {
					out.OtherNutritionalSubstancesTags = (out.OtherNutritionalSubstancesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v68 interface{}
					if m, ok := v68.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v68.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v68 = in.Interface()
					}
					out.OtherNutritionalSubstancesTags = append(out.OtherNutritionalSubstancesTags, v68)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "packaging":
			out.Packaging = string(in.String())
		case "packaging_hierarchy":
			if in.IsNull() {
				in.Skip()
				out.PackagingHierarchy = nil
			} else {
				in.Delim('[')
				if out.PackagingHierarchy == nil {
					if !in.IsDelim(']') {
						out.PackagingHierarchy = make([]string, 0, 4)
					} else {
						out.PackagingHierarchy = []string{}
					}
				} else {
					out.PackagingHierarchy = (out.PackagingHierarchy)[:0]
				}
				for !in.IsDelim(']') {
					var v69 string
					v69 = string(in.String())
					out.PackagingHierarchy = append(out.PackagingHierarchy, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "packaging_lc":
			out.PackagingLc = string(in.String())
		case "packaging_old":
			out.PackagingOld = string(in.String())
		case "packaging_old_before_taxonomization":
			out.PackagingOldBeforeTaxonomization = string(in.String())
		case "packaging_tags":
			if in.IsNull() {
				in.Skip()
				out.PackagingTags = nil
			} else {
				in.Delim('[')
				if out.PackagingTags == nil {
					if !in.IsDelim(']') {
						out.PackagingTags = make([]string, 0, 4)
					} else {
						out.PackagingTags = []string{}
					}
				} else {
					out.PackagingTags = (out.PackagingTags)[:0]
				}
				for !in.IsDelim(']') {
					var v70 string
					v70 = string(in.String())
					out.PackagingTags = append(out.PackagingTags, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "packaging_text_en":
			out.PackagingTextEn = string(in.String())
		case "packagings":
			if in.IsNull() {
				in.Skip()
				out.Packagings = nil
			} else {
				in.Delim('[')
				if out.Packagings == nil {
					if !in.IsDelim(']') {
						out.Packagings = make([]struct {
							Material string `json:"material"`
							Shape    string `json:"shape"`
						}, 0, 2)
					} else {
						out.Packagings = []struct {
							Material string `json:"material"`
							Shape    string `json:"shape"`
						}{}
					}
				} else {
					out.Packagings = (out.Packagings)[:0]
				}
				for !in.IsDelim(']') {
					var v71 struct {
						Material string `json:"material"`
						Shape    string `json:"shape"`
					}
					easyjsonC4ff3609Decode14(in, &v71)
					out.Packagings = append(out.Packagings, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "packagings_complete":
			out.PackagingsComplete = int(in.Int())
		case "photographers_tags":
			if in.IsNull() {
				in.Skip()
				out.PhotographersTags = nil
			} else {
				in.Delim('[')
				if out.PhotographersTags == nil {
					if !in.IsDelim(']') {
						out.PhotographersTags = make([]string, 0, 4)
					} else {
						out.PhotographersTags = []string{}
					}
				} else {
					out.PhotographersTags = (out.PhotographersTags)[:0]
				}
				for !in.IsDelim(']') {
					var v72 string
					v72 = string(in.String())
					out.PhotographersTags = append(out.PhotographersTags, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pnns_groups_1":
			out.PnnsGroups1 = string(in.String())
		case "pnns_groups_1_tags":
			if in.IsNull() {
				in.Skip()
				out.PnnsGroups1Tags = nil
			} else {
				in.Delim('[')
				if out.PnnsGroups1Tags == nil {
					if !in.IsDelim(']') {
						out.PnnsGroups1Tags = make([]string, 0, 4)
					} else {
						out.PnnsGroups1Tags = []string{}
					}
				} else {
					out.PnnsGroups1Tags = (out.PnnsGroups1Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v73 string
					v73 = string(in.String())
					out.PnnsGroups1Tags = append(out.PnnsGroups1Tags, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pnns_groups_2":
			out.PnnsGroups2 = string(in.String())
		case "pnns_groups_2_tags":
			if in.IsNull() {
				in.Skip()
				out.PnnsGroups2Tags = nil
			} else {
				in.Delim('[')
				if out.PnnsGroups2Tags == nil {
					if !in.IsDelim(']') {
						out.PnnsGroups2Tags = make([]string, 0, 4)
					} else {
						out.PnnsGroups2Tags = []string{}
					}
				} else {
					out.PnnsGroups2Tags = (out.PnnsGroups2Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v74 string
					v74 = string(in.String())
					out.PnnsGroups2Tags = append(out.PnnsGroups2Tags, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "popularity_key":
			out.PopularityKey = int64(in.Int64())
		case "popularity_tags":
			if in.IsNull() {
				in.Skip()
				out.PopularityTags = nil
			} else {
				in.Delim('[')
				if out.PopularityTags == nil {
					if !in.IsDelim(']') {
						out.PopularityTags = make([]string, 0, 4)
					} else {
						out.PopularityTags = []string{}
					}
				} else {
					out.PopularityTags = (out.PopularityTags)[:0]
				}
				for !in.IsDelim(']') {
					var v75 string
					v75 = string(in.String())
					out.PopularityTags = append(out.PopularityTags, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "product_name":
			out.ProductName = string(in.String())
		case "product_name_en":
			out.ProductNameEn = string(in.String())
		case "product_name_fr":
			out.ProductNameFr = string(in.String())
		case "product_name_fr_debug_tags":
			if in.IsNull() {
				in.Skip()
				out.ProductNameFrDebugTags = nil
			} else {
				in.Delim('[')
				if out.ProductNameFrDebugTags == nil {
					if !in.IsDelim(']') {
						out.ProductNameFrDebugTags = make([]interface{}, 0, 4)
					} else {
						out.ProductNameFrDebugTags = []interface{}{}
					}
				} else {
					out.ProductNameFrDebugTags = (out.ProductNameFrDebugTags)[:0]
				}
				for !in.IsDelim(']') {
					var v76 interface{}
					if m, ok := v76.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v76.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v76 = in.Interface()
					}
					out.ProductNameFrDebugTags = append(out.ProductNameFrDebugTags, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "product_quantity":
			out.ProductQuantity = string(in.String())
		case "purchase_places":
			out.PurchasePlaces = string(in.String())
		case "purchase_places_tags":
			if in.IsNull() {
				in.Skip()
				out.PurchasePlacesTags = nil
			} else {
				in.Delim('[')
				if out.PurchasePlacesTags == nil {
					if !in.IsDelim(']') {
						out.PurchasePlacesTags = make([]interface{}, 0, 4)
					} else {
						out.PurchasePlacesTags = []interface{}{}
					}
				} else {
					out.PurchasePlacesTags = (out.PurchasePlacesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v77 interface{}
					if m, ok := v77.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v77.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v77 = in.Interface()
					}
					out.PurchasePlacesTags = append(out.PurchasePlacesTags, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "quantity":
			out.Quantity = string(in.String())
		case "removed_countries_tags":
			if in.IsNull() {
				in.Skip()
				out.RemovedCountriesTags = nil
			} else {
				in.Delim('[')
				if out.RemovedCountriesTags == nil {
					if !in.IsDelim(']') {
						out.RemovedCountriesTags = make([]interface{}, 0, 4)
					} else {
						out.RemovedCountriesTags = []interface{}{}
					}
				} else {
					out.RemovedCountriesTags = (out.RemovedCountriesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v78 interface{}
					if m, ok := v78.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v78.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v78 = in.Interface()
					}
					out.RemovedCountriesTags = append(out.RemovedCountriesTags, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "rev":
			out.Rev = int(in.Int())
		case "scans_n":
			out.ScansN = int(in.Int())
		case "selected_images":
			easyjsonC4ff3609Decode15(in, &out.SelectedImages)
		case "serving_quantity":
			out.ServingQuantity = string(in.String())
		case "serving_size":
			out.ServingSize = string(in.String())
		case "sortkey":
			out.Sortkey = int(in.Int())
		case "states":
			out.States = string(in.String())
		case "states_hierarchy":
			if in.IsNull() {
				in.Skip()
				out.StatesHierarchy = nil
			} else {
				in.Delim('[')
				if out.StatesHierarchy == nil {
					if !in.IsDelim(']') {
						out.StatesHierarchy = make([]string, 0, 4)
					} else {
						out.StatesHierarchy = []string{}
					}
				} else {
					out.StatesHierarchy = (out.StatesHierarchy)[:0]
				}
				for !in.IsDelim(']') {
					var v79 string
					v79 = string(in.String())
					out.StatesHierarchy = append(out.StatesHierarchy, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "states_tags":
			if in.IsNull() {
				in.Skip()
				out.StatesTags = nil
			} else {
				in.Delim('[')
				if out.StatesTags == nil {
					if !in.IsDelim(']') {
						out.StatesTags = make([]string, 0, 4)
					} else {
						out.StatesTags = []string{}
					}
				} else {
					out.StatesTags = (out.StatesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v80 string
					v80 = string(in.String())
					out.StatesTags = append(out.StatesTags, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "stores":
			out.Stores = string(in.String())
		case "stores_tags":
			if in.IsNull() {
				in.Skip()
				out.StoresTags = nil
			} else {
				in.Delim('[')
				if out.StoresTags == nil {
					if !in.IsDelim(']') {
						out.StoresTags = make([]interface{}, 0, 4)
					} else {
						out.StoresTags = []interface{}{}
					}
				} else {
					out.StoresTags = (out.StoresTags)[:0]
				}
				for !in.IsDelim(']') {
					var v81 interface{}
					if m, ok := v81.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v81.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v81 = in.Interface()
					}
					out.StoresTags = append(out.StoresTags, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "teams":
			out.Teams = string(in.String())
		case "teams_tags":
			if in.IsNull() {
				in.Skip()
				out.TeamsTags = nil
			} else {
				in.Delim('[')
				if out.TeamsTags == nil {
					if !in.IsDelim(']') {
						out.TeamsTags = make([]string, 0, 4)
					} else {
						out.TeamsTags = []string{}
					}
				} else {
					out.TeamsTags = (out.TeamsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v82 string
					v82 = string(in.String())
					out.TeamsTags = append(out.TeamsTags, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "traces":
			out.Traces = string(in.String())
		case "traces_from_ingredients":
			out.TracesFromIngredients = string(in.String())
		case "traces_from_user":
			out.TracesFromUser = string(in.String())
		case "traces_hierarchy":
			if in.IsNull() {
				in.Skip()
				out.TracesHierarchy = nil
			} else {
				in.Delim('[')
				if out.TracesHierarchy == nil {
					if !in.IsDelim(']') {
						out.TracesHierarchy = make([]interface{}, 0, 4)
					} else {
						out.TracesHierarchy = []interface{}{}
					}
				} else {
					out.TracesHierarchy = (out.TracesHierarchy)[:0]
				}
				for !in.IsDelim(']') {
					var v83 interface{}
					if m, ok := v83.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v83.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v83 = in.Interface()
					}
					out.TracesHierarchy = append(out.TracesHierarchy, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "traces_lc":
			out.TracesLc = string(in.String())
		case "traces_tags":
			if in.IsNull() {
				in.Skip()
				out.TracesTags = nil
			} else {
				in.Delim('[')
				if out.TracesTags == nil {
					if !in.IsDelim(']') {
						out.TracesTags = make([]interface{}, 0, 4)
					} else {
						out.TracesTags = []interface{}{}
					}
				} else {
					out.TracesTags = (out.TracesTags)[:0]
				}
				for !in.IsDelim(']') {
					var v84 interface{}
					if m, ok := v84.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v84.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v84 = in.Interface()
					}
					out.TracesTags = append(out.TracesTags, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "unique_scans_n":
			out.UniqueScansN = int(in.Int())
		case "unknown_ingredients_n":
			out.UnknownIngredientsN = int(in.Int())
		case "unknown_nutrients_tags":
			if in.IsNull() {
				in.Skip()
				out.UnknownNutrientsTags = nil
			} else {
				in.Delim('[')
				if out.UnknownNutrientsTags == nil {
					if !in.IsDelim(']') {
						out.UnknownNutrientsTags = make([]interface{}, 0, 4)
					} else {
						out.UnknownNutrientsTags = []interface{}{}
					}
				} else {
					out.UnknownNutrientsTags = (out.UnknownNutrientsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v85 interface{}
					if m, ok := v85.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v85.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v85 = in.Interface()
					}
					out.UnknownNutrientsTags = append(out.UnknownNutrientsTags, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "update_key":
			out.UpdateKey = string(in.String())
		case "vitamins_prev_tags":
			if in.IsNull() {
				in.Skip()
				out.VitaminsPrevTags = nil
			} else {
				in.Delim('[')
				if out.VitaminsPrevTags == nil {
					if !in.IsDelim(']') {
						out.VitaminsPrevTags = make([]interface{}, 0, 4)
					} else {
						out.VitaminsPrevTags = []interface{}{}
					}
				} else {
					out.VitaminsPrevTags = (out.VitaminsPrevTags)[:0]
				}
				for !in.IsDelim(']') {
					var v86 interface{}
					if m, ok := v86.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v86.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v86 = in.Interface()
					}
					out.VitaminsPrevTags = append(out.VitaminsPrevTags, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vitamins_tags":
			if in.IsNull() {
				in.Skip()
				out.VitaminsTags = nil
			} else {
				in.Delim('[')
				if out.VitaminsTags == nil {
					if !in.IsDelim(']') {
						out.VitaminsTags = make([]interface{}, 0, 4)
					} else {
						out.VitaminsTags = []interface{}{}
					}
				} else {
					out.VitaminsTags = (out.VitaminsTags)[:0]
				}
				for !in.IsDelim(']') {
					var v87 interface{}
					if m, ok := v87.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v87.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v87 = in.Interface()
					}
					out.VitaminsTags = append(out.VitaminsTags, v87)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "weighers_tags":
			if in.IsNull() {
				in.Skip()
				out.WeighersTags = nil
			} else {
				in.Delim('[')
				if out.WeighersTags == nil {
					if !in.IsDelim(']') {
						out.WeighersTags = make([]interface{}, 0, 4)
					} else {
						out.WeighersTags = []interface{}{}
					}
				} else {
					out.WeighersTags = (out.WeighersTags)[:0]
				}
				for !in.IsDelim(']') {
					var v88 interface{}
					if m, ok := v88.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v88.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v88 = in.Interface()
					}
					out.WeighersTags = append(out.WeighersTags, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode(out *jwriter.Writer, in struct {
	ID                                       string        `json:"_id"`
	Keywords                                 []string      `json:"_keywords"`
	AddedCountriesTags                       []interface{} `json:"added_countries_tags"`
	AdditivesDebugTags                       []interface{} `json:"additives_debug_tags"`
	AdditivesN                               int           `json:"additives_n"`
	AdditivesOldN                            int           `json:"additives_old_n"`
	AdditivesOldTags                         []string      `json:"additives_old_tags"`
	AdditivesOriginalTags                    []string      `json:"additives_original_tags"`
	AdditivesPrevOriginalTags                []string      `json:"additives_prev_original_tags"`
	AdditivesTags                            []string      `json:"additives_tags"`
	Allergens                                string        `json:"allergens"`
	AllergensFromIngredients                 string        `json:"allergens_from_ingredients"`
	AllergensFromUser                        string        `json:"allergens_from_user"`
	AllergensHierarchy                       []string      `json:"allergens_hierarchy"`
	AllergensLc                              string        `json:"allergens_lc"`
	AllergensTags                            []string      `json:"allergens_tags"`
	AminoAcidsPrevTags                       []interface{} `json:"amino_acids_prev_tags"`
	AminoAcidsTags                           []interface{} `json:"amino_acids_tags"`
	Brands                                   string        `json:"brands"`
	BrandsTags                               []string      `json:"brands_tags"`
	CarbonFootprintFromKnownIngredientsDebug string        `json:"carbon_footprint_from_known_ingredients_debug"`
	CarbonFootprintPercentOfKnownIngredients int           `json:"carbon_footprint_percent_of_known_ingredients"`
	Categories                               string        `json:"categories"`
	CategoriesHierarchy                      []string      `json:"categories_hierarchy"`
	CategoriesLc                             string        `json:"categories_lc"`
	CategoriesOld                            string        `json:"categories_old"`
	CategoriesProperties                     struct {
		AgribalyseFoodCodeEn string `json:"agribalyse_food_code:en"`
		CiqualFoodCodeEn     string `json:"ciqual_food_code:en"`
	} `json:"categories_properties"`
	CategoriesPropertiesTags []string `json:"categories_properties_tags"`
	CategoriesTags           []string `json:"categories_tags"`
	CategoryProperties       struct {
		CiqualFoodNameEn string `json:"ciqual_food_name:en"`
		CiqualFoodNameFr string `json:"ciqual_food_name:fr"`
	} `json:"category_properties"`
	CheckersTags            []interface{} `json:"checkers_tags"`
	CiqualFoodNameTags      []string      `json:"ciqual_food_name_tags"`
	CitiesTags              []interface{} `json:"cities_tags"`
	Code                    string        `json:"code"`
	CodesTags               []string      `json:"codes_tags"`
	ComparedToCategory      string        `json:"compared_to_category"`
	Complete                int           `json:"complete"`
	Completeness            float64       `json:"completeness"`
	CorrectorsTags          []string      `json:"correctors_tags"`
	Countries               string        `json:"countries"`
	CountriesHierarchy      []string      `json:"countries_hierarchy"`
	CountriesLc             string        `json:"countries_lc"`
	CountriesTags           []string      `json:"countries_tags"`
	CreatedT                int           `json:"created_t"`
	Creator                 string        `json:"creator"`
	DataQualityBugsTags     []interface{} `json:"data_quality_bugs_tags"`
	DataQualityErrorsTags   []interface{} `json:"data_quality_errors_tags"`
	DataQualityInfoTags     []string      `json:"data_quality_info_tags"`
	DataQualityTags         []string      `json:"data_quality_tags"`
	DataQualityWarningsTags []string      `json:"data_quality_warnings_tags"`
	DataSources             string        `json:"data_sources"`
	DataSourcesTags         []string      `json:"data_sources_tags"`
	DebugParamSortedLangs   []string      `json:"debug_param_sorted_langs"`
	EcoscoreData            struct {
		Adjustments struct {
			OriginsOfIngredients struct {
				AggregatedOrigins []struct {
					EpiScore            string      `json:"epi_score"`
					Origin              string      `json:"origin"`
					Percent             int         `json:"percent"`
					TransportationScore interface{} `json:"transportation_score"`
				} `json:"aggregated_origins"`
				EpiScore                int      `json:"epi_score"`
				EpiValue                int      `json:"epi_value"`
				OriginsFromOriginsField []string `json:"origins_from_origins_field"`
				TransportationScore     int      `json:"transportation_score"`
				TransportationScores    struct {
					Ad    int `json:"ad"`
					Al    int `json:"al"`
					At    int `json:"at"`
					Ax    int `json:"ax"`
					Ba    int `json:"ba"`
					Be    int `json:"be"`
					Bg    int `json:"bg"`
					Ch    int `json:"ch"`
					Cy    int `json:"cy"`
					Cz    int `json:"cz"`
					De    int `json:"de"`
					Dk    int `json:"dk"`
					Dz    int `json:"dz"`
					Ee    int `json:"ee"`
					Eg    int `json:"eg"`
					Es    int `json:"es"`
					Fi    int `json:"fi"`
					Fo    int `json:"fo"`
					Fr    int `json:"fr"`
					Gg    int `json:"gg"`
					Gi    int `json:"gi"`
					Gr    int `json:"gr"`
					Hr    int `json:"hr"`
					Hu    int `json:"hu"`
					Ie    int `json:"ie"`
					Il    int `json:"il"`
					Im    int `json:"im"`
					Is    int `json:"is"`
					It    int `json:"it"`
					Je    int `json:"je"`
					Lb    int `json:"lb"`
					Li    int `json:"li"`
					Lt    int `json:"lt"`
					Lu    int `json:"lu"`
					Lv    int `json:"lv"`
					Ly    int `json:"ly"`
					Ma    int `json:"ma"`
					Mc    int `json:"mc"`
					Md    int `json:"md"`
					Me    int `json:"me"`
					Mk    int `json:"mk"`
					Mt    int `json:"mt"`
					Nl    int `json:"nl"`
					No    int `json:"no"`
					Pl    int `json:"pl"`
					Ps    int `json:"ps"`
					Pt    int `json:"pt"`
					Ro    int `json:"ro"`
					Rs    int `json:"rs"`
					Se    int `json:"se"`
					Si    int `json:"si"`
					Sj    int `json:"sj"`
					Sk    int `json:"sk"`
					Sm    int `json:"sm"`
					Sy    int `json:"sy"`
					Tn    int `json:"tn"`
					Tr    int `json:"tr"`
					Ua    int `json:"ua"`
					Uk    int `json:"uk"`
					Us    int `json:"us"`
					Va    int `json:"va"`
					World int `json:"world"`
					Xk    int `json:"xk"`
				} `json:"transportation_scores"`
				TransportationValue  int `json:"transportation_value"`
				TransportationValues struct {
					Ad    int `json:"ad"`
					Al    int `json:"al"`
					At    int `json:"at"`
					Ax    int `json:"ax"`
					Ba    int `json:"ba"`
					Be    int `json:"be"`
					Bg    int `json:"bg"`
					Ch    int `json:"ch"`
					Cy    int `json:"cy"`
					Cz    int `json:"cz"`
					De    int `json:"de"`
					Dk    int `json:"dk"`
					Dz    int `json:"dz"`
					Ee    int `json:"ee"`
					Eg    int `json:"eg"`
					Es    int `json:"es"`
					Fi    int `json:"fi"`
					Fo    int `json:"fo"`
					Fr    int `json:"fr"`
					Gg    int `json:"gg"`
					Gi    int `json:"gi"`
					Gr    int `json:"gr"`
					Hr    int `json:"hr"`
					Hu    int `json:"hu"`
					Ie    int `json:"ie"`
					Il    int `json:"il"`
					Im    int `json:"im"`
					Is    int `json:"is"`
					It    int `json:"it"`
					Je    int `json:"je"`
					Lb    int `json:"lb"`
					Li    int `json:"li"`
					Lt    int `json:"lt"`
					Lu    int `json:"lu"`
					Lv    int `json:"lv"`
					Ly    int `json:"ly"`
					Ma    int `json:"ma"`
					Mc    int `json:"mc"`
					Md    int `json:"md"`
					Me    int `json:"me"`
					Mk    int `json:"mk"`
					Mt    int `json:"mt"`
					Nl    int `json:"nl"`
					No    int `json:"no"`
					Pl    int `json:"pl"`
					Ps    int `json:"ps"`
					Pt    int `json:"pt"`
					Ro    int `json:"ro"`
					Rs    int `json:"rs"`
					Se    int `json:"se"`
					Si    int `json:"si"`
					Sj    int `json:"sj"`
					Sk    int `json:"sk"`
					Sm    int `json:"sm"`
					Sy    int `json:"sy"`
					Tn    int `json:"tn"`
					Tr    int `json:"tr"`
					Ua    int `json:"ua"`
					Uk    int `json:"uk"`
					Us    int `json:"us"`
					Va    int `json:"va"`
					World int `json:"world"`
					Xk    int `json:"xk"`
				} `json:"transportation_values"`
				Value  int `json:"value"`
				Values struct {
					Ad    int `json:"ad"`
					Al    int `json:"al"`
					At    int `json:"at"`
					Ax    int `json:"ax"`
					Ba    int `json:"ba"`
					Be    int `json:"be"`
					Bg    int `json:"bg"`
					Ch    int `json:"ch"`
					Cy    int `json:"cy"`
					Cz    int `json:"cz"`
					De    int `json:"de"`
					Dk    int `json:"dk"`
					Dz    int `json:"dz"`
					Ee    int `json:"ee"`
					Eg    int `json:"eg"`
					Es    int `json:"es"`
					Fi    int `json:"fi"`
					Fo    int `json:"fo"`
					Fr    int `json:"fr"`
					Gg    int `json:"gg"`
					Gi    int `json:"gi"`
					Gr    int `json:"gr"`
					Hr    int `json:"hr"`
					Hu    int `json:"hu"`
					Ie    int `json:"ie"`
					Il    int `json:"il"`
					Im    int `json:"im"`
					Is    int `json:"is"`
					It    int `json:"it"`
					Je    int `json:"je"`
					Lb    int `json:"lb"`
					Li    int `json:"li"`
					Lt    int `json:"lt"`
					Lu    int `json:"lu"`
					Lv    int `json:"lv"`
					Ly    int `json:"ly"`
					Ma    int `json:"ma"`
					Mc    int `json:"mc"`
					Md    int `json:"md"`
					Me    int `json:"me"`
					Mk    int `json:"mk"`
					Mt    int `json:"mt"`
					Nl    int `json:"nl"`
					No    int `json:"no"`
					Pl    int `json:"pl"`
					Ps    int `json:"ps"`
					Pt    int `json:"pt"`
					Ro    int `json:"ro"`
					Rs    int `json:"rs"`
					Se    int `json:"se"`
					Si    int `json:"si"`
					Sj    int `json:"sj"`
					Sk    int `json:"sk"`
					Sm    int `json:"sm"`
					Sy    int `json:"sy"`
					Tn    int `json:"tn"`
					Tr    int `json:"tr"`
					Ua    int `json:"ua"`
					Uk    int `json:"uk"`
					Us    int `json:"us"`
					Va    int `json:"va"`
					World int `json:"world"`
					Xk    int `json:"xk"`
				} `json:"values"`
				Warning string `json:"warning"`
			} `json:"origins_of_ingredients"`
			Packaging struct {
				NonRecyclableAndNonBiodegradableMaterials int `json:"non_recyclable_and_non_biodegradable_materials"`
				Packagings                                []struct {
					EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
					EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
					Material                         string `json:"material"`
					NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
					Shape                            string `json:"shape"`
				} `json:"packagings"`
				Score int `json:"score"`
				Value int `json:"value"`
			} `json:"packaging"`
			ProductionSystem struct {
				Labels  []interface{} `json:"labels"`
				Value   int           `json:"value"`
				Warning string        `json:"warning"`
			} `json:"production_system"`
			ThreatenedSpecies struct{} `json:"threatened_species"`
		} `json:"adjustments"`
		Agribalyse struct {
			AgribalyseFoodCode string  `json:"agribalyse_food_code"`
			Co2Agriculture     float64 `json:"co2_agriculture"`
			Co2Consumption     int     `json:"co2_consumption"`
			Co2Distribution    float64 `json:"co2_distribution"`
			Co2Packaging       float64 `json:"co2_packaging"`
			Co2Processing      float64 `json:"co2_processing"`
			Co2Total           float64 `json:"co2_total"`
			Co2Transportation  float64 `json:"co2_transportation"`
			Code               string  `json:"code"`
			Dqr                string  `json:"dqr"`
			EfAgriculture      float64 `json:"ef_agriculture"`
			EfConsumption      int     `json:"ef_consumption"`
			EfDistribution     float64 `json:"ef_distribution"`
			EfPackaging        float64 `json:"ef_packaging"`
			EfProcessing       float64 `json:"ef_processing"`
			EfTotal            float64 `json:"ef_total"`
			EfTransportation   float64 `json:"ef_transportation"`
			IsBeverage         int     `json:"is_beverage"`
			NameEn             string  `json:"name_en"`
			NameFr             string  `json:"name_fr"`
			Score              int     `json:"score"`
			Version            string  `json:"version"`
		} `json:"agribalyse"`
		Grade  string `json:"grade"`
		Grades struct {
			Ad    string `json:"ad"`
			Al    string `json:"al"`
			At    string `json:"at"`
			Ax    string `json:"ax"`
			Ba    string `json:"ba"`
			Be    string `json:"be"`
			Bg    string `json:"bg"`
			Ch    string `json:"ch"`
			Cy    string `json:"cy"`
			Cz    string `json:"cz"`
			De    string `json:"de"`
			Dk    string `json:"dk"`
			Dz    string `json:"dz"`
			Ee    string `json:"ee"`
			Eg    string `json:"eg"`
			Es    string `json:"es"`
			Fi    string `json:"fi"`
			Fo    string `json:"fo"`
			Fr    string `json:"fr"`
			Gg    string `json:"gg"`
			Gi    string `json:"gi"`
			Gr    string `json:"gr"`
			Hr    string `json:"hr"`
			Hu    string `json:"hu"`
			Ie    string `json:"ie"`
			Il    string `json:"il"`
			Im    string `json:"im"`
			Is    string `json:"is"`
			It    string `json:"it"`
			Je    string `json:"je"`
			Lb    string `json:"lb"`
			Li    string `json:"li"`
			Lt    string `json:"lt"`
			Lu    string `json:"lu"`
			Lv    string `json:"lv"`
			Ly    string `json:"ly"`
			Ma    string `json:"ma"`
			Mc    string `json:"mc"`
			Md    string `json:"md"`
			Me    string `json:"me"`
			Mk    string `json:"mk"`
			Mt    string `json:"mt"`
			Nl    string `json:"nl"`
			No    string `json:"no"`
			Pl    string `json:"pl"`
			Ps    string `json:"ps"`
			Pt    string `json:"pt"`
			Ro    string `json:"ro"`
			Rs    string `json:"rs"`
			Se    string `json:"se"`
			Si    string `json:"si"`
			Sj    string `json:"sj"`
			Sk    string `json:"sk"`
			Sm    string `json:"sm"`
			Sy    string `json:"sy"`
			Tn    string `json:"tn"`
			Tr    string `json:"tr"`
			Ua    string `json:"ua"`
			Uk    string `json:"uk"`
			Us    string `json:"us"`
			Va    string `json:"va"`
			World string `json:"world"`
			Xk    string `json:"xk"`
		} `json:"grades"`
		Missing struct {
			Labels  int `json:"labels"`
			Origins int `json:"origins"`
		} `json:"missing"`
		MissingDataWarning int `json:"missing_data_warning"`
		PreviousData       struct {
			Agribalyse struct {
				AgribalyseFoodCode string  `json:"agribalyse_food_code"`
				Co2Agriculture     float64 `json:"co2_agriculture"`
				Co2Consumption     int     `json:"co2_consumption"`
				Co2Distribution    float64 `json:"co2_distribution"`
				Co2Packaging       float64 `json:"co2_packaging"`
				Co2Processing      float64 `json:"co2_processing"`
				Co2Total           float64 `json:"co2_total"`
				Co2Transportation  float64 `json:"co2_transportation"`
				Code               string  `json:"code"`
				Dqr                string  `json:"dqr"`
				EfAgriculture      float64 `json:"ef_agriculture"`
				EfConsumption      int     `json:"ef_consumption"`
				EfDistribution     float64 `json:"ef_distribution"`
				EfPackaging        float64 `json:"ef_packaging"`
				EfProcessing       float64 `json:"ef_processing"`
				EfTotal            float64 `json:"ef_total"`
				EfTransportation   float64 `json:"ef_transportation"`
				IsBeverage         int     `json:"is_beverage"`
				NameEn             string  `json:"name_en"`
				NameFr             string  `json:"name_fr"`
				Score              int     `json:"score"`
			} `json:"agribalyse"`
			Grade string `json:"grade"`
			Score int    `json:"score"`
		} `json:"previous_data"`
		Score  int `json:"score"`
		Scores struct {
			Ad    int `json:"ad"`
			Al    int `json:"al"`
			At    int `json:"at"`
			Ax    int `json:"ax"`
			Ba    int `json:"ba"`
			Be    int `json:"be"`
			Bg    int `json:"bg"`
			Ch    int `json:"ch"`
			Cy    int `json:"cy"`
			Cz    int `json:"cz"`
			De    int `json:"de"`
			Dk    int `json:"dk"`
			Dz    int `json:"dz"`
			Ee    int `json:"ee"`
			Eg    int `json:"eg"`
			Es    int `json:"es"`
			Fi    int `json:"fi"`
			Fo    int `json:"fo"`
			Fr    int `json:"fr"`
			Gg    int `json:"gg"`
			Gi    int `json:"gi"`
			Gr    int `json:"gr"`
			Hr    int `json:"hr"`
			Hu    int `json:"hu"`
			Ie    int `json:"ie"`
			Il    int `json:"il"`
			Im    int `json:"im"`
			Is    int `json:"is"`
			It    int `json:"it"`
			Je    int `json:"je"`
			Lb    int `json:"lb"`
			Li    int `json:"li"`
			Lt    int `json:"lt"`
			Lu    int `json:"lu"`
			Lv    int `json:"lv"`
			Ly    int `json:"ly"`
			Ma    int `json:"ma"`
			Mc    int `json:"mc"`
			Md    int `json:"md"`
			Me    int `json:"me"`
			Mk    int `json:"mk"`
			Mt    int `json:"mt"`
			Nl    int `json:"nl"`
			No    int `json:"no"`
			Pl    int `json:"pl"`
			Ps    int `json:"ps"`
			Pt    int `json:"pt"`
			Ro    int `json:"ro"`
			Rs    int `json:"rs"`
			Se    int `json:"se"`
			Si    int `json:"si"`
			Sj    int `json:"sj"`
			Sk    int `json:"sk"`
			Sm    int `json:"sm"`
			Sy    int `json:"sy"`
			Tn    int `json:"tn"`
			Tr    int `json:"tr"`
			Ua    int `json:"ua"`
			Uk    int `json:"uk"`
			Us    int `json:"us"`
			Va    int `json:"va"`
			World int `json:"world"`
			Xk    int `json:"xk"`
		} `json:"scores"`
		Status string `json:"status"`
	} `json:"ecoscore_data"`
	EcoscoreExtendedData struct {
		Impact struct {
			EfSingleScoreLogStddev float64 `json:"ef_single_score_log_stddev"`
			LikeliestImpacts       struct {
				ClimateChange float64 `json:"Climate_change"`
				EFSingleScore float64 `json:"EF_single_score"`
			} `json:"likeliest_impacts"`
			LikeliestRecipe struct {
				EnOakSmokedSeaSaltiYeastExtract float64 `json:"en:Oak_smoked_sea_salti_yeast_extract"`
				EnE160C                         float64 `json:"en:e160c"`
				EnE330                          float64 `json:"en:e330"`
				EnFlavouring                    float64 `json:"en:flavouring"`
				EnGarlicPowder                  float64 `json:"en:garlic_powder"`
				EnMilk                          float64 `json:"en:milk"`
				EnOnion                         float64 `json:"en:onion"`
				EnPotato                        float64 `json:"en:potato"`
				EnPotatoStarch                  float64 `json:"en:potato_starch"`
				EnRiceFlour                     float64 `json:"en:rice_flour"`
				EnSalt                          float64 `json:"en:salt"`
				EnSpice                         float64 `json:"en:spice"`
				EnSugar                         float64 `json:"en:sugar"`
				EnSunflowerOil                  float64 `json:"en:sunflower_oil"`
				EnTomatoPowder                  float64 `json:"en:tomato_powder"`
				EnWater                         float64 `json:"en:water"`
				EnYeastPowder                   float64 `json:"en:yeast_powder"`
			} `json:"likeliest_recipe"`
			MassRatioUncharacterized   float64 `json:"mass_ratio_uncharacterized"`
			UncharacterizedIngredients struct {
				Impact    []string `json:"impact"`
				Nutrition []string `json:"nutrition"`
			} `json:"uncharacterized_ingredients"`
			UncharacterizedIngredientsMassProportion struct {
				Impact    float64 `json:"impact"`
				Nutrition float64 `json:"nutrition"`
			} `json:"uncharacterized_ingredients_mass_proportion"`
			UncharacterizedIngredientsRatio struct {
				Impact    float64 `json:"impact"`
				Nutrition float64 `json:"nutrition"`
			} `json:"uncharacterized_ingredients_ratio"`
			Warnings []string `json:"warnings"`
		} `json:"impact"`
	} `json:"ecoscore_extended_data"`
	EcoscoreExtendedDataVersion      string        `json:"ecoscore_extended_data_version"`
	EcoscoreGrade                    string        `json:"ecoscore_grade"`
	EcoscoreScore                    int           `json:"ecoscore_score"`
	EcoscoreTags                     []string      `json:"ecoscore_tags"`
	Editors                          []string      `json:"editors"`
	EditorsTags                      []string      `json:"editors_tags"`
	EmbCodes                         string        `json:"emb_codes"`
	EmbCodes20141016                 string        `json:"emb_codes_20141016"`
	EmbCodesOrig                     string        `json:"emb_codes_orig"`
	EmbCodesTags                     []interface{} `json:"emb_codes_tags"`
	EntryDatesTags                   []string      `json:"entry_dates_tags"`
	ExpirationDate                   string        `json:"expiration_date"`
	FoodGroups                       string        `json:"food_groups"`
	FoodGroupsTags                   []string      `json:"food_groups_tags"`
	FruitsVegetablesNuts100GEstimate int           `json:"fruits-vegetables-nuts_100g_estimate"`
	GenericNameEn                    string        `json:"generic_name_en"`
	GenericNameFr                    string        `json:"generic_name_fr"`
	GenericNameFrDebugTags           []interface{} `json:"generic_name_fr_debug_tags"`
	ID0                              string        `json:"id"`
	ImageFrontSmallURL               string        `json:"image_front_small_url"`
	ImageFrontThumbURL               string        `json:"image_front_thumb_url"`
	ImageFrontURL                    string        `json:"image_front_url"`
	ImageIngredientsSmallURL         string        `json:"image_ingredients_small_url"`
	ImageIngredientsThumbURL         string        `json:"image_ingredients_thumb_url"`
	ImageIngredientsURL              string        `json:"image_ingredients_url"`
	ImageNutritionSmallURL           string        `json:"image_nutrition_small_url"`
	ImageNutritionThumbURL           string        `json:"image_nutrition_thumb_url"`
	ImageNutritionURL                string        `json:"image_nutrition_url"`
	ImageSmallURL                    string        `json:"image_small_url"`
	ImageThumbURL                    string        `json:"image_thumb_url"`
	ImageURL                         string        `json:"image_url"`
	Images                           struct {
		Num1 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"1"`
		Num2 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"2"`
		Num3 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"3"`
		Num4 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"4"`
		Num5 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"5"`
		Num6 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"6"`
		Num7 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT string `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"7"`
		Num8 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"8"`
		Num9 struct {
			Sizes struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			UploadedT int    `json:"uploaded_t"`
			Uploader  string `json:"uploader"`
		} `json:"9"`
		Front struct {
			Geometry  string `json:"geometry"`
			Imgid     string `json:"imgid"`
			Normalize string `json:"normalize"`
			Rev       string `json:"rev"`
			Sizes     struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic string `json:"white_magic"`
		} `json:"front"`
		FrontEn struct {
			Angle                int         `json:"angle"`
			CoordinatesImageSize string      `json:"coordinates_image_size"`
			Geometry             string      `json:"geometry"`
			Imgid                string      `json:"imgid"`
			Normalize            interface{} `json:"normalize"`
			Rev                  string      `json:"rev"`
			Sizes                struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic interface{} `json:"white_magic"`
			X1         string      `json:"x1"`
			X2         string      `json:"x2"`
			Y1         string      `json:"y1"`
			Y2         string      `json:"y2"`
		} `json:"front_en"`
		Ingredients struct {
			Geometry    string `json:"geometry"`
			Imgid       string `json:"imgid"`
			Normalize   string `json:"normalize"`
			Ocr         int    `json:"ocr"`
			Orientation string `json:"orientation"`
			Rev         string `json:"rev"`
			Sizes       struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic string `json:"white_magic"`
		} `json:"ingredients"`
		IngredientsEn struct {
			Geometry    string `json:"geometry"`
			Imgid       string `json:"imgid"`
			Normalize   string `json:"normalize"`
			Ocr         int    `json:"ocr"`
			Orientation string `json:"orientation"`
			Rev         string `json:"rev"`
			Sizes       struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic string `json:"white_magic"`
		} `json:"ingredients_en"`
		Nutrition struct {
			Geometry    string `json:"geometry"`
			Imgid       string `json:"imgid"`
			Normalize   string `json:"normalize"`
			Ocr         int    `json:"ocr"`
			Orientation string `json:"orientation"`
			Rev         string `json:"rev"`
			Sizes       struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic string `json:"white_magic"`
		} `json:"nutrition"`
		NutritionEn struct {
			Angle                int         `json:"angle"`
			CoordinatesImageSize string      `json:"coordinates_image_size"`
			Geometry             string      `json:"geometry"`
			Imgid                string      `json:"imgid"`
			Normalize            interface{} `json:"normalize"`
			Rev                  string      `json:"rev"`
			Sizes                struct {
				Num100 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"100"`
				Num200 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"200"`
				Num400 struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"400"`
				Full struct {
					H int `json:"h"`
					W int `json:"w"`
				} `json:"full"`
			} `json:"sizes"`
			WhiteMagic interface{} `json:"white_magic"`
			X1         string      `json:"x1"`
			X2         string      `json:"x2"`
			Y1         string      `json:"y1"`
			Y2         string      `json:"y2"`
		} `json:"nutrition_en"`
	} `json:"images"`
	InformersTags []string `json:"informers_tags"`
	Ingredients   []struct {
		ID                string `json:"id"`
		Percent           int    `json:"percent,omitempty"`
		PercentEstimate   int    `json:"percent_estimate"`
		PercentMax        int    `json:"percent_max"`
		PercentMin        int    `json:"percent_min"`
		Processing        string `json:"processing,omitempty"`
		Rank              int    `json:"rank,omitempty"`
		Text              string `json:"text"`
		Vegan             string `json:"vegan,omitempty"`
		Vegetarian        string `json:"vegetarian,omitempty"`
		FromPalmOil       string `json:"from_palm_oil,omitempty"`
		HasSubIngredients string `json:"has_sub_ingredients,omitempty"`
	} `json:"ingredients"`
	IngredientsAnalysis struct {
		EnNonVegan                []string `json:"en:non-vegan"`
		EnPalmOilContentUnknown   []string `json:"en:palm-oil-content-unknown"`
		EnVeganStatusUnknown      []string `json:"en:vegan-status-unknown"`
		EnVegetarianStatusUnknown []string `json:"en:vegetarian-status-unknown"`
	} `json:"ingredients_analysis"`
	IngredientsAnalysisTags                []string      `json:"ingredients_analysis_tags"`
	IngredientsDebug                       []interface{} `json:"ingredients_debug"`
	IngredientsFromOrThatMayBeFromPalmOilN int           `json:"ingredients_from_or_that_may_be_from_palm_oil_n"`
	IngredientsFromPalmOilN                int           `json:"ingredients_from_palm_oil_n"`
	IngredientsFromPalmOilTags             []interface{} `json:"ingredients_from_palm_oil_tags"`
	IngredientsHierarchy                   []string      `json:"ingredients_hierarchy"`
	IngredientsIdsDebug                    []string      `json:"ingredients_ids_debug"`
	IngredientsN                           int           `json:"ingredients_n"`
	IngredientsNTags                       []string      `json:"ingredients_n_tags"`
	IngredientsOriginalTags                []string      `json:"ingredients_original_tags"`
	IngredientsPercentAnalysis             int           `json:"ingredients_percent_analysis"`
	IngredientsTags                        []string      `json:"ingredients_tags"`
	IngredientsText                        string        `json:"ingredients_text"`
	IngredientsTextDebug                   string        `json:"ingredients_text_debug"`
	IngredientsTextDebugTags               []interface{} `json:"ingredients_text_debug_tags"`
	IngredientsTextEn                      string        `json:"ingredients_text_en"`
	IngredientsTextFr                      string        `json:"ingredients_text_fr"`
	IngredientsTextFrDebugTags             []interface{} `json:"ingredients_text_fr_debug_tags"`
	IngredientsTextWithAllergens           string        `json:"ingredients_text_with_allergens"`
	IngredientsTextWithAllergensEn         string        `json:"ingredients_text_with_allergens_en"`
	IngredientsThatMayBeFromPalmOilN       int           `json:"ingredients_that_may_be_from_palm_oil_n"`
	IngredientsThatMayBeFromPalmOilTags    []interface{} `json:"ingredients_that_may_be_from_palm_oil_tags"`
	IngredientsWithSpecifiedPercentN       int           `json:"ingredients_with_specified_percent_n"`
	IngredientsWithSpecifiedPercentSum     int           `json:"ingredients_with_specified_percent_sum"`
	IngredientsWithUnspecifiedPercentN     int           `json:"ingredients_with_unspecified_percent_n"`
	IngredientsWithUnspecifiedPercentSum   int           `json:"ingredients_with_unspecified_percent_sum"`
	InterfaceVersionCreated                string        `json:"interface_version_created"`
	InterfaceVersionModified               string        `json:"interface_version_modified"`
	KnownIngredientsN                      int           `json:"known_ingredients_n"`
	Labels                                 string        `json:"labels"`
	LabelsHierarchy                        []string      `json:"labels_hierarchy"`
	LabelsLc                               string        `json:"labels_lc"`
	LabelsOld                              string        `json:"labels_old"`
	LabelsTags                             []string      `json:"labels_tags"`
	Lang                                   string        `json:"lang"`
	Languages                              struct {
		EnEnglish int `json:"en:english"`
	} `json:"languages"`
	LanguagesCodes struct {
		En int `json:"en"`
	} `json:"languages_codes"`
	LanguagesHierarchy      []string      `json:"languages_hierarchy"`
	LanguagesTags           []string      `json:"languages_tags"`
	LastEditDatesTags       []string      `json:"last_edit_dates_tags"`
	LastEditor              string        `json:"last_editor"`
	LastImageDatesTags      []string      `json:"last_image_dates_tags"`
	LastImageT              int           `json:"last_image_t"`
	LastModifiedBy          string        `json:"last_modified_by"`
	LastModifiedT           int           `json:"last_modified_t"`
	Lc                      string        `json:"lc"`
	Link                    string        `json:"link"`
	MainCountriesTags       []interface{} `json:"main_countries_tags"`
	ManufacturingPlaces     string        `json:"manufacturing_places"`
	ManufacturingPlacesTags []string      `json:"manufacturing_places_tags"`
	MaxImgid                string        `json:"max_imgid"`
	MineralsPrevTags        []interface{} `json:"minerals_prev_tags"`
	MineralsTags            []interface{} `json:"minerals_tags"`
	MiscTags                []string      `json:"misc_tags"`
	NoNutritionData         string        `json:"no_nutrition_data"`
	NovaGroup               int           `json:"nova_group"`
	NovaGroupDebug          string        `json:"nova_group_debug"`
	NovaGroups              string        `json:"nova_groups"`
	NovaGroupsMarkers       struct {
		Num3 [][]string `json:"3"`
		Num4 [][]string `json:"4"`
	} `json:"nova_groups_markers"`
	NovaGroupsTags      []string      `json:"nova_groups_tags"`
	NucleotidesPrevTags []interface{} `json:"nucleotides_prev_tags"`
	NucleotidesTags     []interface{} `json:"nucleotides_tags"`
	NutrientLevels      struct {
		Fat          string `json:"fat"`
		Salt         string `json:"salt"`
		SaturatedFat string `json:"saturated-fat"`
		Sugars       string `json:"sugars"`
	} `json:"nutrient_levels"`
	NutrientLevelsTags []string `json:"nutrient_levels_tags"`
	Nutriments         struct {
		Carbohydrates                                      int     `json:"carbohydrates"`
		Carbohydrates100G                                  int     `json:"carbohydrates_100g"`
		CarbohydratesServing                               float64 `json:"carbohydrates_serving"`
		CarbohydratesUnit                                  string  `json:"carbohydrates_unit"`
		CarbohydratesValue                                 int     `json:"carbohydrates_value"`
		CarbonFootprintFromKnownIngredients100G            float64 `json:"carbon-footprint-from-known-ingredients_100g"`
		CarbonFootprintFromKnownIngredientsProduct         float64 `json:"carbon-footprint-from-known-ingredients_product"`
		CarbonFootprintFromKnownIngredientsServing         float64 `json:"carbon-footprint-from-known-ingredients_serving"`
		Energy                                             int     `json:"energy"`
		EnergyKcal                                         int     `json:"energy-kcal"`
		EnergyKcal100G                                     int     `json:"energy-kcal_100g"`
		EnergyKcalServing                                  float64 `json:"energy-kcal_serving"`
		EnergyKcalUnit                                     string  `json:"energy-kcal_unit"`
		EnergyKcalValue                                    int     `json:"energy-kcal_value"`
		EnergyKcalValueComputed                            float64 `json:"energy-kcal_value_computed"`
		EnergyKj                                           int     `json:"energy-kj"`
		EnergyKj100G                                       int     `json:"energy-kj_100g"`
		EnergyKjServing                                    int     `json:"energy-kj_serving"`
		EnergyKjUnit                                       string  `json:"energy-kj_unit"`
		EnergyKjValue                                      int     `json:"energy-kj_value"`
		EnergyKjValueComputed                              float64 `json:"energy-kj_value_computed"`
		Energy100G                                         int     `json:"energy_100g"`
		EnergyServing                                      int     `json:"energy_serving"`
		EnergyUnit                                         string  `json:"energy_unit"`
		EnergyValue                                        int     `json:"energy_value"`
		Fat                                                int     `json:"fat"`
		Fat100G                                            int     `json:"fat_100g"`
		FatServing                                         float64 `json:"fat_serving"`
		FatUnit                                            string  `json:"fat_unit"`
		FatValue                                           int     `json:"fat_value"`
		Fiber                                              float64 `json:"fiber"`
		Fiber100G                                          float64 `json:"fiber_100g"`
		FiberServing                                       float64 `json:"fiber_serving"`
		FiberUnit                                          string  `json:"fiber_unit"`
		FiberValue                                         float64 `json:"fiber_value"`
		FruitsVegetablesNutsEstimateFromIngredients100G    int     `json:"fruits-vegetables-nuts-estimate-from-ingredients_100g"`
		FruitsVegetablesNutsEstimateFromIngredientsServing int     `json:"fruits-vegetables-nuts-estimate-from-ingredients_serving"`
		NovaGroup                                          int     `json:"nova-group"`
		NovaGroup100G                                      int     `json:"nova-group_100g"`
		NovaGroupServing                                   int     `json:"nova-group_serving"`
		NutritionScoreFr                                   int     `json:"nutrition-score-fr"`
		NutritionScoreFr100G                               int     `json:"nutrition-score-fr_100g"`
		Proteins                                           float64 `json:"proteins"`
		Proteins100G                                       float64 `json:"proteins_100g"`
		ProteinsServing                                    float64 `json:"proteins_serving"`
		ProteinsUnit                                       string  `json:"proteins_unit"`
		ProteinsValue                                      float64 `json:"proteins_value"`
		Salt                                               float64 `json:"salt"`
		Salt100G                                           float64 `json:"salt_100g"`
		SaltServing                                        float64 `json:"salt_serving"`
		SaltUnit                                           string  `json:"salt_unit"`
		SaltValue                                          float64 `json:"salt_value"`
		SaturatedFat                                       float64 `json:"saturated-fat"`
		SaturatedFat100G                                   float64 `json:"saturated-fat_100g"`
		SaturatedFatServing                                float64 `json:"saturated-fat_serving"`
		SaturatedFatUnit                                   string  `json:"saturated-fat_unit"`
		SaturatedFatValue                                  float64 `json:"saturated-fat_value"`
		Sodium                                             float64 `json:"sodium"`
		Sodium100G                                         float64 `json:"sodium_100g"`
		SodiumServing                                      float64 `json:"sodium_serving"`
		SodiumUnit                                         string  `json:"sodium_unit"`
		SodiumValue                                        float64 `json:"sodium_value"`
		Sugars                                             float64 `json:"sugars"`
		Sugars100G                                         float64 `json:"sugars_100g"`
		SugarsServing                                      int     `json:"sugars_serving"`
		SugarsUnit                                         string  `json:"sugars_unit"`
		SugarsValue                                        float64 `json:"sugars_value"`
	} `json:"nutriments"`
	NutriscoreData struct {
		Energy                                         int     `json:"energy"`
		EnergyPoints                                   int     `json:"energy_points"`
		EnergyValue                                    int     `json:"energy_value"`
		Fiber                                          float64 `json:"fiber"`
		FiberPoints                                    int     `json:"fiber_points"`
		FiberValue                                     float64 `json:"fiber_value"`
		FruitsVegetablesNutsColzaWalnutOliveOils       int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils"`
		FruitsVegetablesNutsColzaWalnutOliveOilsPoints int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils_points"`
		FruitsVegetablesNutsColzaWalnutOliveOilsValue  int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils_value"`
		Grade                                          string  `json:"grade"`
		IsBeverage                                     int     `json:"is_beverage"`
		IsCheese                                       int     `json:"is_cheese"`
		IsFat                                          int     `json:"is_fat"`
		IsWater                                        int     `json:"is_water"`
		NegativePoints                                 int     `json:"negative_points"`
		PositivePoints                                 int     `json:"positive_points"`
		Proteins                                       float64 `json:"proteins"`
		ProteinsPoints                                 int     `json:"proteins_points"`
		ProteinsValue                                  float64 `json:"proteins_value"`
		SaturatedFat                                   float64 `json:"saturated_fat"`
		SaturatedFatPoints                             int     `json:"saturated_fat_points"`
		SaturatedFatRatio                              float64 `json:"saturated_fat_ratio"`
		SaturatedFatRatioPoints                        int     `json:"saturated_fat_ratio_points"`
		SaturatedFatRatioValue                         float64 `json:"saturated_fat_ratio_value"`
		SaturatedFatValue                              float64 `json:"saturated_fat_value"`
		Score                                          int     `json:"score"`
		Sodium                                         int     `json:"sodium"`
		SodiumPoints                                   int     `json:"sodium_points"`
		SodiumValue                                    int     `json:"sodium_value"`
		Sugars                                         float64 `json:"sugars"`
		SugarsPoints                                   int     `json:"sugars_points"`
		SugarsValue                                    float64 `json:"sugars_value"`
	} `json:"nutriscore_data"`
	NutriscoreGrade                                                       string        `json:"nutriscore_grade"`
	NutriscoreScore                                                       int           `json:"nutriscore_score"`
	NutriscoreScoreOpposite                                               int           `json:"nutriscore_score_opposite"`
	NutritionData                                                         string        `json:"nutrition_data"`
	NutritionDataPer                                                      string        `json:"nutrition_data_per"`
	NutritionDataPrepared                                                 string        `json:"nutrition_data_prepared"`
	NutritionDataPreparedPer                                              string        `json:"nutrition_data_prepared_per"`
	NutritionGradeFr                                                      string        `json:"nutrition_grade_fr"`
	NutritionGrades                                                       string        `json:"nutrition_grades"`
	NutritionGradesTags                                                   []string      `json:"nutrition_grades_tags"`
	NutritionScoreBeverage                                                int           `json:"nutrition_score_beverage"`
	NutritionScoreDebug                                                   string        `json:"nutrition_score_debug"`
	NutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients      int           `json:"nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients"`
	NutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue int           `json:"nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value"`
	Obsolete                                                              string        `json:"obsolete"`
	ObsoleteSinceDate                                                     string        `json:"obsolete_since_date"`
	OriginEn                                                              string        `json:"origin_en"`
	Origins                                                               string        `json:"origins"`
	OriginsHierarchy                                                      []interface{} `json:"origins_hierarchy"`
	OriginsLc                                                             string        `json:"origins_lc"`
	OriginsOld                                                            string        `json:"origins_old"`
	OriginsTags                                                           []interface{} `json:"origins_tags"`
	OtherNutritionalSubstancesTags                                        []interface{} `json:"other_nutritional_substances_tags"`
	Packaging                                                             string        `json:"packaging"`
	PackagingHierarchy                                                    []string      `json:"packaging_hierarchy"`
	PackagingLc                                                           string        `json:"packaging_lc"`
	PackagingOld                                                          string        `json:"packaging_old"`
	PackagingOldBeforeTaxonomization                                      string        `json:"packaging_old_before_taxonomization"`
	PackagingTags                                                         []string      `json:"packaging_tags"`
	PackagingTextEn                                                       string        `json:"packaging_text_en"`
	Packagings                                                            []struct {
		Material string `json:"material"`
		Shape    string `json:"shape"`
	} `json:"packagings"`
	PackagingsComplete     int           `json:"packagings_complete"`
	PhotographersTags      []string      `json:"photographers_tags"`
	PnnsGroups1            string        `json:"pnns_groups_1"`
	PnnsGroups1Tags        []string      `json:"pnns_groups_1_tags"`
	PnnsGroups2            string        `json:"pnns_groups_2"`
	PnnsGroups2Tags        []string      `json:"pnns_groups_2_tags"`
	PopularityKey          int64         `json:"popularity_key"`
	PopularityTags         []string      `json:"popularity_tags"`
	ProductName            string        `json:"product_name"`
	ProductNameEn          string        `json:"product_name_en"`
	ProductNameFr          string        `json:"product_name_fr"`
	ProductNameFrDebugTags []interface{} `json:"product_name_fr_debug_tags"`
	ProductQuantity        string        `json:"product_quantity"`
	PurchasePlaces         string        `json:"purchase_places"`
	PurchasePlacesTags     []interface{} `json:"purchase_places_tags"`
	Quantity               string        `json:"quantity"`
	RemovedCountriesTags   []interface{} `json:"removed_countries_tags"`
	Rev                    int           `json:"rev"`
	ScansN                 int           `json:"scans_n"`
	SelectedImages         struct {
		Front struct {
			Display struct {
				En string `json:"en"`
			} `json:"display"`
			Small struct {
				En string `json:"en"`
			} `json:"small"`
			Thumb struct {
				En string `json:"en"`
			} `json:"thumb"`
		} `json:"front"`
		Ingredients struct {
			Display struct {
				En string `json:"en"`
			} `json:"display"`
			Small struct {
				En string `json:"en"`
			} `json:"small"`
			Thumb struct {
				En string `json:"en"`
			} `json:"thumb"`
		} `json:"ingredients"`
		Nutrition struct {
			Display struct {
				En string `json:"en"`
			} `json:"display"`
			Small struct {
				En string `json:"en"`
			} `json:"small"`
			Thumb struct {
				En string `json:"en"`
			} `json:"thumb"`
		} `json:"nutrition"`
	} `json:"selected_images"`
	ServingQuantity       string        `json:"serving_quantity"`
	ServingSize           string        `json:"serving_size"`
	Sortkey               int           `json:"sortkey"`
	States                string        `json:"states"`
	StatesHierarchy       []string      `json:"states_hierarchy"`
	StatesTags            []string      `json:"states_tags"`
	Stores                string        `json:"stores"`
	StoresTags            []interface{} `json:"stores_tags"`
	Teams                 string        `json:"teams"`
	TeamsTags             []string      `json:"teams_tags"`
	Traces                string        `json:"traces"`
	TracesFromIngredients string        `json:"traces_from_ingredients"`
	TracesFromUser        string        `json:"traces_from_user"`
	TracesHierarchy       []interface{} `json:"traces_hierarchy"`
	TracesLc              string        `json:"traces_lc"`
	TracesTags            []interface{} `json:"traces_tags"`
	UniqueScansN          int           `json:"unique_scans_n"`
	UnknownIngredientsN   int           `json:"unknown_ingredients_n"`
	UnknownNutrientsTags  []interface{} `json:"unknown_nutrients_tags"`
	UpdateKey             string        `json:"update_key"`
	VitaminsPrevTags      []interface{} `json:"vitamins_prev_tags"`
	VitaminsTags          []interface{} `json:"vitamins_tags"`
	WeighersTags          []interface{} `json:"weighers_tags"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"_keywords\":"
		out.RawString(prefix)
		if in.Keywords == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.Keywords {
				if v89 > 0 {
					out.RawByte(',')
				}
				out.String(string(v90))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"added_countries_tags\":"
		out.RawString(prefix)
		if in.AddedCountriesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v91, v92 := range in.AddedCountriesTags {
				if v91 > 0 {
					out.RawByte(',')
				}
				if m, ok := v92.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v92.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v92))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"additives_debug_tags\":"
		out.RawString(prefix)
		if in.AdditivesDebugTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v93, v94 := range in.AdditivesDebugTags {
				if v93 > 0 {
					out.RawByte(',')
				}
				if m, ok := v94.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v94.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v94))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"additives_n\":"
		out.RawString(prefix)
		out.Int(int(in.AdditivesN))
	}
	{
		const prefix string = ",\"additives_old_n\":"
		out.RawString(prefix)
		out.Int(int(in.AdditivesOldN))
	}
	{
		const prefix string = ",\"additives_old_tags\":"
		out.RawString(prefix)
		if in.AdditivesOldTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v95, v96 := range in.AdditivesOldTags {
				if v95 > 0 {
					out.RawByte(',')
				}
				out.String(string(v96))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"additives_original_tags\":"
		out.RawString(prefix)
		if in.AdditivesOriginalTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v97, v98 := range in.AdditivesOriginalTags {
				if v97 > 0 {
					out.RawByte(',')
				}
				out.String(string(v98))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"additives_prev_original_tags\":"
		out.RawString(prefix)
		if in.AdditivesPrevOriginalTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v99, v100 := range in.AdditivesPrevOriginalTags {
				if v99 > 0 {
					out.RawByte(',')
				}
				out.String(string(v100))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"additives_tags\":"
		out.RawString(prefix)
		if in.AdditivesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v101, v102 := range in.AdditivesTags {
				if v101 > 0 {
					out.RawByte(',')
				}
				out.String(string(v102))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"allergens\":"
		out.RawString(prefix)
		out.String(string(in.Allergens))
	}
	{
		const prefix string = ",\"allergens_from_ingredients\":"
		out.RawString(prefix)
		out.String(string(in.AllergensFromIngredients))
	}
	{
		const prefix string = ",\"allergens_from_user\":"
		out.RawString(prefix)
		out.String(string(in.AllergensFromUser))
	}
	{
		const prefix string = ",\"allergens_hierarchy\":"
		out.RawString(prefix)
		if in.AllergensHierarchy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v103, v104 := range in.AllergensHierarchy {
				if v103 > 0 {
					out.RawByte(',')
				}
				out.String(string(v104))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"allergens_lc\":"
		out.RawString(prefix)
		out.String(string(in.AllergensLc))
	}
	{
		const prefix string = ",\"allergens_tags\":"
		out.RawString(prefix)
		if in.AllergensTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v105, v106 := range in.AllergensTags {
				if v105 > 0 {
					out.RawByte(',')
				}
				out.String(string(v106))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"amino_acids_prev_tags\":"
		out.RawString(prefix)
		if in.AminoAcidsPrevTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v107, v108 := range in.AminoAcidsPrevTags {
				if v107 > 0 {
					out.RawByte(',')
				}
				if m, ok := v108.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v108.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v108))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"amino_acids_tags\":"
		out.RawString(prefix)
		if in.AminoAcidsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v109, v110 := range in.AminoAcidsTags {
				if v109 > 0 {
					out.RawByte(',')
				}
				if m, ok := v110.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v110.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v110))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"brands\":"
		out.RawString(prefix)
		out.String(string(in.Brands))
	}
	{
		const prefix string = ",\"brands_tags\":"
		out.RawString(prefix)
		if in.BrandsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v111, v112 := range in.BrandsTags {
				if v111 > 0 {
					out.RawByte(',')
				}
				out.String(string(v112))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"carbon_footprint_from_known_ingredients_debug\":"
		out.RawString(prefix)
		out.String(string(in.CarbonFootprintFromKnownIngredientsDebug))
	}
	{
		const prefix string = ",\"carbon_footprint_percent_of_known_ingredients\":"
		out.RawString(prefix)
		out.Int(int(in.CarbonFootprintPercentOfKnownIngredients))
	}
	{
		const prefix string = ",\"categories\":"
		out.RawString(prefix)
		out.String(string(in.Categories))
	}
	{
		const prefix string = ",\"categories_hierarchy\":"
		out.RawString(prefix)
		if in.CategoriesHierarchy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v113, v114 := range in.CategoriesHierarchy {
				if v113 > 0 {
					out.RawByte(',')
				}
				out.String(string(v114))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"categories_lc\":"
		out.RawString(prefix)
		out.String(string(in.CategoriesLc))
	}
	{
		const prefix string = ",\"categories_old\":"
		out.RawString(prefix)
		out.String(string(in.CategoriesOld))
	}
	{
		const prefix string = ",\"categories_properties\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode1(out, in.CategoriesProperties)
	}
	{
		const prefix string = ",\"categories_properties_tags\":"
		out.RawString(prefix)
		if in.CategoriesPropertiesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v115, v116 := range in.CategoriesPropertiesTags {
				if v115 > 0 {
					out.RawByte(',')
				}
				out.String(string(v116))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"categories_tags\":"
		out.RawString(prefix)
		if in.CategoriesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v117, v118 := range in.CategoriesTags {
				if v117 > 0 {
					out.RawByte(',')
				}
				out.String(string(v118))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"category_properties\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode2(out, in.CategoryProperties)
	}
	{
		const prefix string = ",\"checkers_tags\":"
		out.RawString(prefix)
		if in.CheckersTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v119, v120 := range in.CheckersTags {
				if v119 > 0 {
					out.RawByte(',')
				}
				if m, ok := v120.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v120.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v120))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ciqual_food_name_tags\":"
		out.RawString(prefix)
		if in.CiqualFoodNameTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v121, v122 := range in.CiqualFoodNameTags {
				if v121 > 0 {
					out.RawByte(',')
				}
				out.String(string(v122))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cities_tags\":"
		out.RawString(prefix)
		if in.CitiesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v123, v124 := range in.CitiesTags {
				if v123 > 0 {
					out.RawByte(',')
				}
				if m, ok := v124.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v124.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v124))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"codes_tags\":"
		out.RawString(prefix)
		if in.CodesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v125, v126 := range in.CodesTags {
				if v125 > 0 {
					out.RawByte(',')
				}
				out.String(string(v126))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"compared_to_category\":"
		out.RawString(prefix)
		out.String(string(in.ComparedToCategory))
	}
	{
		const prefix string = ",\"complete\":"
		out.RawString(prefix)
		out.Int(int(in.Complete))
	}
	{
		const prefix string = ",\"completeness\":"
		out.RawString(prefix)
		out.Float64(float64(in.Completeness))
	}
	{
		const prefix string = ",\"correctors_tags\":"
		out.RawString(prefix)
		if in.CorrectorsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v127, v128 := range in.CorrectorsTags {
				if v127 > 0 {
					out.RawByte(',')
				}
				out.String(string(v128))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"countries\":"
		out.RawString(prefix)
		out.String(string(in.Countries))
	}
	{
		const prefix string = ",\"countries_hierarchy\":"
		out.RawString(prefix)
		if in.CountriesHierarchy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v129, v130 := range in.CountriesHierarchy {
				if v129 > 0 {
					out.RawByte(',')
				}
				out.String(string(v130))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"countries_lc\":"
		out.RawString(prefix)
		out.String(string(in.CountriesLc))
	}
	{
		const prefix string = ",\"countries_tags\":"
		out.RawString(prefix)
		if in.CountriesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v131, v132 := range in.CountriesTags {
				if v131 > 0 {
					out.RawByte(',')
				}
				out.String(string(v132))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"created_t\":"
		out.RawString(prefix)
		out.Int(int(in.CreatedT))
	}
	{
		const prefix string = ",\"creator\":"
		out.RawString(prefix)
		out.String(string(in.Creator))
	}
	{
		const prefix string = ",\"data_quality_bugs_tags\":"
		out.RawString(prefix)
		if in.DataQualityBugsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v133, v134 := range in.DataQualityBugsTags {
				if v133 > 0 {
					out.RawByte(',')
				}
				if m, ok := v134.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v134.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v134))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data_quality_errors_tags\":"
		out.RawString(prefix)
		if in.DataQualityErrorsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v135, v136 := range in.DataQualityErrorsTags {
				if v135 > 0 {
					out.RawByte(',')
				}
				if m, ok := v136.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v136.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v136))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data_quality_info_tags\":"
		out.RawString(prefix)
		if in.DataQualityInfoTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v137, v138 := range in.DataQualityInfoTags {
				if v137 > 0 {
					out.RawByte(',')
				}
				out.String(string(v138))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data_quality_tags\":"
		out.RawString(prefix)
		if in.DataQualityTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v139, v140 := range in.DataQualityTags {
				if v139 > 0 {
					out.RawByte(',')
				}
				out.String(string(v140))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data_quality_warnings_tags\":"
		out.RawString(prefix)
		if in.DataQualityWarningsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v141, v142 := range in.DataQualityWarningsTags {
				if v141 > 0 {
					out.RawByte(',')
				}
				out.String(string(v142))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"data_sources\":"
		out.RawString(prefix)
		out.String(string(in.DataSources))
	}
	{
		const prefix string = ",\"data_sources_tags\":"
		out.RawString(prefix)
		if in.DataSourcesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v143, v144 := range in.DataSourcesTags {
				if v143 > 0 {
					out.RawByte(',')
				}
				out.String(string(v144))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"debug_param_sorted_langs\":"
		out.RawString(prefix)
		if in.DebugParamSortedLangs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v145, v146 := range in.DebugParamSortedLangs {
				if v145 > 0 {
					out.RawByte(',')
				}
				out.String(string(v146))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ecoscore_data\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode3(out, in.EcoscoreData)
	}
	{
		const prefix string = ",\"ecoscore_extended_data\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode4(out, in.EcoscoreExtendedData)
	}
	{
		const prefix string = ",\"ecoscore_extended_data_version\":"
		out.RawString(prefix)
		out.String(string(in.EcoscoreExtendedDataVersion))
	}
	{
		const prefix string = ",\"ecoscore_grade\":"
		out.RawString(prefix)
		out.String(string(in.EcoscoreGrade))
	}
	{
		const prefix string = ",\"ecoscore_score\":"
		out.RawString(prefix)
		out.Int(int(in.EcoscoreScore))
	}
	{
		const prefix string = ",\"ecoscore_tags\":"
		out.RawString(prefix)
		if in.EcoscoreTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v147, v148 := range in.EcoscoreTags {
				if v147 > 0 {
					out.RawByte(',')
				}
				out.String(string(v148))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"editors\":"
		out.RawString(prefix)
		if in.Editors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v149, v150 := range in.Editors {
				if v149 > 0 {
					out.RawByte(',')
				}
				out.String(string(v150))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"editors_tags\":"
		out.RawString(prefix)
		if in.EditorsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v151, v152 := range in.EditorsTags {
				if v151 > 0 {
					out.RawByte(',')
				}
				out.String(string(v152))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"emb_codes\":"
		out.RawString(prefix)
		out.String(string(in.EmbCodes))
	}
	{
		const prefix string = ",\"emb_codes_20141016\":"
		out.RawString(prefix)
		out.String(string(in.EmbCodes20141016))
	}
	{
		const prefix string = ",\"emb_codes_orig\":"
		out.RawString(prefix)
		out.String(string(in.EmbCodesOrig))
	}
	{
		const prefix string = ",\"emb_codes_tags\":"
		out.RawString(prefix)
		if in.EmbCodesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v153, v154 := range in.EmbCodesTags {
				if v153 > 0 {
					out.RawByte(',')
				}
				if m, ok := v154.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v154.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v154))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"entry_dates_tags\":"
		out.RawString(prefix)
		if in.EntryDatesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v155, v156 := range in.EntryDatesTags {
				if v155 > 0 {
					out.RawByte(',')
				}
				out.String(string(v156))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"expiration_date\":"
		out.RawString(prefix)
		out.String(string(in.ExpirationDate))
	}
	{
		const prefix string = ",\"food_groups\":"
		out.RawString(prefix)
		out.String(string(in.FoodGroups))
	}
	{
		const prefix string = ",\"food_groups_tags\":"
		out.RawString(prefix)
		if in.FoodGroupsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v157, v158 := range in.FoodGroupsTags {
				if v157 > 0 {
					out.RawByte(',')
				}
				out.String(string(v158))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"fruits-vegetables-nuts_100g_estimate\":"
		out.RawString(prefix)
		out.Int(int(in.FruitsVegetablesNuts100GEstimate))
	}
	{
		const prefix string = ",\"generic_name_en\":"
		out.RawString(prefix)
		out.String(string(in.GenericNameEn))
	}
	{
		const prefix string = ",\"generic_name_fr\":"
		out.RawString(prefix)
		out.String(string(in.GenericNameFr))
	}
	{
		const prefix string = ",\"generic_name_fr_debug_tags\":"
		out.RawString(prefix)
		if in.GenericNameFrDebugTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v159, v160 := range in.GenericNameFrDebugTags {
				if v159 > 0 {
					out.RawByte(',')
				}
				if m, ok := v160.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v160.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v160))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID0))
	}
	{
		const prefix string = ",\"image_front_small_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageFrontSmallURL))
	}
	{
		const prefix string = ",\"image_front_thumb_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageFrontThumbURL))
	}
	{
		const prefix string = ",\"image_front_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageFrontURL))
	}
	{
		const prefix string = ",\"image_ingredients_small_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageIngredientsSmallURL))
	}
	{
		const prefix string = ",\"image_ingredients_thumb_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageIngredientsThumbURL))
	}
	{
		const prefix string = ",\"image_ingredients_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageIngredientsURL))
	}
	{
		const prefix string = ",\"image_nutrition_small_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageNutritionSmallURL))
	}
	{
		const prefix string = ",\"image_nutrition_thumb_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageNutritionThumbURL))
	}
	{
		const prefix string = ",\"image_nutrition_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageNutritionURL))
	}
	{
		const prefix string = ",\"image_small_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageSmallURL))
	}
	{
		const prefix string = ",\"image_thumb_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageThumbURL))
	}
	{
		const prefix string = ",\"image_url\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode5(out, in.Images)
	}
	{
		const prefix string = ",\"informers_tags\":"
		out.RawString(prefix)
		if in.InformersTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v161, v162 := range in.InformersTags {
				if v161 > 0 {
					out.RawByte(',')
				}
				out.String(string(v162))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients\":"
		out.RawString(prefix)
		if in.Ingredients == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v163, v164 := range in.Ingredients {
				if v163 > 0 {
					out.RawByte(',')
				}
				easyjsonC4ff3609Encode6(out, v164)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_analysis\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode7(out, in.IngredientsAnalysis)
	}
	{
		const prefix string = ",\"ingredients_analysis_tags\":"
		out.RawString(prefix)
		if in.IngredientsAnalysisTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v165, v166 := range in.IngredientsAnalysisTags {
				if v165 > 0 {
					out.RawByte(',')
				}
				out.String(string(v166))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_debug\":"
		out.RawString(prefix)
		if in.IngredientsDebug == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v167, v168 := range in.IngredientsDebug {
				if v167 > 0 {
					out.RawByte(',')
				}
				if m, ok := v168.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v168.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v168))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_from_or_that_may_be_from_palm_oil_n\":"
		out.RawString(prefix)
		out.Int(int(in.IngredientsFromOrThatMayBeFromPalmOilN))
	}
	{
		const prefix string = ",\"ingredients_from_palm_oil_n\":"
		out.RawString(prefix)
		out.Int(int(in.IngredientsFromPalmOilN))
	}
	{
		const prefix string = ",\"ingredients_from_palm_oil_tags\":"
		out.RawString(prefix)
		if in.IngredientsFromPalmOilTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v169, v170 := range in.IngredientsFromPalmOilTags {
				if v169 > 0 {
					out.RawByte(',')
				}
				if m, ok := v170.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v170.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v170))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_hierarchy\":"
		out.RawString(prefix)
		if in.IngredientsHierarchy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v171, v172 := range in.IngredientsHierarchy {
				if v171 > 0 {
					out.RawByte(',')
				}
				out.String(string(v172))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_ids_debug\":"
		out.RawString(prefix)
		if in.IngredientsIdsDebug == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v173, v174 := range in.IngredientsIdsDebug {
				if v173 > 0 {
					out.RawByte(',')
				}
				out.String(string(v174))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_n\":"
		out.RawString(prefix)
		out.Int(int(in.IngredientsN))
	}
	{
		const prefix string = ",\"ingredients_n_tags\":"
		out.RawString(prefix)
		if in.IngredientsNTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v175, v176 := range in.IngredientsNTags {
				if v175 > 0 {
					out.RawByte(',')
				}
				out.String(string(v176))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_original_tags\":"
		out.RawString(prefix)
		if in.IngredientsOriginalTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v177, v178 := range in.IngredientsOriginalTags {
				if v177 > 0 {
					out.RawByte(',')
				}
				out.String(string(v178))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_percent_analysis\":"
		out.RawString(prefix)
		out.Int(int(in.IngredientsPercentAnalysis))
	}
	{
		const prefix string = ",\"ingredients_tags\":"
		out.RawString(prefix)
		if in.IngredientsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v179, v180 := range in.IngredientsTags {
				if v179 > 0 {
					out.RawByte(',')
				}
				out.String(string(v180))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_text\":"
		out.RawString(prefix)
		out.String(string(in.IngredientsText))
	}
	{
		const prefix string = ",\"ingredients_text_debug\":"
		out.RawString(prefix)
		out.String(string(in.IngredientsTextDebug))
	}
	{
		const prefix string = ",\"ingredients_text_debug_tags\":"
		out.RawString(prefix)
		if in.IngredientsTextDebugTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v181, v182 := range in.IngredientsTextDebugTags {
				if v181 > 0 {
					out.RawByte(',')
				}
				if m, ok := v182.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v182.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v182))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_text_en\":"
		out.RawString(prefix)
		out.String(string(in.IngredientsTextEn))
	}
	{
		const prefix string = ",\"ingredients_text_fr\":"
		out.RawString(prefix)
		out.String(string(in.IngredientsTextFr))
	}
	{
		const prefix string = ",\"ingredients_text_fr_debug_tags\":"
		out.RawString(prefix)
		if in.IngredientsTextFrDebugTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v183, v184 := range in.IngredientsTextFrDebugTags {
				if v183 > 0 {
					out.RawByte(',')
				}
				if m, ok := v184.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v184.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v184))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_text_with_allergens\":"
		out.RawString(prefix)
		out.String(string(in.IngredientsTextWithAllergens))
	}
	{
		const prefix string = ",\"ingredients_text_with_allergens_en\":"
		out.RawString(prefix)
		out.String(string(in.IngredientsTextWithAllergensEn))
	}
	{
		const prefix string = ",\"ingredients_that_may_be_from_palm_oil_n\":"
		out.RawString(prefix)
		out.Int(int(in.IngredientsThatMayBeFromPalmOilN))
	}
	{
		const prefix string = ",\"ingredients_that_may_be_from_palm_oil_tags\":"
		out.RawString(prefix)
		if in.IngredientsThatMayBeFromPalmOilTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v185, v186 := range in.IngredientsThatMayBeFromPalmOilTags {
				if v185 > 0 {
					out.RawByte(',')
				}
				if m, ok := v186.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v186.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v186))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ingredients_with_specified_percent_n\":"
		out.RawString(prefix)
		out.Int(int(in.IngredientsWithSpecifiedPercentN))
	}
	{
		const prefix string = ",\"ingredients_with_specified_percent_sum\":"
		out.RawString(prefix)
		out.Int(int(in.IngredientsWithSpecifiedPercentSum))
	}
	{
		const prefix string = ",\"ingredients_with_unspecified_percent_n\":"
		out.RawString(prefix)
		out.Int(int(in.IngredientsWithUnspecifiedPercentN))
	}
	{
		const prefix string = ",\"ingredients_with_unspecified_percent_sum\":"
		out.RawString(prefix)
		out.Int(int(in.IngredientsWithUnspecifiedPercentSum))
	}
	{
		const prefix string = ",\"interface_version_created\":"
		out.RawString(prefix)
		out.String(string(in.InterfaceVersionCreated))
	}
	{
		const prefix string = ",\"interface_version_modified\":"
		out.RawString(prefix)
		out.String(string(in.InterfaceVersionModified))
	}
	{
		const prefix string = ",\"known_ingredients_n\":"
		out.RawString(prefix)
		out.Int(int(in.KnownIngredientsN))
	}
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		out.String(string(in.Labels))
	}
	{
		const prefix string = ",\"labels_hierarchy\":"
		out.RawString(prefix)
		if in.LabelsHierarchy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v187, v188 := range in.LabelsHierarchy {
				if v187 > 0 {
					out.RawByte(',')
				}
				out.String(string(v188))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"labels_lc\":"
		out.RawString(prefix)
		out.String(string(in.LabelsLc))
	}
	{
		const prefix string = ",\"labels_old\":"
		out.RawString(prefix)
		out.String(string(in.LabelsOld))
	}
	{
		const prefix string = ",\"labels_tags\":"
		out.RawString(prefix)
		if in.LabelsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v189, v190 := range in.LabelsTags {
				if v189 > 0 {
					out.RawByte(',')
				}
				out.String(string(v190))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"languages\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode8(out, in.Languages)
	}
	{
		const prefix string = ",\"languages_codes\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode9(out, in.LanguagesCodes)
	}
	{
		const prefix string = ",\"languages_hierarchy\":"
		out.RawString(prefix)
		if in.LanguagesHierarchy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v191, v192 := range in.LanguagesHierarchy {
				if v191 > 0 {
					out.RawByte(',')
				}
				out.String(string(v192))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"languages_tags\":"
		out.RawString(prefix)
		if in.LanguagesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v193, v194 := range in.LanguagesTags {
				if v193 > 0 {
					out.RawByte(',')
				}
				out.String(string(v194))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"last_edit_dates_tags\":"
		out.RawString(prefix)
		if in.LastEditDatesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v195, v196 := range in.LastEditDatesTags {
				if v195 > 0 {
					out.RawByte(',')
				}
				out.String(string(v196))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"last_editor\":"
		out.RawString(prefix)
		out.String(string(in.LastEditor))
	}
	{
		const prefix string = ",\"last_image_dates_tags\":"
		out.RawString(prefix)
		if in.LastImageDatesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v197, v198 := range in.LastImageDatesTags {
				if v197 > 0 {
					out.RawByte(',')
				}
				out.String(string(v198))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"last_image_t\":"
		out.RawString(prefix)
		out.Int(int(in.LastImageT))
	}
	{
		const prefix string = ",\"last_modified_by\":"
		out.RawString(prefix)
		out.String(string(in.LastModifiedBy))
	}
	{
		const prefix string = ",\"last_modified_t\":"
		out.RawString(prefix)
		out.Int(int(in.LastModifiedT))
	}
	{
		const prefix string = ",\"lc\":"
		out.RawString(prefix)
		out.String(string(in.Lc))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"main_countries_tags\":"
		out.RawString(prefix)
		if in.MainCountriesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v199, v200 := range in.MainCountriesTags {
				if v199 > 0 {
					out.RawByte(',')
				}
				if m, ok := v200.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v200.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v200))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"manufacturing_places\":"
		out.RawString(prefix)
		out.String(string(in.ManufacturingPlaces))
	}
	{
		const prefix string = ",\"manufacturing_places_tags\":"
		out.RawString(prefix)
		if in.ManufacturingPlacesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v201, v202 := range in.ManufacturingPlacesTags {
				if v201 > 0 {
					out.RawByte(',')
				}
				out.String(string(v202))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"max_imgid\":"
		out.RawString(prefix)
		out.String(string(in.MaxImgid))
	}
	{
		const prefix string = ",\"minerals_prev_tags\":"
		out.RawString(prefix)
		if in.MineralsPrevTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v203, v204 := range in.MineralsPrevTags {
				if v203 > 0 {
					out.RawByte(',')
				}
				if m, ok := v204.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v204.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v204))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"minerals_tags\":"
		out.RawString(prefix)
		if in.MineralsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v205, v206 := range in.MineralsTags {
				if v205 > 0 {
					out.RawByte(',')
				}
				if m, ok := v206.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v206.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v206))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"misc_tags\":"
		out.RawString(prefix)
		if in.MiscTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v207, v208 := range in.MiscTags {
				if v207 > 0 {
					out.RawByte(',')
				}
				out.String(string(v208))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"no_nutrition_data\":"
		out.RawString(prefix)
		out.String(string(in.NoNutritionData))
	}
	{
		const prefix string = ",\"nova_group\":"
		out.RawString(prefix)
		out.Int(int(in.NovaGroup))
	}
	{
		const prefix string = ",\"nova_group_debug\":"
		out.RawString(prefix)
		out.String(string(in.NovaGroupDebug))
	}
	{
		const prefix string = ",\"nova_groups\":"
		out.RawString(prefix)
		out.String(string(in.NovaGroups))
	}
	{
		const prefix string = ",\"nova_groups_markers\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode10(out, in.NovaGroupsMarkers)
	}
	{
		const prefix string = ",\"nova_groups_tags\":"
		out.RawString(prefix)
		if in.NovaGroupsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v209, v210 := range in.NovaGroupsTags {
				if v209 > 0 {
					out.RawByte(',')
				}
				out.String(string(v210))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nucleotides_prev_tags\":"
		out.RawString(prefix)
		if in.NucleotidesPrevTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v211, v212 := range in.NucleotidesPrevTags {
				if v211 > 0 {
					out.RawByte(',')
				}
				if m, ok := v212.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v212.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v212))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nucleotides_tags\":"
		out.RawString(prefix)
		if in.NucleotidesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v213, v214 := range in.NucleotidesTags {
				if v213 > 0 {
					out.RawByte(',')
				}
				if m, ok := v214.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v214.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v214))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nutrient_levels\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode11(out, in.NutrientLevels)
	}
	{
		const prefix string = ",\"nutrient_levels_tags\":"
		out.RawString(prefix)
		if in.NutrientLevelsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v215, v216 := range in.NutrientLevelsTags {
				if v215 > 0 {
					out.RawByte(',')
				}
				out.String(string(v216))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nutriments\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode12(out, in.Nutriments)
	}
	{
		const prefix string = ",\"nutriscore_data\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode13(out, in.NutriscoreData)
	}
	{
		const prefix string = ",\"nutriscore_grade\":"
		out.RawString(prefix)
		out.String(string(in.NutriscoreGrade))
	}
	{
		const prefix string = ",\"nutriscore_score\":"
		out.RawString(prefix)
		out.Int(int(in.NutriscoreScore))
	}
	{
		const prefix string = ",\"nutriscore_score_opposite\":"
		out.RawString(prefix)
		out.Int(int(in.NutriscoreScoreOpposite))
	}
	{
		const prefix string = ",\"nutrition_data\":"
		out.RawString(prefix)
		out.String(string(in.NutritionData))
	}
	{
		const prefix string = ",\"nutrition_data_per\":"
		out.RawString(prefix)
		out.String(string(in.NutritionDataPer))
	}
	{
		const prefix string = ",\"nutrition_data_prepared\":"
		out.RawString(prefix)
		out.String(string(in.NutritionDataPrepared))
	}
	{
		const prefix string = ",\"nutrition_data_prepared_per\":"
		out.RawString(prefix)
		out.String(string(in.NutritionDataPreparedPer))
	}
	{
		const prefix string = ",\"nutrition_grade_fr\":"
		out.RawString(prefix)
		out.String(string(in.NutritionGradeFr))
	}
	{
		const prefix string = ",\"nutrition_grades\":"
		out.RawString(prefix)
		out.String(string(in.NutritionGrades))
	}
	{
		const prefix string = ",\"nutrition_grades_tags\":"
		out.RawString(prefix)
		if in.NutritionGradesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v217, v218 := range in.NutritionGradesTags {
				if v217 > 0 {
					out.RawByte(',')
				}
				out.String(string(v218))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nutrition_score_beverage\":"
		out.RawString(prefix)
		out.Int(int(in.NutritionScoreBeverage))
	}
	{
		const prefix string = ",\"nutrition_score_debug\":"
		out.RawString(prefix)
		out.String(string(in.NutritionScoreDebug))
	}
	{
		const prefix string = ",\"nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients\":"
		out.RawString(prefix)
		out.Int(int(in.NutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients))
	}
	{
		const prefix string = ",\"nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value\":"
		out.RawString(prefix)
		out.Int(int(in.NutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue))
	}
	{
		const prefix string = ",\"obsolete\":"
		out.RawString(prefix)
		out.String(string(in.Obsolete))
	}
	{
		const prefix string = ",\"obsolete_since_date\":"
		out.RawString(prefix)
		out.String(string(in.ObsoleteSinceDate))
	}
	{
		const prefix string = ",\"origin_en\":"
		out.RawString(prefix)
		out.String(string(in.OriginEn))
	}
	{
		const prefix string = ",\"origins\":"
		out.RawString(prefix)
		out.String(string(in.Origins))
	}
	{
		const prefix string = ",\"origins_hierarchy\":"
		out.RawString(prefix)
		if in.OriginsHierarchy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v219, v220 := range in.OriginsHierarchy {
				if v219 > 0 {
					out.RawByte(',')
				}
				if m, ok := v220.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v220.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v220))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"origins_lc\":"
		out.RawString(prefix)
		out.String(string(in.OriginsLc))
	}
	{
		const prefix string = ",\"origins_old\":"
		out.RawString(prefix)
		out.String(string(in.OriginsOld))
	}
	{
		const prefix string = ",\"origins_tags\":"
		out.RawString(prefix)
		if in.OriginsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v221, v222 := range in.OriginsTags {
				if v221 > 0 {
					out.RawByte(',')
				}
				if m, ok := v222.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v222.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v222))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"other_nutritional_substances_tags\":"
		out.RawString(prefix)
		if in.OtherNutritionalSubstancesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v223, v224 := range in.OtherNutritionalSubstancesTags {
				if v223 > 0 {
					out.RawByte(',')
				}
				if m, ok := v224.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v224.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v224))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"packaging\":"
		out.RawString(prefix)
		out.String(string(in.Packaging))
	}
	{
		const prefix string = ",\"packaging_hierarchy\":"
		out.RawString(prefix)
		if in.PackagingHierarchy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v225, v226 := range in.PackagingHierarchy {
				if v225 > 0 {
					out.RawByte(',')
				}
				out.String(string(v226))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"packaging_lc\":"
		out.RawString(prefix)
		out.String(string(in.PackagingLc))
	}
	{
		const prefix string = ",\"packaging_old\":"
		out.RawString(prefix)
		out.String(string(in.PackagingOld))
	}
	{
		const prefix string = ",\"packaging_old_before_taxonomization\":"
		out.RawString(prefix)
		out.String(string(in.PackagingOldBeforeTaxonomization))
	}
	{
		const prefix string = ",\"packaging_tags\":"
		out.RawString(prefix)
		if in.PackagingTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v227, v228 := range in.PackagingTags {
				if v227 > 0 {
					out.RawByte(',')
				}
				out.String(string(v228))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"packaging_text_en\":"
		out.RawString(prefix)
		out.String(string(in.PackagingTextEn))
	}
	{
		const prefix string = ",\"packagings\":"
		out.RawString(prefix)
		if in.Packagings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v229, v230 := range in.Packagings {
				if v229 > 0 {
					out.RawByte(',')
				}
				easyjsonC4ff3609Encode14(out, v230)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"packagings_complete\":"
		out.RawString(prefix)
		out.Int(int(in.PackagingsComplete))
	}
	{
		const prefix string = ",\"photographers_tags\":"
		out.RawString(prefix)
		if in.PhotographersTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v231, v232 := range in.PhotographersTags {
				if v231 > 0 {
					out.RawByte(',')
				}
				out.String(string(v232))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pnns_groups_1\":"
		out.RawString(prefix)
		out.String(string(in.PnnsGroups1))
	}
	{
		const prefix string = ",\"pnns_groups_1_tags\":"
		out.RawString(prefix)
		if in.PnnsGroups1Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v233, v234 := range in.PnnsGroups1Tags {
				if v233 > 0 {
					out.RawByte(',')
				}
				out.String(string(v234))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"pnns_groups_2\":"
		out.RawString(prefix)
		out.String(string(in.PnnsGroups2))
	}
	{
		const prefix string = ",\"pnns_groups_2_tags\":"
		out.RawString(prefix)
		if in.PnnsGroups2Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v235, v236 := range in.PnnsGroups2Tags {
				if v235 > 0 {
					out.RawByte(',')
				}
				out.String(string(v236))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"popularity_key\":"
		out.RawString(prefix)
		out.Int64(int64(in.PopularityKey))
	}
	{
		const prefix string = ",\"popularity_tags\":"
		out.RawString(prefix)
		if in.PopularityTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v237, v238 := range in.PopularityTags {
				if v237 > 0 {
					out.RawByte(',')
				}
				out.String(string(v238))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"product_name\":"
		out.RawString(prefix)
		out.String(string(in.ProductName))
	}
	{
		const prefix string = ",\"product_name_en\":"
		out.RawString(prefix)
		out.String(string(in.ProductNameEn))
	}
	{
		const prefix string = ",\"product_name_fr\":"
		out.RawString(prefix)
		out.String(string(in.ProductNameFr))
	}
	{
		const prefix string = ",\"product_name_fr_debug_tags\":"
		out.RawString(prefix)
		if in.ProductNameFrDebugTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v239, v240 := range in.ProductNameFrDebugTags {
				if v239 > 0 {
					out.RawByte(',')
				}
				if m, ok := v240.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v240.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v240))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"product_quantity\":"
		out.RawString(prefix)
		out.String(string(in.ProductQuantity))
	}
	{
		const prefix string = ",\"purchase_places\":"
		out.RawString(prefix)
		out.String(string(in.PurchasePlaces))
	}
	{
		const prefix string = ",\"purchase_places_tags\":"
		out.RawString(prefix)
		if in.PurchasePlacesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v241, v242 := range in.PurchasePlacesTags {
				if v241 > 0 {
					out.RawByte(',')
				}
				if m, ok := v242.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v242.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v242))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix)
		out.String(string(in.Quantity))
	}
	{
		const prefix string = ",\"removed_countries_tags\":"
		out.RawString(prefix)
		if in.RemovedCountriesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v243, v244 := range in.RemovedCountriesTags {
				if v243 > 0 {
					out.RawByte(',')
				}
				if m, ok := v244.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v244.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v244))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"rev\":"
		out.RawString(prefix)
		out.Int(int(in.Rev))
	}
	{
		const prefix string = ",\"scans_n\":"
		out.RawString(prefix)
		out.Int(int(in.ScansN))
	}
	{
		const prefix string = ",\"selected_images\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode15(out, in.SelectedImages)
	}
	{
		const prefix string = ",\"serving_quantity\":"
		out.RawString(prefix)
		out.String(string(in.ServingQuantity))
	}
	{
		const prefix string = ",\"serving_size\":"
		out.RawString(prefix)
		out.String(string(in.ServingSize))
	}
	{
		const prefix string = ",\"sortkey\":"
		out.RawString(prefix)
		out.Int(int(in.Sortkey))
	}
	{
		const prefix string = ",\"states\":"
		out.RawString(prefix)
		out.String(string(in.States))
	}
	{
		const prefix string = ",\"states_hierarchy\":"
		out.RawString(prefix)
		if in.StatesHierarchy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v245, v246 := range in.StatesHierarchy {
				if v245 > 0 {
					out.RawByte(',')
				}
				out.String(string(v246))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"states_tags\":"
		out.RawString(prefix)
		if in.StatesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v247, v248 := range in.StatesTags {
				if v247 > 0 {
					out.RawByte(',')
				}
				out.String(string(v248))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"stores\":"
		out.RawString(prefix)
		out.String(string(in.Stores))
	}
	{
		const prefix string = ",\"stores_tags\":"
		out.RawString(prefix)
		if in.StoresTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v249, v250 := range in.StoresTags {
				if v249 > 0 {
					out.RawByte(',')
				}
				if m, ok := v250.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v250.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v250))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"teams\":"
		out.RawString(prefix)
		out.String(string(in.Teams))
	}
	{
		const prefix string = ",\"teams_tags\":"
		out.RawString(prefix)
		if in.TeamsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v251, v252 := range in.TeamsTags {
				if v251 > 0 {
					out.RawByte(',')
				}
				out.String(string(v252))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"traces\":"
		out.RawString(prefix)
		out.String(string(in.Traces))
	}
	{
		const prefix string = ",\"traces_from_ingredients\":"
		out.RawString(prefix)
		out.String(string(in.TracesFromIngredients))
	}
	{
		const prefix string = ",\"traces_from_user\":"
		out.RawString(prefix)
		out.String(string(in.TracesFromUser))
	}
	{
		const prefix string = ",\"traces_hierarchy\":"
		out.RawString(prefix)
		if in.TracesHierarchy == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v253, v254 := range in.TracesHierarchy {
				if v253 > 0 {
					out.RawByte(',')
				}
				if m, ok := v254.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v254.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v254))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"traces_lc\":"
		out.RawString(prefix)
		out.String(string(in.TracesLc))
	}
	{
		const prefix string = ",\"traces_tags\":"
		out.RawString(prefix)
		if in.TracesTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v255, v256 := range in.TracesTags {
				if v255 > 0 {
					out.RawByte(',')
				}
				if m, ok := v256.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v256.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v256))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"unique_scans_n\":"
		out.RawString(prefix)
		out.Int(int(in.UniqueScansN))
	}
	{
		const prefix string = ",\"unknown_ingredients_n\":"
		out.RawString(prefix)
		out.Int(int(in.UnknownIngredientsN))
	}
	{
		const prefix string = ",\"unknown_nutrients_tags\":"
		out.RawString(prefix)
		if in.UnknownNutrientsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v257, v258 := range in.UnknownNutrientsTags {
				if v257 > 0 {
					out.RawByte(',')
				}
				if m, ok := v258.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v258.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v258))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"update_key\":"
		out.RawString(prefix)
		out.String(string(in.UpdateKey))
	}
	{
		const prefix string = ",\"vitamins_prev_tags\":"
		out.RawString(prefix)
		if in.VitaminsPrevTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v259, v260 := range in.VitaminsPrevTags {
				if v259 > 0 {
					out.RawByte(',')
				}
				if m, ok := v260.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v260.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v260))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"vitamins_tags\":"
		out.RawString(prefix)
		if in.VitaminsTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v261, v262 := range in.VitaminsTags {
				if v261 > 0 {
					out.RawByte(',')
				}
				if m, ok := v262.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v262.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v262))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"weighers_tags\":"
		out.RawString(prefix)
		if in.WeighersTags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v263, v264 := range in.WeighersTags {
				if v263 > 0 {
					out.RawByte(',')
				}
				if m, ok := v264.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v264.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v264))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode15(in *jlexer.Lexer, out *struct {
	Front struct {
		Display struct {
			En string `json:"en"`
		} `json:"display"`
		Small struct {
			En string `json:"en"`
		} `json:"small"`
		Thumb struct {
			En string `json:"en"`
		} `json:"thumb"`
	} `json:"front"`
	Ingredients struct {
		Display struct {
			En string `json:"en"`
		} `json:"display"`
		Small struct {
			En string `json:"en"`
		} `json:"small"`
		Thumb struct {
			En string `json:"en"`
		} `json:"thumb"`
	} `json:"ingredients"`
	Nutrition struct {
		Display struct {
			En string `json:"en"`
		} `json:"display"`
		Small struct {
			En string `json:"en"`
		} `json:"small"`
		Thumb struct {
			En string `json:"en"`
		} `json:"thumb"`
	} `json:"nutrition"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "front":
			easyjsonC4ff3609Decode16(in, &out.Front)
		case "ingredients":
			easyjsonC4ff3609Decode16(in, &out.Ingredients)
		case "nutrition":
			easyjsonC4ff3609Decode16(in, &out.Nutrition)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode15(out *jwriter.Writer, in struct {
	Front struct {
		Display struct {
			En string `json:"en"`
		} `json:"display"`
		Small struct {
			En string `json:"en"`
		} `json:"small"`
		Thumb struct {
			En string `json:"en"`
		} `json:"thumb"`
	} `json:"front"`
	Ingredients struct {
		Display struct {
			En string `json:"en"`
		} `json:"display"`
		Small struct {
			En string `json:"en"`
		} `json:"small"`
		Thumb struct {
			En string `json:"en"`
		} `json:"thumb"`
	} `json:"ingredients"`
	Nutrition struct {
		Display struct {
			En string `json:"en"`
		} `json:"display"`
		Small struct {
			En string `json:"en"`
		} `json:"small"`
		Thumb struct {
			En string `json:"en"`
		} `json:"thumb"`
	} `json:"nutrition"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"front\":"
		out.RawString(prefix[1:])
		easyjsonC4ff3609Encode16(out, in.Front)
	}
	{
		const prefix string = ",\"ingredients\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode16(out, in.Ingredients)
	}
	{
		const prefix string = ",\"nutrition\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode16(out, in.Nutrition)
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode16(in *jlexer.Lexer, out *struct {
	Display struct {
		En string `json:"en"`
	} `json:"display"`
	Small struct {
		En string `json:"en"`
	} `json:"small"`
	Thumb struct {
		En string `json:"en"`
	} `json:"thumb"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "display":
			easyjsonC4ff3609Decode17(in, &out.Display)
		case "small":
			easyjsonC4ff3609Decode17(in, &out.Small)
		case "thumb":
			easyjsonC4ff3609Decode17(in, &out.Thumb)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode16(out *jwriter.Writer, in struct {
	Display struct {
		En string `json:"en"`
	} `json:"display"`
	Small struct {
		En string `json:"en"`
	} `json:"small"`
	Thumb struct {
		En string `json:"en"`
	} `json:"thumb"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"display\":"
		out.RawString(prefix[1:])
		easyjsonC4ff3609Encode17(out, in.Display)
	}
	{
		const prefix string = ",\"small\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode17(out, in.Small)
	}
	{
		const prefix string = ",\"thumb\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode17(out, in.Thumb)
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode17(in *jlexer.Lexer, out *struct {
	En string `json:"en"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "en":
			out.En = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode17(out *jwriter.Writer, in struct {
	En string `json:"en"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"en\":"
		out.RawString(prefix[1:])
		out.String(string(in.En))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode14(in *jlexer.Lexer, out *struct {
	Material string `json:"material"`
	Shape    string `json:"shape"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "material":
			out.Material = string(in.String())
		case "shape":
			out.Shape = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode14(out *jwriter.Writer, in struct {
	Material string `json:"material"`
	Shape    string `json:"shape"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix[1:])
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"shape\":"
		out.RawString(prefix)
		out.String(string(in.Shape))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode13(in *jlexer.Lexer, out *struct {
	Energy                                         int     `json:"energy"`
	EnergyPoints                                   int     `json:"energy_points"`
	EnergyValue                                    int     `json:"energy_value"`
	Fiber                                          float64 `json:"fiber"`
	FiberPoints                                    int     `json:"fiber_points"`
	FiberValue                                     float64 `json:"fiber_value"`
	FruitsVegetablesNutsColzaWalnutOliveOils       int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils"`
	FruitsVegetablesNutsColzaWalnutOliveOilsPoints int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils_points"`
	FruitsVegetablesNutsColzaWalnutOliveOilsValue  int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils_value"`
	Grade                                          string  `json:"grade"`
	IsBeverage                                     int     `json:"is_beverage"`
	IsCheese                                       int     `json:"is_cheese"`
	IsFat                                          int     `json:"is_fat"`
	IsWater                                        int     `json:"is_water"`
	NegativePoints                                 int     `json:"negative_points"`
	PositivePoints                                 int     `json:"positive_points"`
	Proteins                                       float64 `json:"proteins"`
	ProteinsPoints                                 int     `json:"proteins_points"`
	ProteinsValue                                  float64 `json:"proteins_value"`
	SaturatedFat                                   float64 `json:"saturated_fat"`
	SaturatedFatPoints                             int     `json:"saturated_fat_points"`
	SaturatedFatRatio                              float64 `json:"saturated_fat_ratio"`
	SaturatedFatRatioPoints                        int     `json:"saturated_fat_ratio_points"`
	SaturatedFatRatioValue                         float64 `json:"saturated_fat_ratio_value"`
	SaturatedFatValue                              float64 `json:"saturated_fat_value"`
	Score                                          int     `json:"score"`
	Sodium                                         int     `json:"sodium"`
	SodiumPoints                                   int     `json:"sodium_points"`
	SodiumValue                                    int     `json:"sodium_value"`
	Sugars                                         float64 `json:"sugars"`
	SugarsPoints                                   int     `json:"sugars_points"`
	SugarsValue                                    float64 `json:"sugars_value"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "energy":
			out.Energy = int(in.Int())
		case "energy_points":
			out.EnergyPoints = int(in.Int())
		case "energy_value":
			out.EnergyValue = int(in.Int())
		case "fiber":
			out.Fiber = float64(in.Float64())
		case "fiber_points":
			out.FiberPoints = int(in.Int())
		case "fiber_value":
			out.FiberValue = float64(in.Float64())
		case "fruits_vegetables_nuts_colza_walnut_olive_oils":
			out.FruitsVegetablesNutsColzaWalnutOliveOils = int(in.Int())
		case "fruits_vegetables_nuts_colza_walnut_olive_oils_points":
			out.FruitsVegetablesNutsColzaWalnutOliveOilsPoints = int(in.Int())
		case "fruits_vegetables_nuts_colza_walnut_olive_oils_value":
			out.FruitsVegetablesNutsColzaWalnutOliveOilsValue = int(in.Int())
		case "grade":
			out.Grade = string(in.String())
		case "is_beverage":
			out.IsBeverage = int(in.Int())
		case "is_cheese":
			out.IsCheese = int(in.Int())
		case "is_fat":
			out.IsFat = int(in.Int())
		case "is_water":
			out.IsWater = int(in.Int())
		case "negative_points":
			out.NegativePoints = int(in.Int())
		case "positive_points":
			out.PositivePoints = int(in.Int())
		case "proteins":
			out.Proteins = float64(in.Float64())
		case "proteins_points":
			out.ProteinsPoints = int(in.Int())
		case "proteins_value":
			out.ProteinsValue = float64(in.Float64())
		case "saturated_fat":
			out.SaturatedFat = float64(in.Float64())
		case "saturated_fat_points":
			out.SaturatedFatPoints = int(in.Int())
		case "saturated_fat_ratio":
			out.SaturatedFatRatio = float64(in.Float64())
		case "saturated_fat_ratio_points":
			out.SaturatedFatRatioPoints = int(in.Int())
		case "saturated_fat_ratio_value":
			out.SaturatedFatRatioValue = float64(in.Float64())
		case "saturated_fat_value":
			out.SaturatedFatValue = float64(in.Float64())
		case "score":
			out.Score = int(in.Int())
		case "sodium":
			out.Sodium = int(in.Int())
		case "sodium_points":
			out.SodiumPoints = int(in.Int())
		case "sodium_value":
			out.SodiumValue = int(in.Int())
		case "sugars":
			out.Sugars = float64(in.Float64())
		case "sugars_points":
			out.SugarsPoints = int(in.Int())
		case "sugars_value":
			out.SugarsValue = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode13(out *jwriter.Writer, in struct {
	Energy                                         int     `json:"energy"`
	EnergyPoints                                   int     `json:"energy_points"`
	EnergyValue                                    int     `json:"energy_value"`
	Fiber                                          float64 `json:"fiber"`
	FiberPoints                                    int     `json:"fiber_points"`
	FiberValue                                     float64 `json:"fiber_value"`
	FruitsVegetablesNutsColzaWalnutOliveOils       int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils"`
	FruitsVegetablesNutsColzaWalnutOliveOilsPoints int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils_points"`
	FruitsVegetablesNutsColzaWalnutOliveOilsValue  int     `json:"fruits_vegetables_nuts_colza_walnut_olive_oils_value"`
	Grade                                          string  `json:"grade"`
	IsBeverage                                     int     `json:"is_beverage"`
	IsCheese                                       int     `json:"is_cheese"`
	IsFat                                          int     `json:"is_fat"`
	IsWater                                        int     `json:"is_water"`
	NegativePoints                                 int     `json:"negative_points"`
	PositivePoints                                 int     `json:"positive_points"`
	Proteins                                       float64 `json:"proteins"`
	ProteinsPoints                                 int     `json:"proteins_points"`
	ProteinsValue                                  float64 `json:"proteins_value"`
	SaturatedFat                                   float64 `json:"saturated_fat"`
	SaturatedFatPoints                             int     `json:"saturated_fat_points"`
	SaturatedFatRatio                              float64 `json:"saturated_fat_ratio"`
	SaturatedFatRatioPoints                        int     `json:"saturated_fat_ratio_points"`
	SaturatedFatRatioValue                         float64 `json:"saturated_fat_ratio_value"`
	SaturatedFatValue                              float64 `json:"saturated_fat_value"`
	Score                                          int     `json:"score"`
	Sodium                                         int     `json:"sodium"`
	SodiumPoints                                   int     `json:"sodium_points"`
	SodiumValue                                    int     `json:"sodium_value"`
	Sugars                                         float64 `json:"sugars"`
	SugarsPoints                                   int     `json:"sugars_points"`
	SugarsValue                                    float64 `json:"sugars_value"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"energy\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Energy))
	}
	{
		const prefix string = ",\"energy_points\":"
		out.RawString(prefix)
		out.Int(int(in.EnergyPoints))
	}
	{
		const prefix string = ",\"energy_value\":"
		out.RawString(prefix)
		out.Int(int(in.EnergyValue))
	}
	{
		const prefix string = ",\"fiber\":"
		out.RawString(prefix)
		out.Float64(float64(in.Fiber))
	}
	{
		const prefix string = ",\"fiber_points\":"
		out.RawString(prefix)
		out.Int(int(in.FiberPoints))
	}
	{
		const prefix string = ",\"fiber_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.FiberValue))
	}
	{
		const prefix string = ",\"fruits_vegetables_nuts_colza_walnut_olive_oils\":"
		out.RawString(prefix)
		out.Int(int(in.FruitsVegetablesNutsColzaWalnutOliveOils))
	}
	{
		const prefix string = ",\"fruits_vegetables_nuts_colza_walnut_olive_oils_points\":"
		out.RawString(prefix)
		out.Int(int(in.FruitsVegetablesNutsColzaWalnutOliveOilsPoints))
	}
	{
		const prefix string = ",\"fruits_vegetables_nuts_colza_walnut_olive_oils_value\":"
		out.RawString(prefix)
		out.Int(int(in.FruitsVegetablesNutsColzaWalnutOliveOilsValue))
	}
	{
		const prefix string = ",\"grade\":"
		out.RawString(prefix)
		out.String(string(in.Grade))
	}
	{
		const prefix string = ",\"is_beverage\":"
		out.RawString(prefix)
		out.Int(int(in.IsBeverage))
	}
	{
		const prefix string = ",\"is_cheese\":"
		out.RawString(prefix)
		out.Int(int(in.IsCheese))
	}
	{
		const prefix string = ",\"is_fat\":"
		out.RawString(prefix)
		out.Int(int(in.IsFat))
	}
	{
		const prefix string = ",\"is_water\":"
		out.RawString(prefix)
		out.Int(int(in.IsWater))
	}
	{
		const prefix string = ",\"negative_points\":"
		out.RawString(prefix)
		out.Int(int(in.NegativePoints))
	}
	{
		const prefix string = ",\"positive_points\":"
		out.RawString(prefix)
		out.Int(int(in.PositivePoints))
	}
	{
		const prefix string = ",\"proteins\":"
		out.RawString(prefix)
		out.Float64(float64(in.Proteins))
	}
	{
		const prefix string = ",\"proteins_points\":"
		out.RawString(prefix)
		out.Int(int(in.ProteinsPoints))
	}
	{
		const prefix string = ",\"proteins_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.ProteinsValue))
	}
	{
		const prefix string = ",\"saturated_fat\":"
		out.RawString(prefix)
		out.Float64(float64(in.SaturatedFat))
	}
	{
		const prefix string = ",\"saturated_fat_points\":"
		out.RawString(prefix)
		out.Int(int(in.SaturatedFatPoints))
	}
	{
		const prefix string = ",\"saturated_fat_ratio\":"
		out.RawString(prefix)
		out.Float64(float64(in.SaturatedFatRatio))
	}
	{
		const prefix string = ",\"saturated_fat_ratio_points\":"
		out.RawString(prefix)
		out.Int(int(in.SaturatedFatRatioPoints))
	}
	{
		const prefix string = ",\"saturated_fat_ratio_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.SaturatedFatRatioValue))
	}
	{
		const prefix string = ",\"saturated_fat_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.SaturatedFatValue))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	{
		const prefix string = ",\"sodium\":"
		out.RawString(prefix)
		out.Int(int(in.Sodium))
	}
	{
		const prefix string = ",\"sodium_points\":"
		out.RawString(prefix)
		out.Int(int(in.SodiumPoints))
	}
	{
		const prefix string = ",\"sodium_value\":"
		out.RawString(prefix)
		out.Int(int(in.SodiumValue))
	}
	{
		const prefix string = ",\"sugars\":"
		out.RawString(prefix)
		out.Float64(float64(in.Sugars))
	}
	{
		const prefix string = ",\"sugars_points\":"
		out.RawString(prefix)
		out.Int(int(in.SugarsPoints))
	}
	{
		const prefix string = ",\"sugars_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.SugarsValue))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode12(in *jlexer.Lexer, out *struct {
	Carbohydrates                                      int     `json:"carbohydrates"`
	Carbohydrates100G                                  int     `json:"carbohydrates_100g"`
	CarbohydratesServing                               float64 `json:"carbohydrates_serving"`
	CarbohydratesUnit                                  string  `json:"carbohydrates_unit"`
	CarbohydratesValue                                 int     `json:"carbohydrates_value"`
	CarbonFootprintFromKnownIngredients100G            float64 `json:"carbon-footprint-from-known-ingredients_100g"`
	CarbonFootprintFromKnownIngredientsProduct         float64 `json:"carbon-footprint-from-known-ingredients_product"`
	CarbonFootprintFromKnownIngredientsServing         float64 `json:"carbon-footprint-from-known-ingredients_serving"`
	Energy                                             int     `json:"energy"`
	EnergyKcal                                         int     `json:"energy-kcal"`
	EnergyKcal100G                                     int     `json:"energy-kcal_100g"`
	EnergyKcalServing                                  float64 `json:"energy-kcal_serving"`
	EnergyKcalUnit                                     string  `json:"energy-kcal_unit"`
	EnergyKcalValue                                    int     `json:"energy-kcal_value"`
	EnergyKcalValueComputed                            float64 `json:"energy-kcal_value_computed"`
	EnergyKj                                           int     `json:"energy-kj"`
	EnergyKj100G                                       int     `json:"energy-kj_100g"`
	EnergyKjServing                                    int     `json:"energy-kj_serving"`
	EnergyKjUnit                                       string  `json:"energy-kj_unit"`
	EnergyKjValue                                      int     `json:"energy-kj_value"`
	EnergyKjValueComputed                              float64 `json:"energy-kj_value_computed"`
	Energy100G                                         int     `json:"energy_100g"`
	EnergyServing                                      int     `json:"energy_serving"`
	EnergyUnit                                         string  `json:"energy_unit"`
	EnergyValue                                        int     `json:"energy_value"`
	Fat                                                int     `json:"fat"`
	Fat100G                                            int     `json:"fat_100g"`
	FatServing                                         float64 `json:"fat_serving"`
	FatUnit                                            string  `json:"fat_unit"`
	FatValue                                           int     `json:"fat_value"`
	Fiber                                              float64 `json:"fiber"`
	Fiber100G                                          float64 `json:"fiber_100g"`
	FiberServing                                       float64 `json:"fiber_serving"`
	FiberUnit                                          string  `json:"fiber_unit"`
	FiberValue                                         float64 `json:"fiber_value"`
	FruitsVegetablesNutsEstimateFromIngredients100G    int     `json:"fruits-vegetables-nuts-estimate-from-ingredients_100g"`
	FruitsVegetablesNutsEstimateFromIngredientsServing int     `json:"fruits-vegetables-nuts-estimate-from-ingredients_serving"`
	NovaGroup                                          int     `json:"nova-group"`
	NovaGroup100G                                      int     `json:"nova-group_100g"`
	NovaGroupServing                                   int     `json:"nova-group_serving"`
	NutritionScoreFr                                   int     `json:"nutrition-score-fr"`
	NutritionScoreFr100G                               int     `json:"nutrition-score-fr_100g"`
	Proteins                                           float64 `json:"proteins"`
	Proteins100G                                       float64 `json:"proteins_100g"`
	ProteinsServing                                    float64 `json:"proteins_serving"`
	ProteinsUnit                                       string  `json:"proteins_unit"`
	ProteinsValue                                      float64 `json:"proteins_value"`
	Salt                                               float64 `json:"salt"`
	Salt100G                                           float64 `json:"salt_100g"`
	SaltServing                                        float64 `json:"salt_serving"`
	SaltUnit                                           string  `json:"salt_unit"`
	SaltValue                                          float64 `json:"salt_value"`
	SaturatedFat                                       float64 `json:"saturated-fat"`
	SaturatedFat100G                                   float64 `json:"saturated-fat_100g"`
	SaturatedFatServing                                float64 `json:"saturated-fat_serving"`
	SaturatedFatUnit                                   string  `json:"saturated-fat_unit"`
	SaturatedFatValue                                  float64 `json:"saturated-fat_value"`
	Sodium                                             float64 `json:"sodium"`
	Sodium100G                                         float64 `json:"sodium_100g"`
	SodiumServing                                      float64 `json:"sodium_serving"`
	SodiumUnit                                         string  `json:"sodium_unit"`
	SodiumValue                                        float64 `json:"sodium_value"`
	Sugars                                             float64 `json:"sugars"`
	Sugars100G                                         float64 `json:"sugars_100g"`
	SugarsServing                                      int     `json:"sugars_serving"`
	SugarsUnit                                         string  `json:"sugars_unit"`
	SugarsValue                                        float64 `json:"sugars_value"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "carbohydrates":
			out.Carbohydrates = int(in.Int())
		case "carbohydrates_100g":
			out.Carbohydrates100G = int(in.Int())
		case "carbohydrates_serving":
			out.CarbohydratesServing = float64(in.Float64())
		case "carbohydrates_unit":
			out.CarbohydratesUnit = string(in.String())
		case "carbohydrates_value":
			out.CarbohydratesValue = int(in.Int())
		case "carbon-footprint-from-known-ingredients_100g":
			out.CarbonFootprintFromKnownIngredients100G = float64(in.Float64())
		case "carbon-footprint-from-known-ingredients_product":
			out.CarbonFootprintFromKnownIngredientsProduct = float64(in.Float64())
		case "carbon-footprint-from-known-ingredients_serving":
			out.CarbonFootprintFromKnownIngredientsServing = float64(in.Float64())
		case "energy":
			out.Energy = int(in.Int())
		case "energy-kcal":
			out.EnergyKcal = int(in.Int())
		case "energy-kcal_100g":
			out.EnergyKcal100G = int(in.Int())
		case "energy-kcal_serving":
			out.EnergyKcalServing = float64(in.Float64())
		case "energy-kcal_unit":
			out.EnergyKcalUnit = string(in.String())
		case "energy-kcal_value":
			out.EnergyKcalValue = int(in.Int())
		case "energy-kcal_value_computed":
			out.EnergyKcalValueComputed = float64(in.Float64())
		case "energy-kj":
			out.EnergyKj = int(in.Int())
		case "energy-kj_100g":
			out.EnergyKj100G = int(in.Int())
		case "energy-kj_serving":
			out.EnergyKjServing = int(in.Int())
		case "energy-kj_unit":
			out.EnergyKjUnit = string(in.String())
		case "energy-kj_value":
			out.EnergyKjValue = int(in.Int())
		case "energy-kj_value_computed":
			out.EnergyKjValueComputed = float64(in.Float64())
		case "energy_100g":
			out.Energy100G = int(in.Int())
		case "energy_serving":
			out.EnergyServing = int(in.Int())
		case "energy_unit":
			out.EnergyUnit = string(in.String())
		case "energy_value":
			out.EnergyValue = int(in.Int())
		case "fat":
			out.Fat = int(in.Int())
		case "fat_100g":
			out.Fat100G = int(in.Int())
		case "fat_serving":
			out.FatServing = float64(in.Float64())
		case "fat_unit":
			out.FatUnit = string(in.String())
		case "fat_value":
			out.FatValue = int(in.Int())
		case "fiber":
			out.Fiber = float64(in.Float64())
		case "fiber_100g":
			out.Fiber100G = float64(in.Float64())
		case "fiber_serving":
			out.FiberServing = float64(in.Float64())
		case "fiber_unit":
			out.FiberUnit = string(in.String())
		case "fiber_value":
			out.FiberValue = float64(in.Float64())
		case "fruits-vegetables-nuts-estimate-from-ingredients_100g":
			out.FruitsVegetablesNutsEstimateFromIngredients100G = int(in.Int())
		case "fruits-vegetables-nuts-estimate-from-ingredients_serving":
			out.FruitsVegetablesNutsEstimateFromIngredientsServing = int(in.Int())
		case "nova-group":
			out.NovaGroup = int(in.Int())
		case "nova-group_100g":
			out.NovaGroup100G = int(in.Int())
		case "nova-group_serving":
			out.NovaGroupServing = int(in.Int())
		case "nutrition-score-fr":
			out.NutritionScoreFr = int(in.Int())
		case "nutrition-score-fr_100g":
			out.NutritionScoreFr100G = int(in.Int())
		case "proteins":
			out.Proteins = float64(in.Float64())
		case "proteins_100g":
			out.Proteins100G = float64(in.Float64())
		case "proteins_serving":
			out.ProteinsServing = float64(in.Float64())
		case "proteins_unit":
			out.ProteinsUnit = string(in.String())
		case "proteins_value":
			out.ProteinsValue = float64(in.Float64())
		case "salt":
			out.Salt = float64(in.Float64())
		case "salt_100g":
			out.Salt100G = float64(in.Float64())
		case "salt_serving":
			out.SaltServing = float64(in.Float64())
		case "salt_unit":
			out.SaltUnit = string(in.String())
		case "salt_value":
			out.SaltValue = float64(in.Float64())
		case "saturated-fat":
			out.SaturatedFat = float64(in.Float64())
		case "saturated-fat_100g":
			out.SaturatedFat100G = float64(in.Float64())
		case "saturated-fat_serving":
			out.SaturatedFatServing = float64(in.Float64())
		case "saturated-fat_unit":
			out.SaturatedFatUnit = string(in.String())
		case "saturated-fat_value":
			out.SaturatedFatValue = float64(in.Float64())
		case "sodium":
			out.Sodium = float64(in.Float64())
		case "sodium_100g":
			out.Sodium100G = float64(in.Float64())
		case "sodium_serving":
			out.SodiumServing = float64(in.Float64())
		case "sodium_unit":
			out.SodiumUnit = string(in.String())
		case "sodium_value":
			out.SodiumValue = float64(in.Float64())
		case "sugars":
			out.Sugars = float64(in.Float64())
		case "sugars_100g":
			out.Sugars100G = float64(in.Float64())
		case "sugars_serving":
			out.SugarsServing = int(in.Int())
		case "sugars_unit":
			out.SugarsUnit = string(in.String())
		case "sugars_value":
			out.SugarsValue = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode12(out *jwriter.Writer, in struct {
	Carbohydrates                                      int     `json:"carbohydrates"`
	Carbohydrates100G                                  int     `json:"carbohydrates_100g"`
	CarbohydratesServing                               float64 `json:"carbohydrates_serving"`
	CarbohydratesUnit                                  string  `json:"carbohydrates_unit"`
	CarbohydratesValue                                 int     `json:"carbohydrates_value"`
	CarbonFootprintFromKnownIngredients100G            float64 `json:"carbon-footprint-from-known-ingredients_100g"`
	CarbonFootprintFromKnownIngredientsProduct         float64 `json:"carbon-footprint-from-known-ingredients_product"`
	CarbonFootprintFromKnownIngredientsServing         float64 `json:"carbon-footprint-from-known-ingredients_serving"`
	Energy                                             int     `json:"energy"`
	EnergyKcal                                         int     `json:"energy-kcal"`
	EnergyKcal100G                                     int     `json:"energy-kcal_100g"`
	EnergyKcalServing                                  float64 `json:"energy-kcal_serving"`
	EnergyKcalUnit                                     string  `json:"energy-kcal_unit"`
	EnergyKcalValue                                    int     `json:"energy-kcal_value"`
	EnergyKcalValueComputed                            float64 `json:"energy-kcal_value_computed"`
	EnergyKj                                           int     `json:"energy-kj"`
	EnergyKj100G                                       int     `json:"energy-kj_100g"`
	EnergyKjServing                                    int     `json:"energy-kj_serving"`
	EnergyKjUnit                                       string  `json:"energy-kj_unit"`
	EnergyKjValue                                      int     `json:"energy-kj_value"`
	EnergyKjValueComputed                              float64 `json:"energy-kj_value_computed"`
	Energy100G                                         int     `json:"energy_100g"`
	EnergyServing                                      int     `json:"energy_serving"`
	EnergyUnit                                         string  `json:"energy_unit"`
	EnergyValue                                        int     `json:"energy_value"`
	Fat                                                int     `json:"fat"`
	Fat100G                                            int     `json:"fat_100g"`
	FatServing                                         float64 `json:"fat_serving"`
	FatUnit                                            string  `json:"fat_unit"`
	FatValue                                           int     `json:"fat_value"`
	Fiber                                              float64 `json:"fiber"`
	Fiber100G                                          float64 `json:"fiber_100g"`
	FiberServing                                       float64 `json:"fiber_serving"`
	FiberUnit                                          string  `json:"fiber_unit"`
	FiberValue                                         float64 `json:"fiber_value"`
	FruitsVegetablesNutsEstimateFromIngredients100G    int     `json:"fruits-vegetables-nuts-estimate-from-ingredients_100g"`
	FruitsVegetablesNutsEstimateFromIngredientsServing int     `json:"fruits-vegetables-nuts-estimate-from-ingredients_serving"`
	NovaGroup                                          int     `json:"nova-group"`
	NovaGroup100G                                      int     `json:"nova-group_100g"`
	NovaGroupServing                                   int     `json:"nova-group_serving"`
	NutritionScoreFr                                   int     `json:"nutrition-score-fr"`
	NutritionScoreFr100G                               int     `json:"nutrition-score-fr_100g"`
	Proteins                                           float64 `json:"proteins"`
	Proteins100G                                       float64 `json:"proteins_100g"`
	ProteinsServing                                    float64 `json:"proteins_serving"`
	ProteinsUnit                                       string  `json:"proteins_unit"`
	ProteinsValue                                      float64 `json:"proteins_value"`
	Salt                                               float64 `json:"salt"`
	Salt100G                                           float64 `json:"salt_100g"`
	SaltServing                                        float64 `json:"salt_serving"`
	SaltUnit                                           string  `json:"salt_unit"`
	SaltValue                                          float64 `json:"salt_value"`
	SaturatedFat                                       float64 `json:"saturated-fat"`
	SaturatedFat100G                                   float64 `json:"saturated-fat_100g"`
	SaturatedFatServing                                float64 `json:"saturated-fat_serving"`
	SaturatedFatUnit                                   string  `json:"saturated-fat_unit"`
	SaturatedFatValue                                  float64 `json:"saturated-fat_value"`
	Sodium                                             float64 `json:"sodium"`
	Sodium100G                                         float64 `json:"sodium_100g"`
	SodiumServing                                      float64 `json:"sodium_serving"`
	SodiumUnit                                         string  `json:"sodium_unit"`
	SodiumValue                                        float64 `json:"sodium_value"`
	Sugars                                             float64 `json:"sugars"`
	Sugars100G                                         float64 `json:"sugars_100g"`
	SugarsServing                                      int     `json:"sugars_serving"`
	SugarsUnit                                         string  `json:"sugars_unit"`
	SugarsValue                                        float64 `json:"sugars_value"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"carbohydrates\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Carbohydrates))
	}
	{
		const prefix string = ",\"carbohydrates_100g\":"
		out.RawString(prefix)
		out.Int(int(in.Carbohydrates100G))
	}
	{
		const prefix string = ",\"carbohydrates_serving\":"
		out.RawString(prefix)
		out.Float64(float64(in.CarbohydratesServing))
	}
	{
		const prefix string = ",\"carbohydrates_unit\":"
		out.RawString(prefix)
		out.String(string(in.CarbohydratesUnit))
	}
	{
		const prefix string = ",\"carbohydrates_value\":"
		out.RawString(prefix)
		out.Int(int(in.CarbohydratesValue))
	}
	{
		const prefix string = ",\"carbon-footprint-from-known-ingredients_100g\":"
		out.RawString(prefix)
		out.Float64(float64(in.CarbonFootprintFromKnownIngredients100G))
	}
	{
		const prefix string = ",\"carbon-footprint-from-known-ingredients_product\":"
		out.RawString(prefix)
		out.Float64(float64(in.CarbonFootprintFromKnownIngredientsProduct))
	}
	{
		const prefix string = ",\"carbon-footprint-from-known-ingredients_serving\":"
		out.RawString(prefix)
		out.Float64(float64(in.CarbonFootprintFromKnownIngredientsServing))
	}
	{
		const prefix string = ",\"energy\":"
		out.RawString(prefix)
		out.Int(int(in.Energy))
	}
	{
		const prefix string = ",\"energy-kcal\":"
		out.RawString(prefix)
		out.Int(int(in.EnergyKcal))
	}
	{
		const prefix string = ",\"energy-kcal_100g\":"
		out.RawString(prefix)
		out.Int(int(in.EnergyKcal100G))
	}
	{
		const prefix string = ",\"energy-kcal_serving\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnergyKcalServing))
	}
	{
		const prefix string = ",\"energy-kcal_unit\":"
		out.RawString(prefix)
		out.String(string(in.EnergyKcalUnit))
	}
	{
		const prefix string = ",\"energy-kcal_value\":"
		out.RawString(prefix)
		out.Int(int(in.EnergyKcalValue))
	}
	{
		const prefix string = ",\"energy-kcal_value_computed\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnergyKcalValueComputed))
	}
	{
		const prefix string = ",\"energy-kj\":"
		out.RawString(prefix)
		out.Int(int(in.EnergyKj))
	}
	{
		const prefix string = ",\"energy-kj_100g\":"
		out.RawString(prefix)
		out.Int(int(in.EnergyKj100G))
	}
	{
		const prefix string = ",\"energy-kj_serving\":"
		out.RawString(prefix)
		out.Int(int(in.EnergyKjServing))
	}
	{
		const prefix string = ",\"energy-kj_unit\":"
		out.RawString(prefix)
		out.String(string(in.EnergyKjUnit))
	}
	{
		const prefix string = ",\"energy-kj_value\":"
		out.RawString(prefix)
		out.Int(int(in.EnergyKjValue))
	}
	{
		const prefix string = ",\"energy-kj_value_computed\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnergyKjValueComputed))
	}
	{
		const prefix string = ",\"energy_100g\":"
		out.RawString(prefix)
		out.Int(int(in.Energy100G))
	}
	{
		const prefix string = ",\"energy_serving\":"
		out.RawString(prefix)
		out.Int(int(in.EnergyServing))
	}
	{
		const prefix string = ",\"energy_unit\":"
		out.RawString(prefix)
		out.String(string(in.EnergyUnit))
	}
	{
		const prefix string = ",\"energy_value\":"
		out.RawString(prefix)
		out.Int(int(in.EnergyValue))
	}
	{
		const prefix string = ",\"fat\":"
		out.RawString(prefix)
		out.Int(int(in.Fat))
	}
	{
		const prefix string = ",\"fat_100g\":"
		out.RawString(prefix)
		out.Int(int(in.Fat100G))
	}
	{
		const prefix string = ",\"fat_serving\":"
		out.RawString(prefix)
		out.Float64(float64(in.FatServing))
	}
	{
		const prefix string = ",\"fat_unit\":"
		out.RawString(prefix)
		out.String(string(in.FatUnit))
	}
	{
		const prefix string = ",\"fat_value\":"
		out.RawString(prefix)
		out.Int(int(in.FatValue))
	}
	{
		const prefix string = ",\"fiber\":"
		out.RawString(prefix)
		out.Float64(float64(in.Fiber))
	}
	{
		const prefix string = ",\"fiber_100g\":"
		out.RawString(prefix)
		out.Float64(float64(in.Fiber100G))
	}
	{
		const prefix string = ",\"fiber_serving\":"
		out.RawString(prefix)
		out.Float64(float64(in.FiberServing))
	}
	{
		const prefix string = ",\"fiber_unit\":"
		out.RawString(prefix)
		out.String(string(in.FiberUnit))
	}
	{
		const prefix string = ",\"fiber_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.FiberValue))
	}
	{
		const prefix string = ",\"fruits-vegetables-nuts-estimate-from-ingredients_100g\":"
		out.RawString(prefix)
		out.Int(int(in.FruitsVegetablesNutsEstimateFromIngredients100G))
	}
	{
		const prefix string = ",\"fruits-vegetables-nuts-estimate-from-ingredients_serving\":"
		out.RawString(prefix)
		out.Int(int(in.FruitsVegetablesNutsEstimateFromIngredientsServing))
	}
	{
		const prefix string = ",\"nova-group\":"
		out.RawString(prefix)
		out.Int(int(in.NovaGroup))
	}
	{
		const prefix string = ",\"nova-group_100g\":"
		out.RawString(prefix)
		out.Int(int(in.NovaGroup100G))
	}
	{
		const prefix string = ",\"nova-group_serving\":"
		out.RawString(prefix)
		out.Int(int(in.NovaGroupServing))
	}
	{
		const prefix string = ",\"nutrition-score-fr\":"
		out.RawString(prefix)
		out.Int(int(in.NutritionScoreFr))
	}
	{
		const prefix string = ",\"nutrition-score-fr_100g\":"
		out.RawString(prefix)
		out.Int(int(in.NutritionScoreFr100G))
	}
	{
		const prefix string = ",\"proteins\":"
		out.RawString(prefix)
		out.Float64(float64(in.Proteins))
	}
	{
		const prefix string = ",\"proteins_100g\":"
		out.RawString(prefix)
		out.Float64(float64(in.Proteins100G))
	}
	{
		const prefix string = ",\"proteins_serving\":"
		out.RawString(prefix)
		out.Float64(float64(in.ProteinsServing))
	}
	{
		const prefix string = ",\"proteins_unit\":"
		out.RawString(prefix)
		out.String(string(in.ProteinsUnit))
	}
	{
		const prefix string = ",\"proteins_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.ProteinsValue))
	}
	{
		const prefix string = ",\"salt\":"
		out.RawString(prefix)
		out.Float64(float64(in.Salt))
	}
	{
		const prefix string = ",\"salt_100g\":"
		out.RawString(prefix)
		out.Float64(float64(in.Salt100G))
	}
	{
		const prefix string = ",\"salt_serving\":"
		out.RawString(prefix)
		out.Float64(float64(in.SaltServing))
	}
	{
		const prefix string = ",\"salt_unit\":"
		out.RawString(prefix)
		out.String(string(in.SaltUnit))
	}
	{
		const prefix string = ",\"salt_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.SaltValue))
	}
	{
		const prefix string = ",\"saturated-fat\":"
		out.RawString(prefix)
		out.Float64(float64(in.SaturatedFat))
	}
	{
		const prefix string = ",\"saturated-fat_100g\":"
		out.RawString(prefix)
		out.Float64(float64(in.SaturatedFat100G))
	}
	{
		const prefix string = ",\"saturated-fat_serving\":"
		out.RawString(prefix)
		out.Float64(float64(in.SaturatedFatServing))
	}
	{
		const prefix string = ",\"saturated-fat_unit\":"
		out.RawString(prefix)
		out.String(string(in.SaturatedFatUnit))
	}
	{
		const prefix string = ",\"saturated-fat_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.SaturatedFatValue))
	}
	{
		const prefix string = ",\"sodium\":"
		out.RawString(prefix)
		out.Float64(float64(in.Sodium))
	}
	{
		const prefix string = ",\"sodium_100g\":"
		out.RawString(prefix)
		out.Float64(float64(in.Sodium100G))
	}
	{
		const prefix string = ",\"sodium_serving\":"
		out.RawString(prefix)
		out.Float64(float64(in.SodiumServing))
	}
	{
		const prefix string = ",\"sodium_unit\":"
		out.RawString(prefix)
		out.String(string(in.SodiumUnit))
	}
	{
		const prefix string = ",\"sodium_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.SodiumValue))
	}
	{
		const prefix string = ",\"sugars\":"
		out.RawString(prefix)
		out.Float64(float64(in.Sugars))
	}
	{
		const prefix string = ",\"sugars_100g\":"
		out.RawString(prefix)
		out.Float64(float64(in.Sugars100G))
	}
	{
		const prefix string = ",\"sugars_serving\":"
		out.RawString(prefix)
		out.Int(int(in.SugarsServing))
	}
	{
		const prefix string = ",\"sugars_unit\":"
		out.RawString(prefix)
		out.String(string(in.SugarsUnit))
	}
	{
		const prefix string = ",\"sugars_value\":"
		out.RawString(prefix)
		out.Float64(float64(in.SugarsValue))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode11(in *jlexer.Lexer, out *struct {
	Fat          string `json:"fat"`
	Salt         string `json:"salt"`
	SaturatedFat string `json:"saturated-fat"`
	Sugars       string `json:"sugars"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fat":
			out.Fat = string(in.String())
		case "salt":
			out.Salt = string(in.String())
		case "saturated-fat":
			out.SaturatedFat = string(in.String())
		case "sugars":
			out.Sugars = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode11(out *jwriter.Writer, in struct {
	Fat          string `json:"fat"`
	Salt         string `json:"salt"`
	SaturatedFat string `json:"saturated-fat"`
	Sugars       string `json:"sugars"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fat\":"
		out.RawString(prefix[1:])
		out.String(string(in.Fat))
	}
	{
		const prefix string = ",\"salt\":"
		out.RawString(prefix)
		out.String(string(in.Salt))
	}
	{
		const prefix string = ",\"saturated-fat\":"
		out.RawString(prefix)
		out.String(string(in.SaturatedFat))
	}
	{
		const prefix string = ",\"sugars\":"
		out.RawString(prefix)
		out.String(string(in.Sugars))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode10(in *jlexer.Lexer, out *struct {
	Num3 [][]string `json:"3"`
	Num4 [][]string `json:"4"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "3":
			if in.IsNull() {
				in.Skip()
				out.Num3 = nil
			} else {
				in.Delim('[')
				if out.Num3 == nil {
					if !in.IsDelim(']') {
						out.Num3 = make([][]string, 0, 2)
					} else {
						out.Num3 = [][]string{}
					}
				} else {
					out.Num3 = (out.Num3)[:0]
				}
				for !in.IsDelim(']') {
					var v265 []string
					if in.IsNull() {
						in.Skip()
						v265 = nil
					} else {
						in.Delim('[')
						if v265 == nil {
							if !in.IsDelim(']') {
								v265 = make([]string, 0, 4)
							} else {
								v265 = []string{}
							}
						} else {
							v265 = (v265)[:0]
						}
						for !in.IsDelim(']') {
							var v266 string
							v266 = string(in.String())
							v265 = append(v265, v266)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Num3 = append(out.Num3, v265)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "4":
			if in.IsNull() {
				in.Skip()
				out.Num4 = nil
			} else {
				in.Delim('[')
				if out.Num4 == nil {
					if !in.IsDelim(']') {
						out.Num4 = make([][]string, 0, 2)
					} else {
						out.Num4 = [][]string{}
					}
				} else {
					out.Num4 = (out.Num4)[:0]
				}
				for !in.IsDelim(']') {
					var v267 []string
					if in.IsNull() {
						in.Skip()
						v267 = nil
					} else {
						in.Delim('[')
						if v267 == nil {
							if !in.IsDelim(']') {
								v267 = make([]string, 0, 4)
							} else {
								v267 = []string{}
							}
						} else {
							v267 = (v267)[:0]
						}
						for !in.IsDelim(']') {
							var v268 string
							v268 = string(in.String())
							v267 = append(v267, v268)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Num4 = append(out.Num4, v267)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode10(out *jwriter.Writer, in struct {
	Num3 [][]string `json:"3"`
	Num4 [][]string `json:"4"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"3\":"
		out.RawString(prefix[1:])
		if in.Num3 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v269, v270 := range in.Num3 {
				if v269 > 0 {
					out.RawByte(',')
				}
				if v270 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v271, v272 := range v270 {
						if v271 > 0 {
							out.RawByte(',')
						}
						out.String(string(v272))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"4\":"
		out.RawString(prefix)
		if in.Num4 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v273, v274 := range in.Num4 {
				if v273 > 0 {
					out.RawByte(',')
				}
				if v274 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v275, v276 := range v274 {
						if v275 > 0 {
							out.RawByte(',')
						}
						out.String(string(v276))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode9(in *jlexer.Lexer, out *struct {
	En int `json:"en"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "en":
			out.En = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode9(out *jwriter.Writer, in struct {
	En int `json:"en"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"en\":"
		out.RawString(prefix[1:])
		out.Int(int(in.En))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode8(in *jlexer.Lexer, out *struct {
	EnEnglish int `json:"en:english"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "en:english":
			out.EnEnglish = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode8(out *jwriter.Writer, in struct {
	EnEnglish int `json:"en:english"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"en:english\":"
		out.RawString(prefix[1:])
		out.Int(int(in.EnEnglish))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode7(in *jlexer.Lexer, out *struct {
	EnNonVegan                []string `json:"en:non-vegan"`
	EnPalmOilContentUnknown   []string `json:"en:palm-oil-content-unknown"`
	EnVeganStatusUnknown      []string `json:"en:vegan-status-unknown"`
	EnVegetarianStatusUnknown []string `json:"en:vegetarian-status-unknown"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "en:non-vegan":
			if in.IsNull() {
				in.Skip()
				out.EnNonVegan = nil
			} else {
				in.Delim('[')
				if out.EnNonVegan == nil {
					if !in.IsDelim(']') {
						out.EnNonVegan = make([]string, 0, 4)
					} else {
						out.EnNonVegan = []string{}
					}
				} else {
					out.EnNonVegan = (out.EnNonVegan)[:0]
				}
				for !in.IsDelim(']') {
					var v277 string
					v277 = string(in.String())
					out.EnNonVegan = append(out.EnNonVegan, v277)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "en:palm-oil-content-unknown":
			if in.IsNull() {
				in.Skip()
				out.EnPalmOilContentUnknown = nil
			} else {
				in.Delim('[')
				if out.EnPalmOilContentUnknown == nil {
					if !in.IsDelim(']') {
						out.EnPalmOilContentUnknown = make([]string, 0, 4)
					} else {
						out.EnPalmOilContentUnknown = []string{}
					}
				} else {
					out.EnPalmOilContentUnknown = (out.EnPalmOilContentUnknown)[:0]
				}
				for !in.IsDelim(']') {
					var v278 string
					v278 = string(in.String())
					out.EnPalmOilContentUnknown = append(out.EnPalmOilContentUnknown, v278)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "en:vegan-status-unknown":
			if in.IsNull() {
				in.Skip()
				out.EnVeganStatusUnknown = nil
			} else {
				in.Delim('[')
				if out.EnVeganStatusUnknown == nil {
					if !in.IsDelim(']') {
						out.EnVeganStatusUnknown = make([]string, 0, 4)
					} else {
						out.EnVeganStatusUnknown = []string{}
					}
				} else {
					out.EnVeganStatusUnknown = (out.EnVeganStatusUnknown)[:0]
				}
				for !in.IsDelim(']') {
					var v279 string
					v279 = string(in.String())
					out.EnVeganStatusUnknown = append(out.EnVeganStatusUnknown, v279)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "en:vegetarian-status-unknown":
			if in.IsNull() {
				in.Skip()
				out.EnVegetarianStatusUnknown = nil
			} else {
				in.Delim('[')
				if out.EnVegetarianStatusUnknown == nil {
					if !in.IsDelim(']') {
						out.EnVegetarianStatusUnknown = make([]string, 0, 4)
					} else {
						out.EnVegetarianStatusUnknown = []string{}
					}
				} else {
					out.EnVegetarianStatusUnknown = (out.EnVegetarianStatusUnknown)[:0]
				}
				for !in.IsDelim(']') {
					var v280 string
					v280 = string(in.String())
					out.EnVegetarianStatusUnknown = append(out.EnVegetarianStatusUnknown, v280)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode7(out *jwriter.Writer, in struct {
	EnNonVegan                []string `json:"en:non-vegan"`
	EnPalmOilContentUnknown   []string `json:"en:palm-oil-content-unknown"`
	EnVeganStatusUnknown      []string `json:"en:vegan-status-unknown"`
	EnVegetarianStatusUnknown []string `json:"en:vegetarian-status-unknown"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"en:non-vegan\":"
		out.RawString(prefix[1:])
		if in.EnNonVegan == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v281, v282 := range in.EnNonVegan {
				if v281 > 0 {
					out.RawByte(',')
				}
				out.String(string(v282))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"en:palm-oil-content-unknown\":"
		out.RawString(prefix)
		if in.EnPalmOilContentUnknown == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v283, v284 := range in.EnPalmOilContentUnknown {
				if v283 > 0 {
					out.RawByte(',')
				}
				out.String(string(v284))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"en:vegan-status-unknown\":"
		out.RawString(prefix)
		if in.EnVeganStatusUnknown == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v285, v286 := range in.EnVeganStatusUnknown {
				if v285 > 0 {
					out.RawByte(',')
				}
				out.String(string(v286))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"en:vegetarian-status-unknown\":"
		out.RawString(prefix)
		if in.EnVegetarianStatusUnknown == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v287, v288 := range in.EnVegetarianStatusUnknown {
				if v287 > 0 {
					out.RawByte(',')
				}
				out.String(string(v288))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode6(in *jlexer.Lexer, out *struct {
	ID                string `json:"id"`
	Percent           int    `json:"percent,omitempty"`
	PercentEstimate   int    `json:"percent_estimate"`
	PercentMax        int    `json:"percent_max"`
	PercentMin        int    `json:"percent_min"`
	Processing        string `json:"processing,omitempty"`
	Rank              int    `json:"rank,omitempty"`
	Text              string `json:"text"`
	Vegan             string `json:"vegan,omitempty"`
	Vegetarian        string `json:"vegetarian,omitempty"`
	FromPalmOil       string `json:"from_palm_oil,omitempty"`
	HasSubIngredients string `json:"has_sub_ingredients,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "percent":
			out.Percent = int(in.Int())
		case "percent_estimate":
			out.PercentEstimate = int(in.Int())
		case "percent_max":
			out.PercentMax = int(in.Int())
		case "percent_min":
			out.PercentMin = int(in.Int())
		case "processing":
			out.Processing = string(in.String())
		case "rank":
			out.Rank = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "vegan":
			out.Vegan = string(in.String())
		case "vegetarian":
			out.Vegetarian = string(in.String())
		case "from_palm_oil":
			out.FromPalmOil = string(in.String())
		case "has_sub_ingredients":
			out.HasSubIngredients = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode6(out *jwriter.Writer, in struct {
	ID                string `json:"id"`
	Percent           int    `json:"percent,omitempty"`
	PercentEstimate   int    `json:"percent_estimate"`
	PercentMax        int    `json:"percent_max"`
	PercentMin        int    `json:"percent_min"`
	Processing        string `json:"processing,omitempty"`
	Rank              int    `json:"rank,omitempty"`
	Text              string `json:"text"`
	Vegan             string `json:"vegan,omitempty"`
	Vegetarian        string `json:"vegetarian,omitempty"`
	FromPalmOil       string `json:"from_palm_oil,omitempty"`
	HasSubIngredients string `json:"has_sub_ingredients,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	if in.Percent != 0 {
		const prefix string = ",\"percent\":"
		out.RawString(prefix)
		out.Int(int(in.Percent))
	}
	{
		const prefix string = ",\"percent_estimate\":"
		out.RawString(prefix)
		out.Int(int(in.PercentEstimate))
	}
	{
		const prefix string = ",\"percent_max\":"
		out.RawString(prefix)
		out.Int(int(in.PercentMax))
	}
	{
		const prefix string = ",\"percent_min\":"
		out.RawString(prefix)
		out.Int(int(in.PercentMin))
	}
	if in.Processing != "" {
		const prefix string = ",\"processing\":"
		out.RawString(prefix)
		out.String(string(in.Processing))
	}
	if in.Rank != 0 {
		const prefix string = ",\"rank\":"
		out.RawString(prefix)
		out.Int(int(in.Rank))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	if in.Vegan != "" {
		const prefix string = ",\"vegan\":"
		out.RawString(prefix)
		out.String(string(in.Vegan))
	}
	if in.Vegetarian != "" {
		const prefix string = ",\"vegetarian\":"
		out.RawString(prefix)
		out.String(string(in.Vegetarian))
	}
	if in.FromPalmOil != "" {
		const prefix string = ",\"from_palm_oil\":"
		out.RawString(prefix)
		out.String(string(in.FromPalmOil))
	}
	if in.HasSubIngredients != "" {
		const prefix string = ",\"has_sub_ingredients\":"
		out.RawString(prefix)
		out.String(string(in.HasSubIngredients))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode5(in *jlexer.Lexer, out *struct {
	Num1 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"1"`
	Num2 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"2"`
	Num3 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"3"`
	Num4 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"4"`
	Num5 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"5"`
	Num6 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"6"`
	Num7 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT string `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"7"`
	Num8 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"8"`
	Num9 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"9"`
	Front struct {
		Geometry  string `json:"geometry"`
		Imgid     string `json:"imgid"`
		Normalize string `json:"normalize"`
		Rev       string `json:"rev"`
		Sizes     struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic string `json:"white_magic"`
	} `json:"front"`
	FrontEn struct {
		Angle                int         `json:"angle"`
		CoordinatesImageSize string      `json:"coordinates_image_size"`
		Geometry             string      `json:"geometry"`
		Imgid                string      `json:"imgid"`
		Normalize            interface{} `json:"normalize"`
		Rev                  string      `json:"rev"`
		Sizes                struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic interface{} `json:"white_magic"`
		X1         string      `json:"x1"`
		X2         string      `json:"x2"`
		Y1         string      `json:"y1"`
		Y2         string      `json:"y2"`
	} `json:"front_en"`
	Ingredients struct {
		Geometry    string `json:"geometry"`
		Imgid       string `json:"imgid"`
		Normalize   string `json:"normalize"`
		Ocr         int    `json:"ocr"`
		Orientation string `json:"orientation"`
		Rev         string `json:"rev"`
		Sizes       struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic string `json:"white_magic"`
	} `json:"ingredients"`
	IngredientsEn struct {
		Geometry    string `json:"geometry"`
		Imgid       string `json:"imgid"`
		Normalize   string `json:"normalize"`
		Ocr         int    `json:"ocr"`
		Orientation string `json:"orientation"`
		Rev         string `json:"rev"`
		Sizes       struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic string `json:"white_magic"`
	} `json:"ingredients_en"`
	Nutrition struct {
		Geometry    string `json:"geometry"`
		Imgid       string `json:"imgid"`
		Normalize   string `json:"normalize"`
		Ocr         int    `json:"ocr"`
		Orientation string `json:"orientation"`
		Rev         string `json:"rev"`
		Sizes       struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic string `json:"white_magic"`
	} `json:"nutrition"`
	NutritionEn struct {
		Angle                int         `json:"angle"`
		CoordinatesImageSize string      `json:"coordinates_image_size"`
		Geometry             string      `json:"geometry"`
		Imgid                string      `json:"imgid"`
		Normalize            interface{} `json:"normalize"`
		Rev                  string      `json:"rev"`
		Sizes                struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic interface{} `json:"white_magic"`
		X1         string      `json:"x1"`
		X2         string      `json:"x2"`
		Y1         string      `json:"y1"`
		Y2         string      `json:"y2"`
	} `json:"nutrition_en"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "1":
			easyjsonC4ff3609Decode18(in, &out.Num1)
		case "2":
			easyjsonC4ff3609Decode18(in, &out.Num2)
		case "3":
			easyjsonC4ff3609Decode18(in, &out.Num3)
		case "4":
			easyjsonC4ff3609Decode18(in, &out.Num4)
		case "5":
			easyjsonC4ff3609Decode18(in, &out.Num5)
		case "6":
			easyjsonC4ff3609Decode18(in, &out.Num6)
		case "7":
			easyjsonC4ff3609Decode19(in, &out.Num7)
		case "8":
			easyjsonC4ff3609Decode18(in, &out.Num8)
		case "9":
			easyjsonC4ff3609Decode18(in, &out.Num9)
		case "front":
			easyjsonC4ff3609Decode20(in, &out.Front)
		case "front_en":
			easyjsonC4ff3609Decode21(in, &out.FrontEn)
		case "ingredients":
			easyjsonC4ff3609Decode22(in, &out.Ingredients)
		case "ingredients_en":
			easyjsonC4ff3609Decode22(in, &out.IngredientsEn)
		case "nutrition":
			easyjsonC4ff3609Decode22(in, &out.Nutrition)
		case "nutrition_en":
			easyjsonC4ff3609Decode21(in, &out.NutritionEn)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode5(out *jwriter.Writer, in struct {
	Num1 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"1"`
	Num2 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"2"`
	Num3 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"3"`
	Num4 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"4"`
	Num5 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"5"`
	Num6 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"6"`
	Num7 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT string `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"7"`
	Num8 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"8"`
	Num9 struct {
		Sizes struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		UploadedT int    `json:"uploaded_t"`
		Uploader  string `json:"uploader"`
	} `json:"9"`
	Front struct {
		Geometry  string `json:"geometry"`
		Imgid     string `json:"imgid"`
		Normalize string `json:"normalize"`
		Rev       string `json:"rev"`
		Sizes     struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic string `json:"white_magic"`
	} `json:"front"`
	FrontEn struct {
		Angle                int         `json:"angle"`
		CoordinatesImageSize string      `json:"coordinates_image_size"`
		Geometry             string      `json:"geometry"`
		Imgid                string      `json:"imgid"`
		Normalize            interface{} `json:"normalize"`
		Rev                  string      `json:"rev"`
		Sizes                struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic interface{} `json:"white_magic"`
		X1         string      `json:"x1"`
		X2         string      `json:"x2"`
		Y1         string      `json:"y1"`
		Y2         string      `json:"y2"`
	} `json:"front_en"`
	Ingredients struct {
		Geometry    string `json:"geometry"`
		Imgid       string `json:"imgid"`
		Normalize   string `json:"normalize"`
		Ocr         int    `json:"ocr"`
		Orientation string `json:"orientation"`
		Rev         string `json:"rev"`
		Sizes       struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic string `json:"white_magic"`
	} `json:"ingredients"`
	IngredientsEn struct {
		Geometry    string `json:"geometry"`
		Imgid       string `json:"imgid"`
		Normalize   string `json:"normalize"`
		Ocr         int    `json:"ocr"`
		Orientation string `json:"orientation"`
		Rev         string `json:"rev"`
		Sizes       struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic string `json:"white_magic"`
	} `json:"ingredients_en"`
	Nutrition struct {
		Geometry    string `json:"geometry"`
		Imgid       string `json:"imgid"`
		Normalize   string `json:"normalize"`
		Ocr         int    `json:"ocr"`
		Orientation string `json:"orientation"`
		Rev         string `json:"rev"`
		Sizes       struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic string `json:"white_magic"`
	} `json:"nutrition"`
	NutritionEn struct {
		Angle                int         `json:"angle"`
		CoordinatesImageSize string      `json:"coordinates_image_size"`
		Geometry             string      `json:"geometry"`
		Imgid                string      `json:"imgid"`
		Normalize            interface{} `json:"normalize"`
		Rev                  string      `json:"rev"`
		Sizes                struct {
			Num100 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"100"`
			Num200 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"200"`
			Num400 struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"400"`
			Full struct {
				H int `json:"h"`
				W int `json:"w"`
			} `json:"full"`
		} `json:"sizes"`
		WhiteMagic interface{} `json:"white_magic"`
		X1         string      `json:"x1"`
		X2         string      `json:"x2"`
		Y1         string      `json:"y1"`
		Y2         string      `json:"y2"`
	} `json:"nutrition_en"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"1\":"
		out.RawString(prefix[1:])
		easyjsonC4ff3609Encode18(out, in.Num1)
	}
	{
		const prefix string = ",\"2\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode18(out, in.Num2)
	}
	{
		const prefix string = ",\"3\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode18(out, in.Num3)
	}
	{
		const prefix string = ",\"4\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode18(out, in.Num4)
	}
	{
		const prefix string = ",\"5\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode18(out, in.Num5)
	}
	{
		const prefix string = ",\"6\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode18(out, in.Num6)
	}
	{
		const prefix string = ",\"7\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode19(out, in.Num7)
	}
	{
		const prefix string = ",\"8\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode18(out, in.Num8)
	}
	{
		const prefix string = ",\"9\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode18(out, in.Num9)
	}
	{
		const prefix string = ",\"front\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode20(out, in.Front)
	}
	{
		const prefix string = ",\"front_en\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode21(out, in.FrontEn)
	}
	{
		const prefix string = ",\"ingredients\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode22(out, in.Ingredients)
	}
	{
		const prefix string = ",\"ingredients_en\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode22(out, in.IngredientsEn)
	}
	{
		const prefix string = ",\"nutrition\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode22(out, in.Nutrition)
	}
	{
		const prefix string = ",\"nutrition_en\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode21(out, in.NutritionEn)
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode22(in *jlexer.Lexer, out *struct {
	Geometry    string `json:"geometry"`
	Imgid       string `json:"imgid"`
	Normalize   string `json:"normalize"`
	Ocr         int    `json:"ocr"`
	Orientation string `json:"orientation"`
	Rev         string `json:"rev"`
	Sizes       struct {
		Num100 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"100"`
		Num200 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"200"`
		Num400 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"400"`
		Full struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"full"`
	} `json:"sizes"`
	WhiteMagic string `json:"white_magic"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "geometry":
			out.Geometry = string(in.String())
		case "imgid":
			out.Imgid = string(in.String())
		case "normalize":
			out.Normalize = string(in.String())
		case "ocr":
			out.Ocr = int(in.Int())
		case "orientation":
			out.Orientation = string(in.String())
		case "rev":
			out.Rev = string(in.String())
		case "sizes":
			easyjsonC4ff3609Decode23(in, &out.Sizes)
		case "white_magic":
			out.WhiteMagic = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode22(out *jwriter.Writer, in struct {
	Geometry    string `json:"geometry"`
	Imgid       string `json:"imgid"`
	Normalize   string `json:"normalize"`
	Ocr         int    `json:"ocr"`
	Orientation string `json:"orientation"`
	Rev         string `json:"rev"`
	Sizes       struct {
		Num100 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"100"`
		Num200 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"200"`
		Num400 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"400"`
		Full struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"full"`
	} `json:"sizes"`
	WhiteMagic string `json:"white_magic"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"geometry\":"
		out.RawString(prefix[1:])
		out.String(string(in.Geometry))
	}
	{
		const prefix string = ",\"imgid\":"
		out.RawString(prefix)
		out.String(string(in.Imgid))
	}
	{
		const prefix string = ",\"normalize\":"
		out.RawString(prefix)
		out.String(string(in.Normalize))
	}
	{
		const prefix string = ",\"ocr\":"
		out.RawString(prefix)
		out.Int(int(in.Ocr))
	}
	{
		const prefix string = ",\"orientation\":"
		out.RawString(prefix)
		out.String(string(in.Orientation))
	}
	{
		const prefix string = ",\"rev\":"
		out.RawString(prefix)
		out.String(string(in.Rev))
	}
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode23(out, in.Sizes)
	}
	{
		const prefix string = ",\"white_magic\":"
		out.RawString(prefix)
		out.String(string(in.WhiteMagic))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode23(in *jlexer.Lexer, out *struct {
	Num100 struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"100"`
	Num200 struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"200"`
	Num400 struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"400"`
	Full struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"full"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "100":
			easyjsonC4ff3609Decode24(in, &out.Num100)
		case "200":
			easyjsonC4ff3609Decode24(in, &out.Num200)
		case "400":
			easyjsonC4ff3609Decode24(in, &out.Num400)
		case "full":
			easyjsonC4ff3609Decode24(in, &out.Full)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode23(out *jwriter.Writer, in struct {
	Num100 struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"100"`
	Num200 struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"200"`
	Num400 struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"400"`
	Full struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"full"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"100\":"
		out.RawString(prefix[1:])
		easyjsonC4ff3609Encode24(out, in.Num100)
	}
	{
		const prefix string = ",\"200\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode24(out, in.Num200)
	}
	{
		const prefix string = ",\"400\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode24(out, in.Num400)
	}
	{
		const prefix string = ",\"full\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode24(out, in.Full)
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode24(in *jlexer.Lexer, out *struct {
	H int `json:"h"`
	W int `json:"w"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "h":
			out.H = int(in.Int())
		case "w":
			out.W = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode24(out *jwriter.Writer, in struct {
	H int `json:"h"`
	W int `json:"w"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix[1:])
		out.Int(int(in.H))
	}
	{
		const prefix string = ",\"w\":"
		out.RawString(prefix)
		out.Int(int(in.W))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode21(in *jlexer.Lexer, out *struct {
	Angle                int         `json:"angle"`
	CoordinatesImageSize string      `json:"coordinates_image_size"`
	Geometry             string      `json:"geometry"`
	Imgid                string      `json:"imgid"`
	Normalize            interface{} `json:"normalize"`
	Rev                  string      `json:"rev"`
	Sizes                struct {
		Num100 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"100"`
		Num200 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"200"`
		Num400 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"400"`
		Full struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"full"`
	} `json:"sizes"`
	WhiteMagic interface{} `json:"white_magic"`
	X1         string      `json:"x1"`
	X2         string      `json:"x2"`
	Y1         string      `json:"y1"`
	Y2         string      `json:"y2"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "angle":
			out.Angle = int(in.Int())
		case "coordinates_image_size":
			out.CoordinatesImageSize = string(in.String())
		case "geometry":
			out.Geometry = string(in.String())
		case "imgid":
			out.Imgid = string(in.String())
		case "normalize":
			if m, ok := out.Normalize.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Normalize.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Normalize = in.Interface()
			}
		case "rev":
			out.Rev = string(in.String())
		case "sizes":
			easyjsonC4ff3609Decode23(in, &out.Sizes)
		case "white_magic":
			if m, ok := out.WhiteMagic.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.WhiteMagic.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.WhiteMagic = in.Interface()
			}
		case "x1":
			out.X1 = string(in.String())
		case "x2":
			out.X2 = string(in.String())
		case "y1":
			out.Y1 = string(in.String())
		case "y2":
			out.Y2 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode21(out *jwriter.Writer, in struct {
	Angle                int         `json:"angle"`
	CoordinatesImageSize string      `json:"coordinates_image_size"`
	Geometry             string      `json:"geometry"`
	Imgid                string      `json:"imgid"`
	Normalize            interface{} `json:"normalize"`
	Rev                  string      `json:"rev"`
	Sizes                struct {
		Num100 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"100"`
		Num200 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"200"`
		Num400 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"400"`
		Full struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"full"`
	} `json:"sizes"`
	WhiteMagic interface{} `json:"white_magic"`
	X1         string      `json:"x1"`
	X2         string      `json:"x2"`
	Y1         string      `json:"y1"`
	Y2         string      `json:"y2"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"angle\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Angle))
	}
	{
		const prefix string = ",\"coordinates_image_size\":"
		out.RawString(prefix)
		out.String(string(in.CoordinatesImageSize))
	}
	{
		const prefix string = ",\"geometry\":"
		out.RawString(prefix)
		out.String(string(in.Geometry))
	}
	{
		const prefix string = ",\"imgid\":"
		out.RawString(prefix)
		out.String(string(in.Imgid))
	}
	{
		const prefix string = ",\"normalize\":"
		out.RawString(prefix)
		if m, ok := in.Normalize.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Normalize.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Normalize))
		}
	}
	{
		const prefix string = ",\"rev\":"
		out.RawString(prefix)
		out.String(string(in.Rev))
	}
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode23(out, in.Sizes)
	}
	{
		const prefix string = ",\"white_magic\":"
		out.RawString(prefix)
		if m, ok := in.WhiteMagic.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.WhiteMagic.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.WhiteMagic))
		}
	}
	{
		const prefix string = ",\"x1\":"
		out.RawString(prefix)
		out.String(string(in.X1))
	}
	{
		const prefix string = ",\"x2\":"
		out.RawString(prefix)
		out.String(string(in.X2))
	}
	{
		const prefix string = ",\"y1\":"
		out.RawString(prefix)
		out.String(string(in.Y1))
	}
	{
		const prefix string = ",\"y2\":"
		out.RawString(prefix)
		out.String(string(in.Y2))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode20(in *jlexer.Lexer, out *struct {
	Geometry  string `json:"geometry"`
	Imgid     string `json:"imgid"`
	Normalize string `json:"normalize"`
	Rev       string `json:"rev"`
	Sizes     struct {
		Num100 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"100"`
		Num200 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"200"`
		Num400 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"400"`
		Full struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"full"`
	} `json:"sizes"`
	WhiteMagic string `json:"white_magic"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "geometry":
			out.Geometry = string(in.String())
		case "imgid":
			out.Imgid = string(in.String())
		case "normalize":
			out.Normalize = string(in.String())
		case "rev":
			out.Rev = string(in.String())
		case "sizes":
			easyjsonC4ff3609Decode23(in, &out.Sizes)
		case "white_magic":
			out.WhiteMagic = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode20(out *jwriter.Writer, in struct {
	Geometry  string `json:"geometry"`
	Imgid     string `json:"imgid"`
	Normalize string `json:"normalize"`
	Rev       string `json:"rev"`
	Sizes     struct {
		Num100 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"100"`
		Num200 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"200"`
		Num400 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"400"`
		Full struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"full"`
	} `json:"sizes"`
	WhiteMagic string `json:"white_magic"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"geometry\":"
		out.RawString(prefix[1:])
		out.String(string(in.Geometry))
	}
	{
		const prefix string = ",\"imgid\":"
		out.RawString(prefix)
		out.String(string(in.Imgid))
	}
	{
		const prefix string = ",\"normalize\":"
		out.RawString(prefix)
		out.String(string(in.Normalize))
	}
	{
		const prefix string = ",\"rev\":"
		out.RawString(prefix)
		out.String(string(in.Rev))
	}
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode23(out, in.Sizes)
	}
	{
		const prefix string = ",\"white_magic\":"
		out.RawString(prefix)
		out.String(string(in.WhiteMagic))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode19(in *jlexer.Lexer, out *struct {
	Sizes struct {
		Num100 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"100"`
		Num400 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"400"`
		Full struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"full"`
	} `json:"sizes"`
	UploadedT string `json:"uploaded_t"`
	Uploader  string `json:"uploader"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sizes":
			easyjsonC4ff3609Decode25(in, &out.Sizes)
		case "uploaded_t":
			out.UploadedT = string(in.String())
		case "uploader":
			out.Uploader = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode19(out *jwriter.Writer, in struct {
	Sizes struct {
		Num100 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"100"`
		Num400 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"400"`
		Full struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"full"`
	} `json:"sizes"`
	UploadedT string `json:"uploaded_t"`
	Uploader  string `json:"uploader"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix[1:])
		easyjsonC4ff3609Encode25(out, in.Sizes)
	}
	{
		const prefix string = ",\"uploaded_t\":"
		out.RawString(prefix)
		out.String(string(in.UploadedT))
	}
	{
		const prefix string = ",\"uploader\":"
		out.RawString(prefix)
		out.String(string(in.Uploader))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode25(in *jlexer.Lexer, out *struct {
	Num100 struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"100"`
	Num400 struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"400"`
	Full struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"full"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "100":
			easyjsonC4ff3609Decode24(in, &out.Num100)
		case "400":
			easyjsonC4ff3609Decode24(in, &out.Num400)
		case "full":
			easyjsonC4ff3609Decode24(in, &out.Full)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode25(out *jwriter.Writer, in struct {
	Num100 struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"100"`
	Num400 struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"400"`
	Full struct {
		H int `json:"h"`
		W int `json:"w"`
	} `json:"full"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"100\":"
		out.RawString(prefix[1:])
		easyjsonC4ff3609Encode24(out, in.Num100)
	}
	{
		const prefix string = ",\"400\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode24(out, in.Num400)
	}
	{
		const prefix string = ",\"full\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode24(out, in.Full)
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode18(in *jlexer.Lexer, out *struct {
	Sizes struct {
		Num100 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"100"`
		Num400 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"400"`
		Full struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"full"`
	} `json:"sizes"`
	UploadedT int    `json:"uploaded_t"`
	Uploader  string `json:"uploader"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sizes":
			easyjsonC4ff3609Decode25(in, &out.Sizes)
		case "uploaded_t":
			out.UploadedT = int(in.Int())
		case "uploader":
			out.Uploader = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode18(out *jwriter.Writer, in struct {
	Sizes struct {
		Num100 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"100"`
		Num400 struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"400"`
		Full struct {
			H int `json:"h"`
			W int `json:"w"`
		} `json:"full"`
	} `json:"sizes"`
	UploadedT int    `json:"uploaded_t"`
	Uploader  string `json:"uploader"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix[1:])
		easyjsonC4ff3609Encode25(out, in.Sizes)
	}
	{
		const prefix string = ",\"uploaded_t\":"
		out.RawString(prefix)
		out.Int(int(in.UploadedT))
	}
	{
		const prefix string = ",\"uploader\":"
		out.RawString(prefix)
		out.String(string(in.Uploader))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode4(in *jlexer.Lexer, out *struct {
	Impact struct {
		EfSingleScoreLogStddev float64 `json:"ef_single_score_log_stddev"`
		LikeliestImpacts       struct {
			ClimateChange float64 `json:"Climate_change"`
			EFSingleScore float64 `json:"EF_single_score"`
		} `json:"likeliest_impacts"`
		LikeliestRecipe struct {
			EnOakSmokedSeaSaltiYeastExtract float64 `json:"en:Oak_smoked_sea_salti_yeast_extract"`
			EnE160C                         float64 `json:"en:e160c"`
			EnE330                          float64 `json:"en:e330"`
			EnFlavouring                    float64 `json:"en:flavouring"`
			EnGarlicPowder                  float64 `json:"en:garlic_powder"`
			EnMilk                          float64 `json:"en:milk"`
			EnOnion                         float64 `json:"en:onion"`
			EnPotato                        float64 `json:"en:potato"`
			EnPotatoStarch                  float64 `json:"en:potato_starch"`
			EnRiceFlour                     float64 `json:"en:rice_flour"`
			EnSalt                          float64 `json:"en:salt"`
			EnSpice                         float64 `json:"en:spice"`
			EnSugar                         float64 `json:"en:sugar"`
			EnSunflowerOil                  float64 `json:"en:sunflower_oil"`
			EnTomatoPowder                  float64 `json:"en:tomato_powder"`
			EnWater                         float64 `json:"en:water"`
			EnYeastPowder                   float64 `json:"en:yeast_powder"`
		} `json:"likeliest_recipe"`
		MassRatioUncharacterized   float64 `json:"mass_ratio_uncharacterized"`
		UncharacterizedIngredients struct {
			Impact    []string `json:"impact"`
			Nutrition []string `json:"nutrition"`
		} `json:"uncharacterized_ingredients"`
		UncharacterizedIngredientsMassProportion struct {
			Impact    float64 `json:"impact"`
			Nutrition float64 `json:"nutrition"`
		} `json:"uncharacterized_ingredients_mass_proportion"`
		UncharacterizedIngredientsRatio struct {
			Impact    float64 `json:"impact"`
			Nutrition float64 `json:"nutrition"`
		} `json:"uncharacterized_ingredients_ratio"`
		Warnings []string `json:"warnings"`
	} `json:"impact"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "impact":
			easyjsonC4ff3609Decode26(in, &out.Impact)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode4(out *jwriter.Writer, in struct {
	Impact struct {
		EfSingleScoreLogStddev float64 `json:"ef_single_score_log_stddev"`
		LikeliestImpacts       struct {
			ClimateChange float64 `json:"Climate_change"`
			EFSingleScore float64 `json:"EF_single_score"`
		} `json:"likeliest_impacts"`
		LikeliestRecipe struct {
			EnOakSmokedSeaSaltiYeastExtract float64 `json:"en:Oak_smoked_sea_salti_yeast_extract"`
			EnE160C                         float64 `json:"en:e160c"`
			EnE330                          float64 `json:"en:e330"`
			EnFlavouring                    float64 `json:"en:flavouring"`
			EnGarlicPowder                  float64 `json:"en:garlic_powder"`
			EnMilk                          float64 `json:"en:milk"`
			EnOnion                         float64 `json:"en:onion"`
			EnPotato                        float64 `json:"en:potato"`
			EnPotatoStarch                  float64 `json:"en:potato_starch"`
			EnRiceFlour                     float64 `json:"en:rice_flour"`
			EnSalt                          float64 `json:"en:salt"`
			EnSpice                         float64 `json:"en:spice"`
			EnSugar                         float64 `json:"en:sugar"`
			EnSunflowerOil                  float64 `json:"en:sunflower_oil"`
			EnTomatoPowder                  float64 `json:"en:tomato_powder"`
			EnWater                         float64 `json:"en:water"`
			EnYeastPowder                   float64 `json:"en:yeast_powder"`
		} `json:"likeliest_recipe"`
		MassRatioUncharacterized   float64 `json:"mass_ratio_uncharacterized"`
		UncharacterizedIngredients struct {
			Impact    []string `json:"impact"`
			Nutrition []string `json:"nutrition"`
		} `json:"uncharacterized_ingredients"`
		UncharacterizedIngredientsMassProportion struct {
			Impact    float64 `json:"impact"`
			Nutrition float64 `json:"nutrition"`
		} `json:"uncharacterized_ingredients_mass_proportion"`
		UncharacterizedIngredientsRatio struct {
			Impact    float64 `json:"impact"`
			Nutrition float64 `json:"nutrition"`
		} `json:"uncharacterized_ingredients_ratio"`
		Warnings []string `json:"warnings"`
	} `json:"impact"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"impact\":"
		out.RawString(prefix[1:])
		easyjsonC4ff3609Encode26(out, in.Impact)
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode26(in *jlexer.Lexer, out *struct {
	EfSingleScoreLogStddev float64 `json:"ef_single_score_log_stddev"`
	LikeliestImpacts       struct {
		ClimateChange float64 `json:"Climate_change"`
		EFSingleScore float64 `json:"EF_single_score"`
	} `json:"likeliest_impacts"`
	LikeliestRecipe struct {
		EnOakSmokedSeaSaltiYeastExtract float64 `json:"en:Oak_smoked_sea_salti_yeast_extract"`
		EnE160C                         float64 `json:"en:e160c"`
		EnE330                          float64 `json:"en:e330"`
		EnFlavouring                    float64 `json:"en:flavouring"`
		EnGarlicPowder                  float64 `json:"en:garlic_powder"`
		EnMilk                          float64 `json:"en:milk"`
		EnOnion                         float64 `json:"en:onion"`
		EnPotato                        float64 `json:"en:potato"`
		EnPotatoStarch                  float64 `json:"en:potato_starch"`
		EnRiceFlour                     float64 `json:"en:rice_flour"`
		EnSalt                          float64 `json:"en:salt"`
		EnSpice                         float64 `json:"en:spice"`
		EnSugar                         float64 `json:"en:sugar"`
		EnSunflowerOil                  float64 `json:"en:sunflower_oil"`
		EnTomatoPowder                  float64 `json:"en:tomato_powder"`
		EnWater                         float64 `json:"en:water"`
		EnYeastPowder                   float64 `json:"en:yeast_powder"`
	} `json:"likeliest_recipe"`
	MassRatioUncharacterized   float64 `json:"mass_ratio_uncharacterized"`
	UncharacterizedIngredients struct {
		Impact    []string `json:"impact"`
		Nutrition []string `json:"nutrition"`
	} `json:"uncharacterized_ingredients"`
	UncharacterizedIngredientsMassProportion struct {
		Impact    float64 `json:"impact"`
		Nutrition float64 `json:"nutrition"`
	} `json:"uncharacterized_ingredients_mass_proportion"`
	UncharacterizedIngredientsRatio struct {
		Impact    float64 `json:"impact"`
		Nutrition float64 `json:"nutrition"`
	} `json:"uncharacterized_ingredients_ratio"`
	Warnings []string `json:"warnings"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ef_single_score_log_stddev":
			out.EfSingleScoreLogStddev = float64(in.Float64())
		case "likeliest_impacts":
			easyjsonC4ff3609Decode27(in, &out.LikeliestImpacts)
		case "likeliest_recipe":
			easyjsonC4ff3609Decode28(in, &out.LikeliestRecipe)
		case "mass_ratio_uncharacterized":
			out.MassRatioUncharacterized = float64(in.Float64())
		case "uncharacterized_ingredients":
			easyjsonC4ff3609Decode29(in, &out.UncharacterizedIngredients)
		case "uncharacterized_ingredients_mass_proportion":
			easyjsonC4ff3609Decode30(in, &out.UncharacterizedIngredientsMassProportion)
		case "uncharacterized_ingredients_ratio":
			easyjsonC4ff3609Decode30(in, &out.UncharacterizedIngredientsRatio)
		case "warnings":
			if in.IsNull() {
				in.Skip()
				out.Warnings = nil
			} else {
				in.Delim('[')
				if out.Warnings == nil {
					if !in.IsDelim(']') {
						out.Warnings = make([]string, 0, 4)
					} else {
						out.Warnings = []string{}
					}
				} else {
					out.Warnings = (out.Warnings)[:0]
				}
				for !in.IsDelim(']') {
					var v289 string
					v289 = string(in.String())
					out.Warnings = append(out.Warnings, v289)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode26(out *jwriter.Writer, in struct {
	EfSingleScoreLogStddev float64 `json:"ef_single_score_log_stddev"`
	LikeliestImpacts       struct {
		ClimateChange float64 `json:"Climate_change"`
		EFSingleScore float64 `json:"EF_single_score"`
	} `json:"likeliest_impacts"`
	LikeliestRecipe struct {
		EnOakSmokedSeaSaltiYeastExtract float64 `json:"en:Oak_smoked_sea_salti_yeast_extract"`
		EnE160C                         float64 `json:"en:e160c"`
		EnE330                          float64 `json:"en:e330"`
		EnFlavouring                    float64 `json:"en:flavouring"`
		EnGarlicPowder                  float64 `json:"en:garlic_powder"`
		EnMilk                          float64 `json:"en:milk"`
		EnOnion                         float64 `json:"en:onion"`
		EnPotato                        float64 `json:"en:potato"`
		EnPotatoStarch                  float64 `json:"en:potato_starch"`
		EnRiceFlour                     float64 `json:"en:rice_flour"`
		EnSalt                          float64 `json:"en:salt"`
		EnSpice                         float64 `json:"en:spice"`
		EnSugar                         float64 `json:"en:sugar"`
		EnSunflowerOil                  float64 `json:"en:sunflower_oil"`
		EnTomatoPowder                  float64 `json:"en:tomato_powder"`
		EnWater                         float64 `json:"en:water"`
		EnYeastPowder                   float64 `json:"en:yeast_powder"`
	} `json:"likeliest_recipe"`
	MassRatioUncharacterized   float64 `json:"mass_ratio_uncharacterized"`
	UncharacterizedIngredients struct {
		Impact    []string `json:"impact"`
		Nutrition []string `json:"nutrition"`
	} `json:"uncharacterized_ingredients"`
	UncharacterizedIngredientsMassProportion struct {
		Impact    float64 `json:"impact"`
		Nutrition float64 `json:"nutrition"`
	} `json:"uncharacterized_ingredients_mass_proportion"`
	UncharacterizedIngredientsRatio struct {
		Impact    float64 `json:"impact"`
		Nutrition float64 `json:"nutrition"`
	} `json:"uncharacterized_ingredients_ratio"`
	Warnings []string `json:"warnings"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ef_single_score_log_stddev\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.EfSingleScoreLogStddev))
	}
	{
		const prefix string = ",\"likeliest_impacts\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode27(out, in.LikeliestImpacts)
	}
	{
		const prefix string = ",\"likeliest_recipe\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode28(out, in.LikeliestRecipe)
	}
	{
		const prefix string = ",\"mass_ratio_uncharacterized\":"
		out.RawString(prefix)
		out.Float64(float64(in.MassRatioUncharacterized))
	}
	{
		const prefix string = ",\"uncharacterized_ingredients\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode29(out, in.UncharacterizedIngredients)
	}
	{
		const prefix string = ",\"uncharacterized_ingredients_mass_proportion\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode30(out, in.UncharacterizedIngredientsMassProportion)
	}
	{
		const prefix string = ",\"uncharacterized_ingredients_ratio\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode30(out, in.UncharacterizedIngredientsRatio)
	}
	{
		const prefix string = ",\"warnings\":"
		out.RawString(prefix)
		if in.Warnings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v290, v291 := range in.Warnings {
				if v290 > 0 {
					out.RawByte(',')
				}
				out.String(string(v291))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode30(in *jlexer.Lexer, out *struct {
	Impact    float64 `json:"impact"`
	Nutrition float64 `json:"nutrition"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "impact":
			out.Impact = float64(in.Float64())
		case "nutrition":
			out.Nutrition = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode30(out *jwriter.Writer, in struct {
	Impact    float64 `json:"impact"`
	Nutrition float64 `json:"nutrition"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"impact\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Impact))
	}
	{
		const prefix string = ",\"nutrition\":"
		out.RawString(prefix)
		out.Float64(float64(in.Nutrition))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode29(in *jlexer.Lexer, out *struct {
	Impact    []string `json:"impact"`
	Nutrition []string `json:"nutrition"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "impact":
			if in.IsNull() {
				in.Skip()
				out.Impact = nil
			} else {
				in.Delim('[')
				if out.Impact == nil {
					if !in.IsDelim(']') {
						out.Impact = make([]string, 0, 4)
					} else {
						out.Impact = []string{}
					}
				} else {
					out.Impact = (out.Impact)[:0]
				}
				for !in.IsDelim(']') {
					var v292 string
					v292 = string(in.String())
					out.Impact = append(out.Impact, v292)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nutrition":
			if in.IsNull() {
				in.Skip()
				out.Nutrition = nil
			} else {
				in.Delim('[')
				if out.Nutrition == nil {
					if !in.IsDelim(']') {
						out.Nutrition = make([]string, 0, 4)
					} else {
						out.Nutrition = []string{}
					}
				} else {
					out.Nutrition = (out.Nutrition)[:0]
				}
				for !in.IsDelim(']') {
					var v293 string
					v293 = string(in.String())
					out.Nutrition = append(out.Nutrition, v293)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode29(out *jwriter.Writer, in struct {
	Impact    []string `json:"impact"`
	Nutrition []string `json:"nutrition"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"impact\":"
		out.RawString(prefix[1:])
		if in.Impact == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v294, v295 := range in.Impact {
				if v294 > 0 {
					out.RawByte(',')
				}
				out.String(string(v295))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nutrition\":"
		out.RawString(prefix)
		if in.Nutrition == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v296, v297 := range in.Nutrition {
				if v296 > 0 {
					out.RawByte(',')
				}
				out.String(string(v297))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode28(in *jlexer.Lexer, out *struct {
	EnOakSmokedSeaSaltiYeastExtract float64 `json:"en:Oak_smoked_sea_salti_yeast_extract"`
	EnE160C                         float64 `json:"en:e160c"`
	EnE330                          float64 `json:"en:e330"`
	EnFlavouring                    float64 `json:"en:flavouring"`
	EnGarlicPowder                  float64 `json:"en:garlic_powder"`
	EnMilk                          float64 `json:"en:milk"`
	EnOnion                         float64 `json:"en:onion"`
	EnPotato                        float64 `json:"en:potato"`
	EnPotatoStarch                  float64 `json:"en:potato_starch"`
	EnRiceFlour                     float64 `json:"en:rice_flour"`
	EnSalt                          float64 `json:"en:salt"`
	EnSpice                         float64 `json:"en:spice"`
	EnSugar                         float64 `json:"en:sugar"`
	EnSunflowerOil                  float64 `json:"en:sunflower_oil"`
	EnTomatoPowder                  float64 `json:"en:tomato_powder"`
	EnWater                         float64 `json:"en:water"`
	EnYeastPowder                   float64 `json:"en:yeast_powder"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "en:Oak_smoked_sea_salti_yeast_extract":
			out.EnOakSmokedSeaSaltiYeastExtract = float64(in.Float64())
		case "en:e160c":
			out.EnE160C = float64(in.Float64())
		case "en:e330":
			out.EnE330 = float64(in.Float64())
		case "en:flavouring":
			out.EnFlavouring = float64(in.Float64())
		case "en:garlic_powder":
			out.EnGarlicPowder = float64(in.Float64())
		case "en:milk":
			out.EnMilk = float64(in.Float64())
		case "en:onion":
			out.EnOnion = float64(in.Float64())
		case "en:potato":
			out.EnPotato = float64(in.Float64())
		case "en:potato_starch":
			out.EnPotatoStarch = float64(in.Float64())
		case "en:rice_flour":
			out.EnRiceFlour = float64(in.Float64())
		case "en:salt":
			out.EnSalt = float64(in.Float64())
		case "en:spice":
			out.EnSpice = float64(in.Float64())
		case "en:sugar":
			out.EnSugar = float64(in.Float64())
		case "en:sunflower_oil":
			out.EnSunflowerOil = float64(in.Float64())
		case "en:tomato_powder":
			out.EnTomatoPowder = float64(in.Float64())
		case "en:water":
			out.EnWater = float64(in.Float64())
		case "en:yeast_powder":
			out.EnYeastPowder = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode28(out *jwriter.Writer, in struct {
	EnOakSmokedSeaSaltiYeastExtract float64 `json:"en:Oak_smoked_sea_salti_yeast_extract"`
	EnE160C                         float64 `json:"en:e160c"`
	EnE330                          float64 `json:"en:e330"`
	EnFlavouring                    float64 `json:"en:flavouring"`
	EnGarlicPowder                  float64 `json:"en:garlic_powder"`
	EnMilk                          float64 `json:"en:milk"`
	EnOnion                         float64 `json:"en:onion"`
	EnPotato                        float64 `json:"en:potato"`
	EnPotatoStarch                  float64 `json:"en:potato_starch"`
	EnRiceFlour                     float64 `json:"en:rice_flour"`
	EnSalt                          float64 `json:"en:salt"`
	EnSpice                         float64 `json:"en:spice"`
	EnSugar                         float64 `json:"en:sugar"`
	EnSunflowerOil                  float64 `json:"en:sunflower_oil"`
	EnTomatoPowder                  float64 `json:"en:tomato_powder"`
	EnWater                         float64 `json:"en:water"`
	EnYeastPowder                   float64 `json:"en:yeast_powder"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"en:Oak_smoked_sea_salti_yeast_extract\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.EnOakSmokedSeaSaltiYeastExtract))
	}
	{
		const prefix string = ",\"en:e160c\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnE160C))
	}
	{
		const prefix string = ",\"en:e330\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnE330))
	}
	{
		const prefix string = ",\"en:flavouring\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnFlavouring))
	}
	{
		const prefix string = ",\"en:garlic_powder\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnGarlicPowder))
	}
	{
		const prefix string = ",\"en:milk\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnMilk))
	}
	{
		const prefix string = ",\"en:onion\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnOnion))
	}
	{
		const prefix string = ",\"en:potato\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnPotato))
	}
	{
		const prefix string = ",\"en:potato_starch\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnPotatoStarch))
	}
	{
		const prefix string = ",\"en:rice_flour\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnRiceFlour))
	}
	{
		const prefix string = ",\"en:salt\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnSalt))
	}
	{
		const prefix string = ",\"en:spice\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnSpice))
	}
	{
		const prefix string = ",\"en:sugar\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnSugar))
	}
	{
		const prefix string = ",\"en:sunflower_oil\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnSunflowerOil))
	}
	{
		const prefix string = ",\"en:tomato_powder\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnTomatoPowder))
	}
	{
		const prefix string = ",\"en:water\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnWater))
	}
	{
		const prefix string = ",\"en:yeast_powder\":"
		out.RawString(prefix)
		out.Float64(float64(in.EnYeastPowder))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode27(in *jlexer.Lexer, out *struct {
	ClimateChange float64 `json:"Climate_change"`
	EFSingleScore float64 `json:"EF_single_score"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Climate_change":
			out.ClimateChange = float64(in.Float64())
		case "EF_single_score":
			out.EFSingleScore = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode27(out *jwriter.Writer, in struct {
	ClimateChange float64 `json:"Climate_change"`
	EFSingleScore float64 `json:"EF_single_score"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Climate_change\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.ClimateChange))
	}
	{
		const prefix string = ",\"EF_single_score\":"
		out.RawString(prefix)
		out.Float64(float64(in.EFSingleScore))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode3(in *jlexer.Lexer, out *struct {
	Adjustments struct {
		OriginsOfIngredients struct {
			AggregatedOrigins []struct {
				EpiScore            string      `json:"epi_score"`
				Origin              string      `json:"origin"`
				Percent             int         `json:"percent"`
				TransportationScore interface{} `json:"transportation_score"`
			} `json:"aggregated_origins"`
			EpiScore                int      `json:"epi_score"`
			EpiValue                int      `json:"epi_value"`
			OriginsFromOriginsField []string `json:"origins_from_origins_field"`
			TransportationScore     int      `json:"transportation_score"`
			TransportationScores    struct {
				Ad    int `json:"ad"`
				Al    int `json:"al"`
				At    int `json:"at"`
				Ax    int `json:"ax"`
				Ba    int `json:"ba"`
				Be    int `json:"be"`
				Bg    int `json:"bg"`
				Ch    int `json:"ch"`
				Cy    int `json:"cy"`
				Cz    int `json:"cz"`
				De    int `json:"de"`
				Dk    int `json:"dk"`
				Dz    int `json:"dz"`
				Ee    int `json:"ee"`
				Eg    int `json:"eg"`
				Es    int `json:"es"`
				Fi    int `json:"fi"`
				Fo    int `json:"fo"`
				Fr    int `json:"fr"`
				Gg    int `json:"gg"`
				Gi    int `json:"gi"`
				Gr    int `json:"gr"`
				Hr    int `json:"hr"`
				Hu    int `json:"hu"`
				Ie    int `json:"ie"`
				Il    int `json:"il"`
				Im    int `json:"im"`
				Is    int `json:"is"`
				It    int `json:"it"`
				Je    int `json:"je"`
				Lb    int `json:"lb"`
				Li    int `json:"li"`
				Lt    int `json:"lt"`
				Lu    int `json:"lu"`
				Lv    int `json:"lv"`
				Ly    int `json:"ly"`
				Ma    int `json:"ma"`
				Mc    int `json:"mc"`
				Md    int `json:"md"`
				Me    int `json:"me"`
				Mk    int `json:"mk"`
				Mt    int `json:"mt"`
				Nl    int `json:"nl"`
				No    int `json:"no"`
				Pl    int `json:"pl"`
				Ps    int `json:"ps"`
				Pt    int `json:"pt"`
				Ro    int `json:"ro"`
				Rs    int `json:"rs"`
				Se    int `json:"se"`
				Si    int `json:"si"`
				Sj    int `json:"sj"`
				Sk    int `json:"sk"`
				Sm    int `json:"sm"`
				Sy    int `json:"sy"`
				Tn    int `json:"tn"`
				Tr    int `json:"tr"`
				Ua    int `json:"ua"`
				Uk    int `json:"uk"`
				Us    int `json:"us"`
				Va    int `json:"va"`
				World int `json:"world"`
				Xk    int `json:"xk"`
			} `json:"transportation_scores"`
			TransportationValue  int `json:"transportation_value"`
			TransportationValues struct {
				Ad    int `json:"ad"`
				Al    int `json:"al"`
				At    int `json:"at"`
				Ax    int `json:"ax"`
				Ba    int `json:"ba"`
				Be    int `json:"be"`
				Bg    int `json:"bg"`
				Ch    int `json:"ch"`
				Cy    int `json:"cy"`
				Cz    int `json:"cz"`
				De    int `json:"de"`
				Dk    int `json:"dk"`
				Dz    int `json:"dz"`
				Ee    int `json:"ee"`
				Eg    int `json:"eg"`
				Es    int `json:"es"`
				Fi    int `json:"fi"`
				Fo    int `json:"fo"`
				Fr    int `json:"fr"`
				Gg    int `json:"gg"`
				Gi    int `json:"gi"`
				Gr    int `json:"gr"`
				Hr    int `json:"hr"`
				Hu    int `json:"hu"`
				Ie    int `json:"ie"`
				Il    int `json:"il"`
				Im    int `json:"im"`
				Is    int `json:"is"`
				It    int `json:"it"`
				Je    int `json:"je"`
				Lb    int `json:"lb"`
				Li    int `json:"li"`
				Lt    int `json:"lt"`
				Lu    int `json:"lu"`
				Lv    int `json:"lv"`
				Ly    int `json:"ly"`
				Ma    int `json:"ma"`
				Mc    int `json:"mc"`
				Md    int `json:"md"`
				Me    int `json:"me"`
				Mk    int `json:"mk"`
				Mt    int `json:"mt"`
				Nl    int `json:"nl"`
				No    int `json:"no"`
				Pl    int `json:"pl"`
				Ps    int `json:"ps"`
				Pt    int `json:"pt"`
				Ro    int `json:"ro"`
				Rs    int `json:"rs"`
				Se    int `json:"se"`
				Si    int `json:"si"`
				Sj    int `json:"sj"`
				Sk    int `json:"sk"`
				Sm    int `json:"sm"`
				Sy    int `json:"sy"`
				Tn    int `json:"tn"`
				Tr    int `json:"tr"`
				Ua    int `json:"ua"`
				Uk    int `json:"uk"`
				Us    int `json:"us"`
				Va    int `json:"va"`
				World int `json:"world"`
				Xk    int `json:"xk"`
			} `json:"transportation_values"`
			Value  int `json:"value"`
			Values struct {
				Ad    int `json:"ad"`
				Al    int `json:"al"`
				At    int `json:"at"`
				Ax    int `json:"ax"`
				Ba    int `json:"ba"`
				Be    int `json:"be"`
				Bg    int `json:"bg"`
				Ch    int `json:"ch"`
				Cy    int `json:"cy"`
				Cz    int `json:"cz"`
				De    int `json:"de"`
				Dk    int `json:"dk"`
				Dz    int `json:"dz"`
				Ee    int `json:"ee"`
				Eg    int `json:"eg"`
				Es    int `json:"es"`
				Fi    int `json:"fi"`
				Fo    int `json:"fo"`
				Fr    int `json:"fr"`
				Gg    int `json:"gg"`
				Gi    int `json:"gi"`
				Gr    int `json:"gr"`
				Hr    int `json:"hr"`
				Hu    int `json:"hu"`
				Ie    int `json:"ie"`
				Il    int `json:"il"`
				Im    int `json:"im"`
				Is    int `json:"is"`
				It    int `json:"it"`
				Je    int `json:"je"`
				Lb    int `json:"lb"`
				Li    int `json:"li"`
				Lt    int `json:"lt"`
				Lu    int `json:"lu"`
				Lv    int `json:"lv"`
				Ly    int `json:"ly"`
				Ma    int `json:"ma"`
				Mc    int `json:"mc"`
				Md    int `json:"md"`
				Me    int `json:"me"`
				Mk    int `json:"mk"`
				Mt    int `json:"mt"`
				Nl    int `json:"nl"`
				No    int `json:"no"`
				Pl    int `json:"pl"`
				Ps    int `json:"ps"`
				Pt    int `json:"pt"`
				Ro    int `json:"ro"`
				Rs    int `json:"rs"`
				Se    int `json:"se"`
				Si    int `json:"si"`
				Sj    int `json:"sj"`
				Sk    int `json:"sk"`
				Sm    int `json:"sm"`
				Sy    int `json:"sy"`
				Tn    int `json:"tn"`
				Tr    int `json:"tr"`
				Ua    int `json:"ua"`
				Uk    int `json:"uk"`
				Us    int `json:"us"`
				Va    int `json:"va"`
				World int `json:"world"`
				Xk    int `json:"xk"`
			} `json:"values"`
			Warning string `json:"warning"`
		} `json:"origins_of_ingredients"`
		Packaging struct {
			NonRecyclableAndNonBiodegradableMaterials int `json:"non_recyclable_and_non_biodegradable_materials"`
			Packagings                                []struct {
				EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
				EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
				Material                         string `json:"material"`
				NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
				Shape                            string `json:"shape"`
			} `json:"packagings"`
			Score int `json:"score"`
			Value int `json:"value"`
		} `json:"packaging"`
		ProductionSystem struct {
			Labels  []interface{} `json:"labels"`
			Value   int           `json:"value"`
			Warning string        `json:"warning"`
		} `json:"production_system"`
		ThreatenedSpecies struct{} `json:"threatened_species"`
	} `json:"adjustments"`
	Agribalyse struct {
		AgribalyseFoodCode string  `json:"agribalyse_food_code"`
		Co2Agriculture     float64 `json:"co2_agriculture"`
		Co2Consumption     int     `json:"co2_consumption"`
		Co2Distribution    float64 `json:"co2_distribution"`
		Co2Packaging       float64 `json:"co2_packaging"`
		Co2Processing      float64 `json:"co2_processing"`
		Co2Total           float64 `json:"co2_total"`
		Co2Transportation  float64 `json:"co2_transportation"`
		Code               string  `json:"code"`
		Dqr                string  `json:"dqr"`
		EfAgriculture      float64 `json:"ef_agriculture"`
		EfConsumption      int     `json:"ef_consumption"`
		EfDistribution     float64 `json:"ef_distribution"`
		EfPackaging        float64 `json:"ef_packaging"`
		EfProcessing       float64 `json:"ef_processing"`
		EfTotal            float64 `json:"ef_total"`
		EfTransportation   float64 `json:"ef_transportation"`
		IsBeverage         int     `json:"is_beverage"`
		NameEn             string  `json:"name_en"`
		NameFr             string  `json:"name_fr"`
		Score              int     `json:"score"`
		Version            string  `json:"version"`
	} `json:"agribalyse"`
	Grade  string `json:"grade"`
	Grades struct {
		Ad    string `json:"ad"`
		Al    string `json:"al"`
		At    string `json:"at"`
		Ax    string `json:"ax"`
		Ba    string `json:"ba"`
		Be    string `json:"be"`
		Bg    string `json:"bg"`
		Ch    string `json:"ch"`
		Cy    string `json:"cy"`
		Cz    string `json:"cz"`
		De    string `json:"de"`
		Dk    string `json:"dk"`
		Dz    string `json:"dz"`
		Ee    string `json:"ee"`
		Eg    string `json:"eg"`
		Es    string `json:"es"`
		Fi    string `json:"fi"`
		Fo    string `json:"fo"`
		Fr    string `json:"fr"`
		Gg    string `json:"gg"`
		Gi    string `json:"gi"`
		Gr    string `json:"gr"`
		Hr    string `json:"hr"`
		Hu    string `json:"hu"`
		Ie    string `json:"ie"`
		Il    string `json:"il"`
		Im    string `json:"im"`
		Is    string `json:"is"`
		It    string `json:"it"`
		Je    string `json:"je"`
		Lb    string `json:"lb"`
		Li    string `json:"li"`
		Lt    string `json:"lt"`
		Lu    string `json:"lu"`
		Lv    string `json:"lv"`
		Ly    string `json:"ly"`
		Ma    string `json:"ma"`
		Mc    string `json:"mc"`
		Md    string `json:"md"`
		Me    string `json:"me"`
		Mk    string `json:"mk"`
		Mt    string `json:"mt"`
		Nl    string `json:"nl"`
		No    string `json:"no"`
		Pl    string `json:"pl"`
		Ps    string `json:"ps"`
		Pt    string `json:"pt"`
		Ro    string `json:"ro"`
		Rs    string `json:"rs"`
		Se    string `json:"se"`
		Si    string `json:"si"`
		Sj    string `json:"sj"`
		Sk    string `json:"sk"`
		Sm    string `json:"sm"`
		Sy    string `json:"sy"`
		Tn    string `json:"tn"`
		Tr    string `json:"tr"`
		Ua    string `json:"ua"`
		Uk    string `json:"uk"`
		Us    string `json:"us"`
		Va    string `json:"va"`
		World string `json:"world"`
		Xk    string `json:"xk"`
	} `json:"grades"`
	Missing struct {
		Labels  int `json:"labels"`
		Origins int `json:"origins"`
	} `json:"missing"`
	MissingDataWarning int `json:"missing_data_warning"`
	PreviousData       struct {
		Agribalyse struct {
			AgribalyseFoodCode string  `json:"agribalyse_food_code"`
			Co2Agriculture     float64 `json:"co2_agriculture"`
			Co2Consumption     int     `json:"co2_consumption"`
			Co2Distribution    float64 `json:"co2_distribution"`
			Co2Packaging       float64 `json:"co2_packaging"`
			Co2Processing      float64 `json:"co2_processing"`
			Co2Total           float64 `json:"co2_total"`
			Co2Transportation  float64 `json:"co2_transportation"`
			Code               string  `json:"code"`
			Dqr                string  `json:"dqr"`
			EfAgriculture      float64 `json:"ef_agriculture"`
			EfConsumption      int     `json:"ef_consumption"`
			EfDistribution     float64 `json:"ef_distribution"`
			EfPackaging        float64 `json:"ef_packaging"`
			EfProcessing       float64 `json:"ef_processing"`
			EfTotal            float64 `json:"ef_total"`
			EfTransportation   float64 `json:"ef_transportation"`
			IsBeverage         int     `json:"is_beverage"`
			NameEn             string  `json:"name_en"`
			NameFr             string  `json:"name_fr"`
			Score              int     `json:"score"`
		} `json:"agribalyse"`
		Grade string `json:"grade"`
		Score int    `json:"score"`
	} `json:"previous_data"`
	Score  int `json:"score"`
	Scores struct {
		Ad    int `json:"ad"`
		Al    int `json:"al"`
		At    int `json:"at"`
		Ax    int `json:"ax"`
		Ba    int `json:"ba"`
		Be    int `json:"be"`
		Bg    int `json:"bg"`
		Ch    int `json:"ch"`
		Cy    int `json:"cy"`
		Cz    int `json:"cz"`
		De    int `json:"de"`
		Dk    int `json:"dk"`
		Dz    int `json:"dz"`
		Ee    int `json:"ee"`
		Eg    int `json:"eg"`
		Es    int `json:"es"`
		Fi    int `json:"fi"`
		Fo    int `json:"fo"`
		Fr    int `json:"fr"`
		Gg    int `json:"gg"`
		Gi    int `json:"gi"`
		Gr    int `json:"gr"`
		Hr    int `json:"hr"`
		Hu    int `json:"hu"`
		Ie    int `json:"ie"`
		Il    int `json:"il"`
		Im    int `json:"im"`
		Is    int `json:"is"`
		It    int `json:"it"`
		Je    int `json:"je"`
		Lb    int `json:"lb"`
		Li    int `json:"li"`
		Lt    int `json:"lt"`
		Lu    int `json:"lu"`
		Lv    int `json:"lv"`
		Ly    int `json:"ly"`
		Ma    int `json:"ma"`
		Mc    int `json:"mc"`
		Md    int `json:"md"`
		Me    int `json:"me"`
		Mk    int `json:"mk"`
		Mt    int `json:"mt"`
		Nl    int `json:"nl"`
		No    int `json:"no"`
		Pl    int `json:"pl"`
		Ps    int `json:"ps"`
		Pt    int `json:"pt"`
		Ro    int `json:"ro"`
		Rs    int `json:"rs"`
		Se    int `json:"se"`
		Si    int `json:"si"`
		Sj    int `json:"sj"`
		Sk    int `json:"sk"`
		Sm    int `json:"sm"`
		Sy    int `json:"sy"`
		Tn    int `json:"tn"`
		Tr    int `json:"tr"`
		Ua    int `json:"ua"`
		Uk    int `json:"uk"`
		Us    int `json:"us"`
		Va    int `json:"va"`
		World int `json:"world"`
		Xk    int `json:"xk"`
	} `json:"scores"`
	Status string `json:"status"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "adjustments":
			easyjsonC4ff3609Decode31(in, &out.Adjustments)
		case "agribalyse":
			easyjsonC4ff3609Decode32(in, &out.Agribalyse)
		case "grade":
			out.Grade = string(in.String())
		case "grades":
			easyjsonC4ff3609Decode33(in, &out.Grades)
		case "missing":
			easyjsonC4ff3609Decode34(in, &out.Missing)
		case "missing_data_warning":
			out.MissingDataWarning = int(in.Int())
		case "previous_data":
			easyjsonC4ff3609Decode35(in, &out.PreviousData)
		case "score":
			out.Score = int(in.Int())
		case "scores":
			easyjsonC4ff3609Decode36(in, &out.Scores)
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode3(out *jwriter.Writer, in struct {
	Adjustments struct {
		OriginsOfIngredients struct {
			AggregatedOrigins []struct {
				EpiScore            string      `json:"epi_score"`
				Origin              string      `json:"origin"`
				Percent             int         `json:"percent"`
				TransportationScore interface{} `json:"transportation_score"`
			} `json:"aggregated_origins"`
			EpiScore                int      `json:"epi_score"`
			EpiValue                int      `json:"epi_value"`
			OriginsFromOriginsField []string `json:"origins_from_origins_field"`
			TransportationScore     int      `json:"transportation_score"`
			TransportationScores    struct {
				Ad    int `json:"ad"`
				Al    int `json:"al"`
				At    int `json:"at"`
				Ax    int `json:"ax"`
				Ba    int `json:"ba"`
				Be    int `json:"be"`
				Bg    int `json:"bg"`
				Ch    int `json:"ch"`
				Cy    int `json:"cy"`
				Cz    int `json:"cz"`
				De    int `json:"de"`
				Dk    int `json:"dk"`
				Dz    int `json:"dz"`
				Ee    int `json:"ee"`
				Eg    int `json:"eg"`
				Es    int `json:"es"`
				Fi    int `json:"fi"`
				Fo    int `json:"fo"`
				Fr    int `json:"fr"`
				Gg    int `json:"gg"`
				Gi    int `json:"gi"`
				Gr    int `json:"gr"`
				Hr    int `json:"hr"`
				Hu    int `json:"hu"`
				Ie    int `json:"ie"`
				Il    int `json:"il"`
				Im    int `json:"im"`
				Is    int `json:"is"`
				It    int `json:"it"`
				Je    int `json:"je"`
				Lb    int `json:"lb"`
				Li    int `json:"li"`
				Lt    int `json:"lt"`
				Lu    int `json:"lu"`
				Lv    int `json:"lv"`
				Ly    int `json:"ly"`
				Ma    int `json:"ma"`
				Mc    int `json:"mc"`
				Md    int `json:"md"`
				Me    int `json:"me"`
				Mk    int `json:"mk"`
				Mt    int `json:"mt"`
				Nl    int `json:"nl"`
				No    int `json:"no"`
				Pl    int `json:"pl"`
				Ps    int `json:"ps"`
				Pt    int `json:"pt"`
				Ro    int `json:"ro"`
				Rs    int `json:"rs"`
				Se    int `json:"se"`
				Si    int `json:"si"`
				Sj    int `json:"sj"`
				Sk    int `json:"sk"`
				Sm    int `json:"sm"`
				Sy    int `json:"sy"`
				Tn    int `json:"tn"`
				Tr    int `json:"tr"`
				Ua    int `json:"ua"`
				Uk    int `json:"uk"`
				Us    int `json:"us"`
				Va    int `json:"va"`
				World int `json:"world"`
				Xk    int `json:"xk"`
			} `json:"transportation_scores"`
			TransportationValue  int `json:"transportation_value"`
			TransportationValues struct {
				Ad    int `json:"ad"`
				Al    int `json:"al"`
				At    int `json:"at"`
				Ax    int `json:"ax"`
				Ba    int `json:"ba"`
				Be    int `json:"be"`
				Bg    int `json:"bg"`
				Ch    int `json:"ch"`
				Cy    int `json:"cy"`
				Cz    int `json:"cz"`
				De    int `json:"de"`
				Dk    int `json:"dk"`
				Dz    int `json:"dz"`
				Ee    int `json:"ee"`
				Eg    int `json:"eg"`
				Es    int `json:"es"`
				Fi    int `json:"fi"`
				Fo    int `json:"fo"`
				Fr    int `json:"fr"`
				Gg    int `json:"gg"`
				Gi    int `json:"gi"`
				Gr    int `json:"gr"`
				Hr    int `json:"hr"`
				Hu    int `json:"hu"`
				Ie    int `json:"ie"`
				Il    int `json:"il"`
				Im    int `json:"im"`
				Is    int `json:"is"`
				It    int `json:"it"`
				Je    int `json:"je"`
				Lb    int `json:"lb"`
				Li    int `json:"li"`
				Lt    int `json:"lt"`
				Lu    int `json:"lu"`
				Lv    int `json:"lv"`
				Ly    int `json:"ly"`
				Ma    int `json:"ma"`
				Mc    int `json:"mc"`
				Md    int `json:"md"`
				Me    int `json:"me"`
				Mk    int `json:"mk"`
				Mt    int `json:"mt"`
				Nl    int `json:"nl"`
				No    int `json:"no"`
				Pl    int `json:"pl"`
				Ps    int `json:"ps"`
				Pt    int `json:"pt"`
				Ro    int `json:"ro"`
				Rs    int `json:"rs"`
				Se    int `json:"se"`
				Si    int `json:"si"`
				Sj    int `json:"sj"`
				Sk    int `json:"sk"`
				Sm    int `json:"sm"`
				Sy    int `json:"sy"`
				Tn    int `json:"tn"`
				Tr    int `json:"tr"`
				Ua    int `json:"ua"`
				Uk    int `json:"uk"`
				Us    int `json:"us"`
				Va    int `json:"va"`
				World int `json:"world"`
				Xk    int `json:"xk"`
			} `json:"transportation_values"`
			Value  int `json:"value"`
			Values struct {
				Ad    int `json:"ad"`
				Al    int `json:"al"`
				At    int `json:"at"`
				Ax    int `json:"ax"`
				Ba    int `json:"ba"`
				Be    int `json:"be"`
				Bg    int `json:"bg"`
				Ch    int `json:"ch"`
				Cy    int `json:"cy"`
				Cz    int `json:"cz"`
				De    int `json:"de"`
				Dk    int `json:"dk"`
				Dz    int `json:"dz"`
				Ee    int `json:"ee"`
				Eg    int `json:"eg"`
				Es    int `json:"es"`
				Fi    int `json:"fi"`
				Fo    int `json:"fo"`
				Fr    int `json:"fr"`
				Gg    int `json:"gg"`
				Gi    int `json:"gi"`
				Gr    int `json:"gr"`
				Hr    int `json:"hr"`
				Hu    int `json:"hu"`
				Ie    int `json:"ie"`
				Il    int `json:"il"`
				Im    int `json:"im"`
				Is    int `json:"is"`
				It    int `json:"it"`
				Je    int `json:"je"`
				Lb    int `json:"lb"`
				Li    int `json:"li"`
				Lt    int `json:"lt"`
				Lu    int `json:"lu"`
				Lv    int `json:"lv"`
				Ly    int `json:"ly"`
				Ma    int `json:"ma"`
				Mc    int `json:"mc"`
				Md    int `json:"md"`
				Me    int `json:"me"`
				Mk    int `json:"mk"`
				Mt    int `json:"mt"`
				Nl    int `json:"nl"`
				No    int `json:"no"`
				Pl    int `json:"pl"`
				Ps    int `json:"ps"`
				Pt    int `json:"pt"`
				Ro    int `json:"ro"`
				Rs    int `json:"rs"`
				Se    int `json:"se"`
				Si    int `json:"si"`
				Sj    int `json:"sj"`
				Sk    int `json:"sk"`
				Sm    int `json:"sm"`
				Sy    int `json:"sy"`
				Tn    int `json:"tn"`
				Tr    int `json:"tr"`
				Ua    int `json:"ua"`
				Uk    int `json:"uk"`
				Us    int `json:"us"`
				Va    int `json:"va"`
				World int `json:"world"`
				Xk    int `json:"xk"`
			} `json:"values"`
			Warning string `json:"warning"`
		} `json:"origins_of_ingredients"`
		Packaging struct {
			NonRecyclableAndNonBiodegradableMaterials int `json:"non_recyclable_and_non_biodegradable_materials"`
			Packagings                                []struct {
				EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
				EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
				Material                         string `json:"material"`
				NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
				Shape                            string `json:"shape"`
			} `json:"packagings"`
			Score int `json:"score"`
			Value int `json:"value"`
		} `json:"packaging"`
		ProductionSystem struct {
			Labels  []interface{} `json:"labels"`
			Value   int           `json:"value"`
			Warning string        `json:"warning"`
		} `json:"production_system"`
		ThreatenedSpecies struct{} `json:"threatened_species"`
	} `json:"adjustments"`
	Agribalyse struct {
		AgribalyseFoodCode string  `json:"agribalyse_food_code"`
		Co2Agriculture     float64 `json:"co2_agriculture"`
		Co2Consumption     int     `json:"co2_consumption"`
		Co2Distribution    float64 `json:"co2_distribution"`
		Co2Packaging       float64 `json:"co2_packaging"`
		Co2Processing      float64 `json:"co2_processing"`
		Co2Total           float64 `json:"co2_total"`
		Co2Transportation  float64 `json:"co2_transportation"`
		Code               string  `json:"code"`
		Dqr                string  `json:"dqr"`
		EfAgriculture      float64 `json:"ef_agriculture"`
		EfConsumption      int     `json:"ef_consumption"`
		EfDistribution     float64 `json:"ef_distribution"`
		EfPackaging        float64 `json:"ef_packaging"`
		EfProcessing       float64 `json:"ef_processing"`
		EfTotal            float64 `json:"ef_total"`
		EfTransportation   float64 `json:"ef_transportation"`
		IsBeverage         int     `json:"is_beverage"`
		NameEn             string  `json:"name_en"`
		NameFr             string  `json:"name_fr"`
		Score              int     `json:"score"`
		Version            string  `json:"version"`
	} `json:"agribalyse"`
	Grade  string `json:"grade"`
	Grades struct {
		Ad    string `json:"ad"`
		Al    string `json:"al"`
		At    string `json:"at"`
		Ax    string `json:"ax"`
		Ba    string `json:"ba"`
		Be    string `json:"be"`
		Bg    string `json:"bg"`
		Ch    string `json:"ch"`
		Cy    string `json:"cy"`
		Cz    string `json:"cz"`
		De    string `json:"de"`
		Dk    string `json:"dk"`
		Dz    string `json:"dz"`
		Ee    string `json:"ee"`
		Eg    string `json:"eg"`
		Es    string `json:"es"`
		Fi    string `json:"fi"`
		Fo    string `json:"fo"`
		Fr    string `json:"fr"`
		Gg    string `json:"gg"`
		Gi    string `json:"gi"`
		Gr    string `json:"gr"`
		Hr    string `json:"hr"`
		Hu    string `json:"hu"`
		Ie    string `json:"ie"`
		Il    string `json:"il"`
		Im    string `json:"im"`
		Is    string `json:"is"`
		It    string `json:"it"`
		Je    string `json:"je"`
		Lb    string `json:"lb"`
		Li    string `json:"li"`
		Lt    string `json:"lt"`
		Lu    string `json:"lu"`
		Lv    string `json:"lv"`
		Ly    string `json:"ly"`
		Ma    string `json:"ma"`
		Mc    string `json:"mc"`
		Md    string `json:"md"`
		Me    string `json:"me"`
		Mk    string `json:"mk"`
		Mt    string `json:"mt"`
		Nl    string `json:"nl"`
		No    string `json:"no"`
		Pl    string `json:"pl"`
		Ps    string `json:"ps"`
		Pt    string `json:"pt"`
		Ro    string `json:"ro"`
		Rs    string `json:"rs"`
		Se    string `json:"se"`
		Si    string `json:"si"`
		Sj    string `json:"sj"`
		Sk    string `json:"sk"`
		Sm    string `json:"sm"`
		Sy    string `json:"sy"`
		Tn    string `json:"tn"`
		Tr    string `json:"tr"`
		Ua    string `json:"ua"`
		Uk    string `json:"uk"`
		Us    string `json:"us"`
		Va    string `json:"va"`
		World string `json:"world"`
		Xk    string `json:"xk"`
	} `json:"grades"`
	Missing struct {
		Labels  int `json:"labels"`
		Origins int `json:"origins"`
	} `json:"missing"`
	MissingDataWarning int `json:"missing_data_warning"`
	PreviousData       struct {
		Agribalyse struct {
			AgribalyseFoodCode string  `json:"agribalyse_food_code"`
			Co2Agriculture     float64 `json:"co2_agriculture"`
			Co2Consumption     int     `json:"co2_consumption"`
			Co2Distribution    float64 `json:"co2_distribution"`
			Co2Packaging       float64 `json:"co2_packaging"`
			Co2Processing      float64 `json:"co2_processing"`
			Co2Total           float64 `json:"co2_total"`
			Co2Transportation  float64 `json:"co2_transportation"`
			Code               string  `json:"code"`
			Dqr                string  `json:"dqr"`
			EfAgriculture      float64 `json:"ef_agriculture"`
			EfConsumption      int     `json:"ef_consumption"`
			EfDistribution     float64 `json:"ef_distribution"`
			EfPackaging        float64 `json:"ef_packaging"`
			EfProcessing       float64 `json:"ef_processing"`
			EfTotal            float64 `json:"ef_total"`
			EfTransportation   float64 `json:"ef_transportation"`
			IsBeverage         int     `json:"is_beverage"`
			NameEn             string  `json:"name_en"`
			NameFr             string  `json:"name_fr"`
			Score              int     `json:"score"`
		} `json:"agribalyse"`
		Grade string `json:"grade"`
		Score int    `json:"score"`
	} `json:"previous_data"`
	Score  int `json:"score"`
	Scores struct {
		Ad    int `json:"ad"`
		Al    int `json:"al"`
		At    int `json:"at"`
		Ax    int `json:"ax"`
		Ba    int `json:"ba"`
		Be    int `json:"be"`
		Bg    int `json:"bg"`
		Ch    int `json:"ch"`
		Cy    int `json:"cy"`
		Cz    int `json:"cz"`
		De    int `json:"de"`
		Dk    int `json:"dk"`
		Dz    int `json:"dz"`
		Ee    int `json:"ee"`
		Eg    int `json:"eg"`
		Es    int `json:"es"`
		Fi    int `json:"fi"`
		Fo    int `json:"fo"`
		Fr    int `json:"fr"`
		Gg    int `json:"gg"`
		Gi    int `json:"gi"`
		Gr    int `json:"gr"`
		Hr    int `json:"hr"`
		Hu    int `json:"hu"`
		Ie    int `json:"ie"`
		Il    int `json:"il"`
		Im    int `json:"im"`
		Is    int `json:"is"`
		It    int `json:"it"`
		Je    int `json:"je"`
		Lb    int `json:"lb"`
		Li    int `json:"li"`
		Lt    int `json:"lt"`
		Lu    int `json:"lu"`
		Lv    int `json:"lv"`
		Ly    int `json:"ly"`
		Ma    int `json:"ma"`
		Mc    int `json:"mc"`
		Md    int `json:"md"`
		Me    int `json:"me"`
		Mk    int `json:"mk"`
		Mt    int `json:"mt"`
		Nl    int `json:"nl"`
		No    int `json:"no"`
		Pl    int `json:"pl"`
		Ps    int `json:"ps"`
		Pt    int `json:"pt"`
		Ro    int `json:"ro"`
		Rs    int `json:"rs"`
		Se    int `json:"se"`
		Si    int `json:"si"`
		Sj    int `json:"sj"`
		Sk    int `json:"sk"`
		Sm    int `json:"sm"`
		Sy    int `json:"sy"`
		Tn    int `json:"tn"`
		Tr    int `json:"tr"`
		Ua    int `json:"ua"`
		Uk    int `json:"uk"`
		Us    int `json:"us"`
		Va    int `json:"va"`
		World int `json:"world"`
		Xk    int `json:"xk"`
	} `json:"scores"`
	Status string `json:"status"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"adjustments\":"
		out.RawString(prefix[1:])
		easyjsonC4ff3609Encode31(out, in.Adjustments)
	}
	{
		const prefix string = ",\"agribalyse\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode32(out, in.Agribalyse)
	}
	{
		const prefix string = ",\"grade\":"
		out.RawString(prefix)
		out.String(string(in.Grade))
	}
	{
		const prefix string = ",\"grades\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode33(out, in.Grades)
	}
	{
		const prefix string = ",\"missing\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode34(out, in.Missing)
	}
	{
		const prefix string = ",\"missing_data_warning\":"
		out.RawString(prefix)
		out.Int(int(in.MissingDataWarning))
	}
	{
		const prefix string = ",\"previous_data\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode35(out, in.PreviousData)
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	{
		const prefix string = ",\"scores\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode36(out, in.Scores)
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode36(in *jlexer.Lexer, out *struct {
	Ad    int `json:"ad"`
	Al    int `json:"al"`
	At    int `json:"at"`
	Ax    int `json:"ax"`
	Ba    int `json:"ba"`
	Be    int `json:"be"`
	Bg    int `json:"bg"`
	Ch    int `json:"ch"`
	Cy    int `json:"cy"`
	Cz    int `json:"cz"`
	De    int `json:"de"`
	Dk    int `json:"dk"`
	Dz    int `json:"dz"`
	Ee    int `json:"ee"`
	Eg    int `json:"eg"`
	Es    int `json:"es"`
	Fi    int `json:"fi"`
	Fo    int `json:"fo"`
	Fr    int `json:"fr"`
	Gg    int `json:"gg"`
	Gi    int `json:"gi"`
	Gr    int `json:"gr"`
	Hr    int `json:"hr"`
	Hu    int `json:"hu"`
	Ie    int `json:"ie"`
	Il    int `json:"il"`
	Im    int `json:"im"`
	Is    int `json:"is"`
	It    int `json:"it"`
	Je    int `json:"je"`
	Lb    int `json:"lb"`
	Li    int `json:"li"`
	Lt    int `json:"lt"`
	Lu    int `json:"lu"`
	Lv    int `json:"lv"`
	Ly    int `json:"ly"`
	Ma    int `json:"ma"`
	Mc    int `json:"mc"`
	Md    int `json:"md"`
	Me    int `json:"me"`
	Mk    int `json:"mk"`
	Mt    int `json:"mt"`
	Nl    int `json:"nl"`
	No    int `json:"no"`
	Pl    int `json:"pl"`
	Ps    int `json:"ps"`
	Pt    int `json:"pt"`
	Ro    int `json:"ro"`
	Rs    int `json:"rs"`
	Se    int `json:"se"`
	Si    int `json:"si"`
	Sj    int `json:"sj"`
	Sk    int `json:"sk"`
	Sm    int `json:"sm"`
	Sy    int `json:"sy"`
	Tn    int `json:"tn"`
	Tr    int `json:"tr"`
	Ua    int `json:"ua"`
	Uk    int `json:"uk"`
	Us    int `json:"us"`
	Va    int `json:"va"`
	World int `json:"world"`
	Xk    int `json:"xk"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ad":
			out.Ad = int(in.Int())
		case "al":
			out.Al = int(in.Int())
		case "at":
			out.At = int(in.Int())
		case "ax":
			out.Ax = int(in.Int())
		case "ba":
			out.Ba = int(in.Int())
		case "be":
			out.Be = int(in.Int())
		case "bg":
			out.Bg = int(in.Int())
		case "ch":
			out.Ch = int(in.Int())
		case "cy":
			out.Cy = int(in.Int())
		case "cz":
			out.Cz = int(in.Int())
		case "de":
			out.De = int(in.Int())
		case "dk":
			out.Dk = int(in.Int())
		case "dz":
			out.Dz = int(in.Int())
		case "ee":
			out.Ee = int(in.Int())
		case "eg":
			out.Eg = int(in.Int())
		case "es":
			out.Es = int(in.Int())
		case "fi":
			out.Fi = int(in.Int())
		case "fo":
			out.Fo = int(in.Int())
		case "fr":
			out.Fr = int(in.Int())
		case "gg":
			out.Gg = int(in.Int())
		case "gi":
			out.Gi = int(in.Int())
		case "gr":
			out.Gr = int(in.Int())
		case "hr":
			out.Hr = int(in.Int())
		case "hu":
			out.Hu = int(in.Int())
		case "ie":
			out.Ie = int(in.Int())
		case "il":
			out.Il = int(in.Int())
		case "im":
			out.Im = int(in.Int())
		case "is":
			out.Is = int(in.Int())
		case "it":
			out.It = int(in.Int())
		case "je":
			out.Je = int(in.Int())
		case "lb":
			out.Lb = int(in.Int())
		case "li":
			out.Li = int(in.Int())
		case "lt":
			out.Lt = int(in.Int())
		case "lu":
			out.Lu = int(in.Int())
		case "lv":
			out.Lv = int(in.Int())
		case "ly":
			out.Ly = int(in.Int())
		case "ma":
			out.Ma = int(in.Int())
		case "mc":
			out.Mc = int(in.Int())
		case "md":
			out.Md = int(in.Int())
		case "me":
			out.Me = int(in.Int())
		case "mk":
			out.Mk = int(in.Int())
		case "mt":
			out.Mt = int(in.Int())
		case "nl":
			out.Nl = int(in.Int())
		case "no":
			out.No = int(in.Int())
		case "pl":
			out.Pl = int(in.Int())
		case "ps":
			out.Ps = int(in.Int())
		case "pt":
			out.Pt = int(in.Int())
		case "ro":
			out.Ro = int(in.Int())
		case "rs":
			out.Rs = int(in.Int())
		case "se":
			out.Se = int(in.Int())
		case "si":
			out.Si = int(in.Int())
		case "sj":
			out.Sj = int(in.Int())
		case "sk":
			out.Sk = int(in.Int())
		case "sm":
			out.Sm = int(in.Int())
		case "sy":
			out.Sy = int(in.Int())
		case "tn":
			out.Tn = int(in.Int())
		case "tr":
			out.Tr = int(in.Int())
		case "ua":
			out.Ua = int(in.Int())
		case "uk":
			out.Uk = int(in.Int())
		case "us":
			out.Us = int(in.Int())
		case "va":
			out.Va = int(in.Int())
		case "world":
			out.World = int(in.Int())
		case "xk":
			out.Xk = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode36(out *jwriter.Writer, in struct {
	Ad    int `json:"ad"`
	Al    int `json:"al"`
	At    int `json:"at"`
	Ax    int `json:"ax"`
	Ba    int `json:"ba"`
	Be    int `json:"be"`
	Bg    int `json:"bg"`
	Ch    int `json:"ch"`
	Cy    int `json:"cy"`
	Cz    int `json:"cz"`
	De    int `json:"de"`
	Dk    int `json:"dk"`
	Dz    int `json:"dz"`
	Ee    int `json:"ee"`
	Eg    int `json:"eg"`
	Es    int `json:"es"`
	Fi    int `json:"fi"`
	Fo    int `json:"fo"`
	Fr    int `json:"fr"`
	Gg    int `json:"gg"`
	Gi    int `json:"gi"`
	Gr    int `json:"gr"`
	Hr    int `json:"hr"`
	Hu    int `json:"hu"`
	Ie    int `json:"ie"`
	Il    int `json:"il"`
	Im    int `json:"im"`
	Is    int `json:"is"`
	It    int `json:"it"`
	Je    int `json:"je"`
	Lb    int `json:"lb"`
	Li    int `json:"li"`
	Lt    int `json:"lt"`
	Lu    int `json:"lu"`
	Lv    int `json:"lv"`
	Ly    int `json:"ly"`
	Ma    int `json:"ma"`
	Mc    int `json:"mc"`
	Md    int `json:"md"`
	Me    int `json:"me"`
	Mk    int `json:"mk"`
	Mt    int `json:"mt"`
	Nl    int `json:"nl"`
	No    int `json:"no"`
	Pl    int `json:"pl"`
	Ps    int `json:"ps"`
	Pt    int `json:"pt"`
	Ro    int `json:"ro"`
	Rs    int `json:"rs"`
	Se    int `json:"se"`
	Si    int `json:"si"`
	Sj    int `json:"sj"`
	Sk    int `json:"sk"`
	Sm    int `json:"sm"`
	Sy    int `json:"sy"`
	Tn    int `json:"tn"`
	Tr    int `json:"tr"`
	Ua    int `json:"ua"`
	Uk    int `json:"uk"`
	Us    int `json:"us"`
	Va    int `json:"va"`
	World int `json:"world"`
	Xk    int `json:"xk"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ad\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Ad))
	}
	{
		const prefix string = ",\"al\":"
		out.RawString(prefix)
		out.Int(int(in.Al))
	}
	{
		const prefix string = ",\"at\":"
		out.RawString(prefix)
		out.Int(int(in.At))
	}
	{
		const prefix string = ",\"ax\":"
		out.RawString(prefix)
		out.Int(int(in.Ax))
	}
	{
		const prefix string = ",\"ba\":"
		out.RawString(prefix)
		out.Int(int(in.Ba))
	}
	{
		const prefix string = ",\"be\":"
		out.RawString(prefix)
		out.Int(int(in.Be))
	}
	{
		const prefix string = ",\"bg\":"
		out.RawString(prefix)
		out.Int(int(in.Bg))
	}
	{
		const prefix string = ",\"ch\":"
		out.RawString(prefix)
		out.Int(int(in.Ch))
	}
	{
		const prefix string = ",\"cy\":"
		out.RawString(prefix)
		out.Int(int(in.Cy))
	}
	{
		const prefix string = ",\"cz\":"
		out.RawString(prefix)
		out.Int(int(in.Cz))
	}
	{
		const prefix string = ",\"de\":"
		out.RawString(prefix)
		out.Int(int(in.De))
	}
	{
		const prefix string = ",\"dk\":"
		out.RawString(prefix)
		out.Int(int(in.Dk))
	}
	{
		const prefix string = ",\"dz\":"
		out.RawString(prefix)
		out.Int(int(in.Dz))
	}
	{
		const prefix string = ",\"ee\":"
		out.RawString(prefix)
		out.Int(int(in.Ee))
	}
	{
		const prefix string = ",\"eg\":"
		out.RawString(prefix)
		out.Int(int(in.Eg))
	}
	{
		const prefix string = ",\"es\":"
		out.RawString(prefix)
		out.Int(int(in.Es))
	}
	{
		const prefix string = ",\"fi\":"
		out.RawString(prefix)
		out.Int(int(in.Fi))
	}
	{
		const prefix string = ",\"fo\":"
		out.RawString(prefix)
		out.Int(int(in.Fo))
	}
	{
		const prefix string = ",\"fr\":"
		out.RawString(prefix)
		out.Int(int(in.Fr))
	}
	{
		const prefix string = ",\"gg\":"
		out.RawString(prefix)
		out.Int(int(in.Gg))
	}
	{
		const prefix string = ",\"gi\":"
		out.RawString(prefix)
		out.Int(int(in.Gi))
	}
	{
		const prefix string = ",\"gr\":"
		out.RawString(prefix)
		out.Int(int(in.Gr))
	}
	{
		const prefix string = ",\"hr\":"
		out.RawString(prefix)
		out.Int(int(in.Hr))
	}
	{
		const prefix string = ",\"hu\":"
		out.RawString(prefix)
		out.Int(int(in.Hu))
	}
	{
		const prefix string = ",\"ie\":"
		out.RawString(prefix)
		out.Int(int(in.Ie))
	}
	{
		const prefix string = ",\"il\":"
		out.RawString(prefix)
		out.Int(int(in.Il))
	}
	{
		const prefix string = ",\"im\":"
		out.RawString(prefix)
		out.Int(int(in.Im))
	}
	{
		const prefix string = ",\"is\":"
		out.RawString(prefix)
		out.Int(int(in.Is))
	}
	{
		const prefix string = ",\"it\":"
		out.RawString(prefix)
		out.Int(int(in.It))
	}
	{
		const prefix string = ",\"je\":"
		out.RawString(prefix)
		out.Int(int(in.Je))
	}
	{
		const prefix string = ",\"lb\":"
		out.RawString(prefix)
		out.Int(int(in.Lb))
	}
	{
		const prefix string = ",\"li\":"
		out.RawString(prefix)
		out.Int(int(in.Li))
	}
	{
		const prefix string = ",\"lt\":"
		out.RawString(prefix)
		out.Int(int(in.Lt))
	}
	{
		const prefix string = ",\"lu\":"
		out.RawString(prefix)
		out.Int(int(in.Lu))
	}
	{
		const prefix string = ",\"lv\":"
		out.RawString(prefix)
		out.Int(int(in.Lv))
	}
	{
		const prefix string = ",\"ly\":"
		out.RawString(prefix)
		out.Int(int(in.Ly))
	}
	{
		const prefix string = ",\"ma\":"
		out.RawString(prefix)
		out.Int(int(in.Ma))
	}
	{
		const prefix string = ",\"mc\":"
		out.RawString(prefix)
		out.Int(int(in.Mc))
	}
	{
		const prefix string = ",\"md\":"
		out.RawString(prefix)
		out.Int(int(in.Md))
	}
	{
		const prefix string = ",\"me\":"
		out.RawString(prefix)
		out.Int(int(in.Me))
	}
	{
		const prefix string = ",\"mk\":"
		out.RawString(prefix)
		out.Int(int(in.Mk))
	}
	{
		const prefix string = ",\"mt\":"
		out.RawString(prefix)
		out.Int(int(in.Mt))
	}
	{
		const prefix string = ",\"nl\":"
		out.RawString(prefix)
		out.Int(int(in.Nl))
	}
	{
		const prefix string = ",\"no\":"
		out.RawString(prefix)
		out.Int(int(in.No))
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.Int(int(in.Pl))
	}
	{
		const prefix string = ",\"ps\":"
		out.RawString(prefix)
		out.Int(int(in.Ps))
	}
	{
		const prefix string = ",\"pt\":"
		out.RawString(prefix)
		out.Int(int(in.Pt))
	}
	{
		const prefix string = ",\"ro\":"
		out.RawString(prefix)
		out.Int(int(in.Ro))
	}
	{
		const prefix string = ",\"rs\":"
		out.RawString(prefix)
		out.Int(int(in.Rs))
	}
	{
		const prefix string = ",\"se\":"
		out.RawString(prefix)
		out.Int(int(in.Se))
	}
	{
		const prefix string = ",\"si\":"
		out.RawString(prefix)
		out.Int(int(in.Si))
	}
	{
		const prefix string = ",\"sj\":"
		out.RawString(prefix)
		out.Int(int(in.Sj))
	}
	{
		const prefix string = ",\"sk\":"
		out.RawString(prefix)
		out.Int(int(in.Sk))
	}
	{
		const prefix string = ",\"sm\":"
		out.RawString(prefix)
		out.Int(int(in.Sm))
	}
	{
		const prefix string = ",\"sy\":"
		out.RawString(prefix)
		out.Int(int(in.Sy))
	}
	{
		const prefix string = ",\"tn\":"
		out.RawString(prefix)
		out.Int(int(in.Tn))
	}
	{
		const prefix string = ",\"tr\":"
		out.RawString(prefix)
		out.Int(int(in.Tr))
	}
	{
		const prefix string = ",\"ua\":"
		out.RawString(prefix)
		out.Int(int(in.Ua))
	}
	{
		const prefix string = ",\"uk\":"
		out.RawString(prefix)
		out.Int(int(in.Uk))
	}
	{
		const prefix string = ",\"us\":"
		out.RawString(prefix)
		out.Int(int(in.Us))
	}
	{
		const prefix string = ",\"va\":"
		out.RawString(prefix)
		out.Int(int(in.Va))
	}
	{
		const prefix string = ",\"world\":"
		out.RawString(prefix)
		out.Int(int(in.World))
	}
	{
		const prefix string = ",\"xk\":"
		out.RawString(prefix)
		out.Int(int(in.Xk))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode35(in *jlexer.Lexer, out *struct {
	Agribalyse struct {
		AgribalyseFoodCode string  `json:"agribalyse_food_code"`
		Co2Agriculture     float64 `json:"co2_agriculture"`
		Co2Consumption     int     `json:"co2_consumption"`
		Co2Distribution    float64 `json:"co2_distribution"`
		Co2Packaging       float64 `json:"co2_packaging"`
		Co2Processing      float64 `json:"co2_processing"`
		Co2Total           float64 `json:"co2_total"`
		Co2Transportation  float64 `json:"co2_transportation"`
		Code               string  `json:"code"`
		Dqr                string  `json:"dqr"`
		EfAgriculture      float64 `json:"ef_agriculture"`
		EfConsumption      int     `json:"ef_consumption"`
		EfDistribution     float64 `json:"ef_distribution"`
		EfPackaging        float64 `json:"ef_packaging"`
		EfProcessing       float64 `json:"ef_processing"`
		EfTotal            float64 `json:"ef_total"`
		EfTransportation   float64 `json:"ef_transportation"`
		IsBeverage         int     `json:"is_beverage"`
		NameEn             string  `json:"name_en"`
		NameFr             string  `json:"name_fr"`
		Score              int     `json:"score"`
	} `json:"agribalyse"`
	Grade string `json:"grade"`
	Score int    `json:"score"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "agribalyse":
			easyjsonC4ff3609Decode37(in, &out.Agribalyse)
		case "grade":
			out.Grade = string(in.String())
		case "score":
			out.Score = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode35(out *jwriter.Writer, in struct {
	Agribalyse struct {
		AgribalyseFoodCode string  `json:"agribalyse_food_code"`
		Co2Agriculture     float64 `json:"co2_agriculture"`
		Co2Consumption     int     `json:"co2_consumption"`
		Co2Distribution    float64 `json:"co2_distribution"`
		Co2Packaging       float64 `json:"co2_packaging"`
		Co2Processing      float64 `json:"co2_processing"`
		Co2Total           float64 `json:"co2_total"`
		Co2Transportation  float64 `json:"co2_transportation"`
		Code               string  `json:"code"`
		Dqr                string  `json:"dqr"`
		EfAgriculture      float64 `json:"ef_agriculture"`
		EfConsumption      int     `json:"ef_consumption"`
		EfDistribution     float64 `json:"ef_distribution"`
		EfPackaging        float64 `json:"ef_packaging"`
		EfProcessing       float64 `json:"ef_processing"`
		EfTotal            float64 `json:"ef_total"`
		EfTransportation   float64 `json:"ef_transportation"`
		IsBeverage         int     `json:"is_beverage"`
		NameEn             string  `json:"name_en"`
		NameFr             string  `json:"name_fr"`
		Score              int     `json:"score"`
	} `json:"agribalyse"`
	Grade string `json:"grade"`
	Score int    `json:"score"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"agribalyse\":"
		out.RawString(prefix[1:])
		easyjsonC4ff3609Encode37(out, in.Agribalyse)
	}
	{
		const prefix string = ",\"grade\":"
		out.RawString(prefix)
		out.String(string(in.Grade))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode37(in *jlexer.Lexer, out *struct {
	AgribalyseFoodCode string  `json:"agribalyse_food_code"`
	Co2Agriculture     float64 `json:"co2_agriculture"`
	Co2Consumption     int     `json:"co2_consumption"`
	Co2Distribution    float64 `json:"co2_distribution"`
	Co2Packaging       float64 `json:"co2_packaging"`
	Co2Processing      float64 `json:"co2_processing"`
	Co2Total           float64 `json:"co2_total"`
	Co2Transportation  float64 `json:"co2_transportation"`
	Code               string  `json:"code"`
	Dqr                string  `json:"dqr"`
	EfAgriculture      float64 `json:"ef_agriculture"`
	EfConsumption      int     `json:"ef_consumption"`
	EfDistribution     float64 `json:"ef_distribution"`
	EfPackaging        float64 `json:"ef_packaging"`
	EfProcessing       float64 `json:"ef_processing"`
	EfTotal            float64 `json:"ef_total"`
	EfTransportation   float64 `json:"ef_transportation"`
	IsBeverage         int     `json:"is_beverage"`
	NameEn             string  `json:"name_en"`
	NameFr             string  `json:"name_fr"`
	Score              int     `json:"score"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "agribalyse_food_code":
			out.AgribalyseFoodCode = string(in.String())
		case "co2_agriculture":
			out.Co2Agriculture = float64(in.Float64())
		case "co2_consumption":
			out.Co2Consumption = int(in.Int())
		case "co2_distribution":
			out.Co2Distribution = float64(in.Float64())
		case "co2_packaging":
			out.Co2Packaging = float64(in.Float64())
		case "co2_processing":
			out.Co2Processing = float64(in.Float64())
		case "co2_total":
			out.Co2Total = float64(in.Float64())
		case "co2_transportation":
			out.Co2Transportation = float64(in.Float64())
		case "code":
			out.Code = string(in.String())
		case "dqr":
			out.Dqr = string(in.String())
		case "ef_agriculture":
			out.EfAgriculture = float64(in.Float64())
		case "ef_consumption":
			out.EfConsumption = int(in.Int())
		case "ef_distribution":
			out.EfDistribution = float64(in.Float64())
		case "ef_packaging":
			out.EfPackaging = float64(in.Float64())
		case "ef_processing":
			out.EfProcessing = float64(in.Float64())
		case "ef_total":
			out.EfTotal = float64(in.Float64())
		case "ef_transportation":
			out.EfTransportation = float64(in.Float64())
		case "is_beverage":
			out.IsBeverage = int(in.Int())
		case "name_en":
			out.NameEn = string(in.String())
		case "name_fr":
			out.NameFr = string(in.String())
		case "score":
			out.Score = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode37(out *jwriter.Writer, in struct {
	AgribalyseFoodCode string  `json:"agribalyse_food_code"`
	Co2Agriculture     float64 `json:"co2_agriculture"`
	Co2Consumption     int     `json:"co2_consumption"`
	Co2Distribution    float64 `json:"co2_distribution"`
	Co2Packaging       float64 `json:"co2_packaging"`
	Co2Processing      float64 `json:"co2_processing"`
	Co2Total           float64 `json:"co2_total"`
	Co2Transportation  float64 `json:"co2_transportation"`
	Code               string  `json:"code"`
	Dqr                string  `json:"dqr"`
	EfAgriculture      float64 `json:"ef_agriculture"`
	EfConsumption      int     `json:"ef_consumption"`
	EfDistribution     float64 `json:"ef_distribution"`
	EfPackaging        float64 `json:"ef_packaging"`
	EfProcessing       float64 `json:"ef_processing"`
	EfTotal            float64 `json:"ef_total"`
	EfTransportation   float64 `json:"ef_transportation"`
	IsBeverage         int     `json:"is_beverage"`
	NameEn             string  `json:"name_en"`
	NameFr             string  `json:"name_fr"`
	Score              int     `json:"score"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"agribalyse_food_code\":"
		out.RawString(prefix[1:])
		out.String(string(in.AgribalyseFoodCode))
	}
	{
		const prefix string = ",\"co2_agriculture\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Agriculture))
	}
	{
		const prefix string = ",\"co2_consumption\":"
		out.RawString(prefix)
		out.Int(int(in.Co2Consumption))
	}
	{
		const prefix string = ",\"co2_distribution\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Distribution))
	}
	{
		const prefix string = ",\"co2_packaging\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Packaging))
	}
	{
		const prefix string = ",\"co2_processing\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Processing))
	}
	{
		const prefix string = ",\"co2_total\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Total))
	}
	{
		const prefix string = ",\"co2_transportation\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Transportation))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"dqr\":"
		out.RawString(prefix)
		out.String(string(in.Dqr))
	}
	{
		const prefix string = ",\"ef_agriculture\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfAgriculture))
	}
	{
		const prefix string = ",\"ef_consumption\":"
		out.RawString(prefix)
		out.Int(int(in.EfConsumption))
	}
	{
		const prefix string = ",\"ef_distribution\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfDistribution))
	}
	{
		const prefix string = ",\"ef_packaging\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfPackaging))
	}
	{
		const prefix string = ",\"ef_processing\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfProcessing))
	}
	{
		const prefix string = ",\"ef_total\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfTotal))
	}
	{
		const prefix string = ",\"ef_transportation\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfTransportation))
	}
	{
		const prefix string = ",\"is_beverage\":"
		out.RawString(prefix)
		out.Int(int(in.IsBeverage))
	}
	{
		const prefix string = ",\"name_en\":"
		out.RawString(prefix)
		out.String(string(in.NameEn))
	}
	{
		const prefix string = ",\"name_fr\":"
		out.RawString(prefix)
		out.String(string(in.NameFr))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode34(in *jlexer.Lexer, out *struct {
	Labels  int `json:"labels"`
	Origins int `json:"origins"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "labels":
			out.Labels = int(in.Int())
		case "origins":
			out.Origins = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode34(out *jwriter.Writer, in struct {
	Labels  int `json:"labels"`
	Origins int `json:"origins"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Labels))
	}
	{
		const prefix string = ",\"origins\":"
		out.RawString(prefix)
		out.Int(int(in.Origins))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode33(in *jlexer.Lexer, out *struct {
	Ad    string `json:"ad"`
	Al    string `json:"al"`
	At    string `json:"at"`
	Ax    string `json:"ax"`
	Ba    string `json:"ba"`
	Be    string `json:"be"`
	Bg    string `json:"bg"`
	Ch    string `json:"ch"`
	Cy    string `json:"cy"`
	Cz    string `json:"cz"`
	De    string `json:"de"`
	Dk    string `json:"dk"`
	Dz    string `json:"dz"`
	Ee    string `json:"ee"`
	Eg    string `json:"eg"`
	Es    string `json:"es"`
	Fi    string `json:"fi"`
	Fo    string `json:"fo"`
	Fr    string `json:"fr"`
	Gg    string `json:"gg"`
	Gi    string `json:"gi"`
	Gr    string `json:"gr"`
	Hr    string `json:"hr"`
	Hu    string `json:"hu"`
	Ie    string `json:"ie"`
	Il    string `json:"il"`
	Im    string `json:"im"`
	Is    string `json:"is"`
	It    string `json:"it"`
	Je    string `json:"je"`
	Lb    string `json:"lb"`
	Li    string `json:"li"`
	Lt    string `json:"lt"`
	Lu    string `json:"lu"`
	Lv    string `json:"lv"`
	Ly    string `json:"ly"`
	Ma    string `json:"ma"`
	Mc    string `json:"mc"`
	Md    string `json:"md"`
	Me    string `json:"me"`
	Mk    string `json:"mk"`
	Mt    string `json:"mt"`
	Nl    string `json:"nl"`
	No    string `json:"no"`
	Pl    string `json:"pl"`
	Ps    string `json:"ps"`
	Pt    string `json:"pt"`
	Ro    string `json:"ro"`
	Rs    string `json:"rs"`
	Se    string `json:"se"`
	Si    string `json:"si"`
	Sj    string `json:"sj"`
	Sk    string `json:"sk"`
	Sm    string `json:"sm"`
	Sy    string `json:"sy"`
	Tn    string `json:"tn"`
	Tr    string `json:"tr"`
	Ua    string `json:"ua"`
	Uk    string `json:"uk"`
	Us    string `json:"us"`
	Va    string `json:"va"`
	World string `json:"world"`
	Xk    string `json:"xk"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ad":
			out.Ad = string(in.String())
		case "al":
			out.Al = string(in.String())
		case "at":
			out.At = string(in.String())
		case "ax":
			out.Ax = string(in.String())
		case "ba":
			out.Ba = string(in.String())
		case "be":
			out.Be = string(in.String())
		case "bg":
			out.Bg = string(in.String())
		case "ch":
			out.Ch = string(in.String())
		case "cy":
			out.Cy = string(in.String())
		case "cz":
			out.Cz = string(in.String())
		case "de":
			out.De = string(in.String())
		case "dk":
			out.Dk = string(in.String())
		case "dz":
			out.Dz = string(in.String())
		case "ee":
			out.Ee = string(in.String())
		case "eg":
			out.Eg = string(in.String())
		case "es":
			out.Es = string(in.String())
		case "fi":
			out.Fi = string(in.String())
		case "fo":
			out.Fo = string(in.String())
		case "fr":
			out.Fr = string(in.String())
		case "gg":
			out.Gg = string(in.String())
		case "gi":
			out.Gi = string(in.String())
		case "gr":
			out.Gr = string(in.String())
		case "hr":
			out.Hr = string(in.String())
		case "hu":
			out.Hu = string(in.String())
		case "ie":
			out.Ie = string(in.String())
		case "il":
			out.Il = string(in.String())
		case "im":
			out.Im = string(in.String())
		case "is":
			out.Is = string(in.String())
		case "it":
			out.It = string(in.String())
		case "je":
			out.Je = string(in.String())
		case "lb":
			out.Lb = string(in.String())
		case "li":
			out.Li = string(in.String())
		case "lt":
			out.Lt = string(in.String())
		case "lu":
			out.Lu = string(in.String())
		case "lv":
			out.Lv = string(in.String())
		case "ly":
			out.Ly = string(in.String())
		case "ma":
			out.Ma = string(in.String())
		case "mc":
			out.Mc = string(in.String())
		case "md":
			out.Md = string(in.String())
		case "me":
			out.Me = string(in.String())
		case "mk":
			out.Mk = string(in.String())
		case "mt":
			out.Mt = string(in.String())
		case "nl":
			out.Nl = string(in.String())
		case "no":
			out.No = string(in.String())
		case "pl":
			out.Pl = string(in.String())
		case "ps":
			out.Ps = string(in.String())
		case "pt":
			out.Pt = string(in.String())
		case "ro":
			out.Ro = string(in.String())
		case "rs":
			out.Rs = string(in.String())
		case "se":
			out.Se = string(in.String())
		case "si":
			out.Si = string(in.String())
		case "sj":
			out.Sj = string(in.String())
		case "sk":
			out.Sk = string(in.String())
		case "sm":
			out.Sm = string(in.String())
		case "sy":
			out.Sy = string(in.String())
		case "tn":
			out.Tn = string(in.String())
		case "tr":
			out.Tr = string(in.String())
		case "ua":
			out.Ua = string(in.String())
		case "uk":
			out.Uk = string(in.String())
		case "us":
			out.Us = string(in.String())
		case "va":
			out.Va = string(in.String())
		case "world":
			out.World = string(in.String())
		case "xk":
			out.Xk = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode33(out *jwriter.Writer, in struct {
	Ad    string `json:"ad"`
	Al    string `json:"al"`
	At    string `json:"at"`
	Ax    string `json:"ax"`
	Ba    string `json:"ba"`
	Be    string `json:"be"`
	Bg    string `json:"bg"`
	Ch    string `json:"ch"`
	Cy    string `json:"cy"`
	Cz    string `json:"cz"`
	De    string `json:"de"`
	Dk    string `json:"dk"`
	Dz    string `json:"dz"`
	Ee    string `json:"ee"`
	Eg    string `json:"eg"`
	Es    string `json:"es"`
	Fi    string `json:"fi"`
	Fo    string `json:"fo"`
	Fr    string `json:"fr"`
	Gg    string `json:"gg"`
	Gi    string `json:"gi"`
	Gr    string `json:"gr"`
	Hr    string `json:"hr"`
	Hu    string `json:"hu"`
	Ie    string `json:"ie"`
	Il    string `json:"il"`
	Im    string `json:"im"`
	Is    string `json:"is"`
	It    string `json:"it"`
	Je    string `json:"je"`
	Lb    string `json:"lb"`
	Li    string `json:"li"`
	Lt    string `json:"lt"`
	Lu    string `json:"lu"`
	Lv    string `json:"lv"`
	Ly    string `json:"ly"`
	Ma    string `json:"ma"`
	Mc    string `json:"mc"`
	Md    string `json:"md"`
	Me    string `json:"me"`
	Mk    string `json:"mk"`
	Mt    string `json:"mt"`
	Nl    string `json:"nl"`
	No    string `json:"no"`
	Pl    string `json:"pl"`
	Ps    string `json:"ps"`
	Pt    string `json:"pt"`
	Ro    string `json:"ro"`
	Rs    string `json:"rs"`
	Se    string `json:"se"`
	Si    string `json:"si"`
	Sj    string `json:"sj"`
	Sk    string `json:"sk"`
	Sm    string `json:"sm"`
	Sy    string `json:"sy"`
	Tn    string `json:"tn"`
	Tr    string `json:"tr"`
	Ua    string `json:"ua"`
	Uk    string `json:"uk"`
	Us    string `json:"us"`
	Va    string `json:"va"`
	World string `json:"world"`
	Xk    string `json:"xk"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ad\":"
		out.RawString(prefix[1:])
		out.String(string(in.Ad))
	}
	{
		const prefix string = ",\"al\":"
		out.RawString(prefix)
		out.String(string(in.Al))
	}
	{
		const prefix string = ",\"at\":"
		out.RawString(prefix)
		out.String(string(in.At))
	}
	{
		const prefix string = ",\"ax\":"
		out.RawString(prefix)
		out.String(string(in.Ax))
	}
	{
		const prefix string = ",\"ba\":"
		out.RawString(prefix)
		out.String(string(in.Ba))
	}
	{
		const prefix string = ",\"be\":"
		out.RawString(prefix)
		out.String(string(in.Be))
	}
	{
		const prefix string = ",\"bg\":"
		out.RawString(prefix)
		out.String(string(in.Bg))
	}
	{
		const prefix string = ",\"ch\":"
		out.RawString(prefix)
		out.String(string(in.Ch))
	}
	{
		const prefix string = ",\"cy\":"
		out.RawString(prefix)
		out.String(string(in.Cy))
	}
	{
		const prefix string = ",\"cz\":"
		out.RawString(prefix)
		out.String(string(in.Cz))
	}
	{
		const prefix string = ",\"de\":"
		out.RawString(prefix)
		out.String(string(in.De))
	}
	{
		const prefix string = ",\"dk\":"
		out.RawString(prefix)
		out.String(string(in.Dk))
	}
	{
		const prefix string = ",\"dz\":"
		out.RawString(prefix)
		out.String(string(in.Dz))
	}
	{
		const prefix string = ",\"ee\":"
		out.RawString(prefix)
		out.String(string(in.Ee))
	}
	{
		const prefix string = ",\"eg\":"
		out.RawString(prefix)
		out.String(string(in.Eg))
	}
	{
		const prefix string = ",\"es\":"
		out.RawString(prefix)
		out.String(string(in.Es))
	}
	{
		const prefix string = ",\"fi\":"
		out.RawString(prefix)
		out.String(string(in.Fi))
	}
	{
		const prefix string = ",\"fo\":"
		out.RawString(prefix)
		out.String(string(in.Fo))
	}
	{
		const prefix string = ",\"fr\":"
		out.RawString(prefix)
		out.String(string(in.Fr))
	}
	{
		const prefix string = ",\"gg\":"
		out.RawString(prefix)
		out.String(string(in.Gg))
	}
	{
		const prefix string = ",\"gi\":"
		out.RawString(prefix)
		out.String(string(in.Gi))
	}
	{
		const prefix string = ",\"gr\":"
		out.RawString(prefix)
		out.String(string(in.Gr))
	}
	{
		const prefix string = ",\"hr\":"
		out.RawString(prefix)
		out.String(string(in.Hr))
	}
	{
		const prefix string = ",\"hu\":"
		out.RawString(prefix)
		out.String(string(in.Hu))
	}
	{
		const prefix string = ",\"ie\":"
		out.RawString(prefix)
		out.String(string(in.Ie))
	}
	{
		const prefix string = ",\"il\":"
		out.RawString(prefix)
		out.String(string(in.Il))
	}
	{
		const prefix string = ",\"im\":"
		out.RawString(prefix)
		out.String(string(in.Im))
	}
	{
		const prefix string = ",\"is\":"
		out.RawString(prefix)
		out.String(string(in.Is))
	}
	{
		const prefix string = ",\"it\":"
		out.RawString(prefix)
		out.String(string(in.It))
	}
	{
		const prefix string = ",\"je\":"
		out.RawString(prefix)
		out.String(string(in.Je))
	}
	{
		const prefix string = ",\"lb\":"
		out.RawString(prefix)
		out.String(string(in.Lb))
	}
	{
		const prefix string = ",\"li\":"
		out.RawString(prefix)
		out.String(string(in.Li))
	}
	{
		const prefix string = ",\"lt\":"
		out.RawString(prefix)
		out.String(string(in.Lt))
	}
	{
		const prefix string = ",\"lu\":"
		out.RawString(prefix)
		out.String(string(in.Lu))
	}
	{
		const prefix string = ",\"lv\":"
		out.RawString(prefix)
		out.String(string(in.Lv))
	}
	{
		const prefix string = ",\"ly\":"
		out.RawString(prefix)
		out.String(string(in.Ly))
	}
	{
		const prefix string = ",\"ma\":"
		out.RawString(prefix)
		out.String(string(in.Ma))
	}
	{
		const prefix string = ",\"mc\":"
		out.RawString(prefix)
		out.String(string(in.Mc))
	}
	{
		const prefix string = ",\"md\":"
		out.RawString(prefix)
		out.String(string(in.Md))
	}
	{
		const prefix string = ",\"me\":"
		out.RawString(prefix)
		out.String(string(in.Me))
	}
	{
		const prefix string = ",\"mk\":"
		out.RawString(prefix)
		out.String(string(in.Mk))
	}
	{
		const prefix string = ",\"mt\":"
		out.RawString(prefix)
		out.String(string(in.Mt))
	}
	{
		const prefix string = ",\"nl\":"
		out.RawString(prefix)
		out.String(string(in.Nl))
	}
	{
		const prefix string = ",\"no\":"
		out.RawString(prefix)
		out.String(string(in.No))
	}
	{
		const prefix string = ",\"pl\":"
		out.RawString(prefix)
		out.String(string(in.Pl))
	}
	{
		const prefix string = ",\"ps\":"
		out.RawString(prefix)
		out.String(string(in.Ps))
	}
	{
		const prefix string = ",\"pt\":"
		out.RawString(prefix)
		out.String(string(in.Pt))
	}
	{
		const prefix string = ",\"ro\":"
		out.RawString(prefix)
		out.String(string(in.Ro))
	}
	{
		const prefix string = ",\"rs\":"
		out.RawString(prefix)
		out.String(string(in.Rs))
	}
	{
		const prefix string = ",\"se\":"
		out.RawString(prefix)
		out.String(string(in.Se))
	}
	{
		const prefix string = ",\"si\":"
		out.RawString(prefix)
		out.String(string(in.Si))
	}
	{
		const prefix string = ",\"sj\":"
		out.RawString(prefix)
		out.String(string(in.Sj))
	}
	{
		const prefix string = ",\"sk\":"
		out.RawString(prefix)
		out.String(string(in.Sk))
	}
	{
		const prefix string = ",\"sm\":"
		out.RawString(prefix)
		out.String(string(in.Sm))
	}
	{
		const prefix string = ",\"sy\":"
		out.RawString(prefix)
		out.String(string(in.Sy))
	}
	{
		const prefix string = ",\"tn\":"
		out.RawString(prefix)
		out.String(string(in.Tn))
	}
	{
		const prefix string = ",\"tr\":"
		out.RawString(prefix)
		out.String(string(in.Tr))
	}
	{
		const prefix string = ",\"ua\":"
		out.RawString(prefix)
		out.String(string(in.Ua))
	}
	{
		const prefix string = ",\"uk\":"
		out.RawString(prefix)
		out.String(string(in.Uk))
	}
	{
		const prefix string = ",\"us\":"
		out.RawString(prefix)
		out.String(string(in.Us))
	}
	{
		const prefix string = ",\"va\":"
		out.RawString(prefix)
		out.String(string(in.Va))
	}
	{
		const prefix string = ",\"world\":"
		out.RawString(prefix)
		out.String(string(in.World))
	}
	{
		const prefix string = ",\"xk\":"
		out.RawString(prefix)
		out.String(string(in.Xk))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode32(in *jlexer.Lexer, out *struct {
	AgribalyseFoodCode string  `json:"agribalyse_food_code"`
	Co2Agriculture     float64 `json:"co2_agriculture"`
	Co2Consumption     int     `json:"co2_consumption"`
	Co2Distribution    float64 `json:"co2_distribution"`
	Co2Packaging       float64 `json:"co2_packaging"`
	Co2Processing      float64 `json:"co2_processing"`
	Co2Total           float64 `json:"co2_total"`
	Co2Transportation  float64 `json:"co2_transportation"`
	Code               string  `json:"code"`
	Dqr                string  `json:"dqr"`
	EfAgriculture      float64 `json:"ef_agriculture"`
	EfConsumption      int     `json:"ef_consumption"`
	EfDistribution     float64 `json:"ef_distribution"`
	EfPackaging        float64 `json:"ef_packaging"`
	EfProcessing       float64 `json:"ef_processing"`
	EfTotal            float64 `json:"ef_total"`
	EfTransportation   float64 `json:"ef_transportation"`
	IsBeverage         int     `json:"is_beverage"`
	NameEn             string  `json:"name_en"`
	NameFr             string  `json:"name_fr"`
	Score              int     `json:"score"`
	Version            string  `json:"version"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "agribalyse_food_code":
			out.AgribalyseFoodCode = string(in.String())
		case "co2_agriculture":
			out.Co2Agriculture = float64(in.Float64())
		case "co2_consumption":
			out.Co2Consumption = int(in.Int())
		case "co2_distribution":
			out.Co2Distribution = float64(in.Float64())
		case "co2_packaging":
			out.Co2Packaging = float64(in.Float64())
		case "co2_processing":
			out.Co2Processing = float64(in.Float64())
		case "co2_total":
			out.Co2Total = float64(in.Float64())
		case "co2_transportation":
			out.Co2Transportation = float64(in.Float64())
		case "code":
			out.Code = string(in.String())
		case "dqr":
			out.Dqr = string(in.String())
		case "ef_agriculture":
			out.EfAgriculture = float64(in.Float64())
		case "ef_consumption":
			out.EfConsumption = int(in.Int())
		case "ef_distribution":
			out.EfDistribution = float64(in.Float64())
		case "ef_packaging":
			out.EfPackaging = float64(in.Float64())
		case "ef_processing":
			out.EfProcessing = float64(in.Float64())
		case "ef_total":
			out.EfTotal = float64(in.Float64())
		case "ef_transportation":
			out.EfTransportation = float64(in.Float64())
		case "is_beverage":
			out.IsBeverage = int(in.Int())
		case "name_en":
			out.NameEn = string(in.String())
		case "name_fr":
			out.NameFr = string(in.String())
		case "score":
			out.Score = int(in.Int())
		case "version":
			out.Version = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode32(out *jwriter.Writer, in struct {
	AgribalyseFoodCode string  `json:"agribalyse_food_code"`
	Co2Agriculture     float64 `json:"co2_agriculture"`
	Co2Consumption     int     `json:"co2_consumption"`
	Co2Distribution    float64 `json:"co2_distribution"`
	Co2Packaging       float64 `json:"co2_packaging"`
	Co2Processing      float64 `json:"co2_processing"`
	Co2Total           float64 `json:"co2_total"`
	Co2Transportation  float64 `json:"co2_transportation"`
	Code               string  `json:"code"`
	Dqr                string  `json:"dqr"`
	EfAgriculture      float64 `json:"ef_agriculture"`
	EfConsumption      int     `json:"ef_consumption"`
	EfDistribution     float64 `json:"ef_distribution"`
	EfPackaging        float64 `json:"ef_packaging"`
	EfProcessing       float64 `json:"ef_processing"`
	EfTotal            float64 `json:"ef_total"`
	EfTransportation   float64 `json:"ef_transportation"`
	IsBeverage         int     `json:"is_beverage"`
	NameEn             string  `json:"name_en"`
	NameFr             string  `json:"name_fr"`
	Score              int     `json:"score"`
	Version            string  `json:"version"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"agribalyse_food_code\":"
		out.RawString(prefix[1:])
		out.String(string(in.AgribalyseFoodCode))
	}
	{
		const prefix string = ",\"co2_agriculture\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Agriculture))
	}
	{
		const prefix string = ",\"co2_consumption\":"
		out.RawString(prefix)
		out.Int(int(in.Co2Consumption))
	}
	{
		const prefix string = ",\"co2_distribution\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Distribution))
	}
	{
		const prefix string = ",\"co2_packaging\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Packaging))
	}
	{
		const prefix string = ",\"co2_processing\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Processing))
	}
	{
		const prefix string = ",\"co2_total\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Total))
	}
	{
		const prefix string = ",\"co2_transportation\":"
		out.RawString(prefix)
		out.Float64(float64(in.Co2Transportation))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"dqr\":"
		out.RawString(prefix)
		out.String(string(in.Dqr))
	}
	{
		const prefix string = ",\"ef_agriculture\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfAgriculture))
	}
	{
		const prefix string = ",\"ef_consumption\":"
		out.RawString(prefix)
		out.Int(int(in.EfConsumption))
	}
	{
		const prefix string = ",\"ef_distribution\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfDistribution))
	}
	{
		const prefix string = ",\"ef_packaging\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfPackaging))
	}
	{
		const prefix string = ",\"ef_processing\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfProcessing))
	}
	{
		const prefix string = ",\"ef_total\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfTotal))
	}
	{
		const prefix string = ",\"ef_transportation\":"
		out.RawString(prefix)
		out.Float64(float64(in.EfTransportation))
	}
	{
		const prefix string = ",\"is_beverage\":"
		out.RawString(prefix)
		out.Int(int(in.IsBeverage))
	}
	{
		const prefix string = ",\"name_en\":"
		out.RawString(prefix)
		out.String(string(in.NameEn))
	}
	{
		const prefix string = ",\"name_fr\":"
		out.RawString(prefix)
		out.String(string(in.NameFr))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode31(in *jlexer.Lexer, out *struct {
	OriginsOfIngredients struct {
		AggregatedOrigins []struct {
			EpiScore            string      `json:"epi_score"`
			Origin              string      `json:"origin"`
			Percent             int         `json:"percent"`
			TransportationScore interface{} `json:"transportation_score"`
		} `json:"aggregated_origins"`
		EpiScore                int      `json:"epi_score"`
		EpiValue                int      `json:"epi_value"`
		OriginsFromOriginsField []string `json:"origins_from_origins_field"`
		TransportationScore     int      `json:"transportation_score"`
		TransportationScores    struct {
			Ad    int `json:"ad"`
			Al    int `json:"al"`
			At    int `json:"at"`
			Ax    int `json:"ax"`
			Ba    int `json:"ba"`
			Be    int `json:"be"`
			Bg    int `json:"bg"`
			Ch    int `json:"ch"`
			Cy    int `json:"cy"`
			Cz    int `json:"cz"`
			De    int `json:"de"`
			Dk    int `json:"dk"`
			Dz    int `json:"dz"`
			Ee    int `json:"ee"`
			Eg    int `json:"eg"`
			Es    int `json:"es"`
			Fi    int `json:"fi"`
			Fo    int `json:"fo"`
			Fr    int `json:"fr"`
			Gg    int `json:"gg"`
			Gi    int `json:"gi"`
			Gr    int `json:"gr"`
			Hr    int `json:"hr"`
			Hu    int `json:"hu"`
			Ie    int `json:"ie"`
			Il    int `json:"il"`
			Im    int `json:"im"`
			Is    int `json:"is"`
			It    int `json:"it"`
			Je    int `json:"je"`
			Lb    int `json:"lb"`
			Li    int `json:"li"`
			Lt    int `json:"lt"`
			Lu    int `json:"lu"`
			Lv    int `json:"lv"`
			Ly    int `json:"ly"`
			Ma    int `json:"ma"`
			Mc    int `json:"mc"`
			Md    int `json:"md"`
			Me    int `json:"me"`
			Mk    int `json:"mk"`
			Mt    int `json:"mt"`
			Nl    int `json:"nl"`
			No    int `json:"no"`
			Pl    int `json:"pl"`
			Ps    int `json:"ps"`
			Pt    int `json:"pt"`
			Ro    int `json:"ro"`
			Rs    int `json:"rs"`
			Se    int `json:"se"`
			Si    int `json:"si"`
			Sj    int `json:"sj"`
			Sk    int `json:"sk"`
			Sm    int `json:"sm"`
			Sy    int `json:"sy"`
			Tn    int `json:"tn"`
			Tr    int `json:"tr"`
			Ua    int `json:"ua"`
			Uk    int `json:"uk"`
			Us    int `json:"us"`
			Va    int `json:"va"`
			World int `json:"world"`
			Xk    int `json:"xk"`
		} `json:"transportation_scores"`
		TransportationValue  int `json:"transportation_value"`
		TransportationValues struct {
			Ad    int `json:"ad"`
			Al    int `json:"al"`
			At    int `json:"at"`
			Ax    int `json:"ax"`
			Ba    int `json:"ba"`
			Be    int `json:"be"`
			Bg    int `json:"bg"`
			Ch    int `json:"ch"`
			Cy    int `json:"cy"`
			Cz    int `json:"cz"`
			De    int `json:"de"`
			Dk    int `json:"dk"`
			Dz    int `json:"dz"`
			Ee    int `json:"ee"`
			Eg    int `json:"eg"`
			Es    int `json:"es"`
			Fi    int `json:"fi"`
			Fo    int `json:"fo"`
			Fr    int `json:"fr"`
			Gg    int `json:"gg"`
			Gi    int `json:"gi"`
			Gr    int `json:"gr"`
			Hr    int `json:"hr"`
			Hu    int `json:"hu"`
			Ie    int `json:"ie"`
			Il    int `json:"il"`
			Im    int `json:"im"`
			Is    int `json:"is"`
			It    int `json:"it"`
			Je    int `json:"je"`
			Lb    int `json:"lb"`
			Li    int `json:"li"`
			Lt    int `json:"lt"`
			Lu    int `json:"lu"`
			Lv    int `json:"lv"`
			Ly    int `json:"ly"`
			Ma    int `json:"ma"`
			Mc    int `json:"mc"`
			Md    int `json:"md"`
			Me    int `json:"me"`
			Mk    int `json:"mk"`
			Mt    int `json:"mt"`
			Nl    int `json:"nl"`
			No    int `json:"no"`
			Pl    int `json:"pl"`
			Ps    int `json:"ps"`
			Pt    int `json:"pt"`
			Ro    int `json:"ro"`
			Rs    int `json:"rs"`
			Se    int `json:"se"`
			Si    int `json:"si"`
			Sj    int `json:"sj"`
			Sk    int `json:"sk"`
			Sm    int `json:"sm"`
			Sy    int `json:"sy"`
			Tn    int `json:"tn"`
			Tr    int `json:"tr"`
			Ua    int `json:"ua"`
			Uk    int `json:"uk"`
			Us    int `json:"us"`
			Va    int `json:"va"`
			World int `json:"world"`
			Xk    int `json:"xk"`
		} `json:"transportation_values"`
		Value  int `json:"value"`
		Values struct {
			Ad    int `json:"ad"`
			Al    int `json:"al"`
			At    int `json:"at"`
			Ax    int `json:"ax"`
			Ba    int `json:"ba"`
			Be    int `json:"be"`
			Bg    int `json:"bg"`
			Ch    int `json:"ch"`
			Cy    int `json:"cy"`
			Cz    int `json:"cz"`
			De    int `json:"de"`
			Dk    int `json:"dk"`
			Dz    int `json:"dz"`
			Ee    int `json:"ee"`
			Eg    int `json:"eg"`
			Es    int `json:"es"`
			Fi    int `json:"fi"`
			Fo    int `json:"fo"`
			Fr    int `json:"fr"`
			Gg    int `json:"gg"`
			Gi    int `json:"gi"`
			Gr    int `json:"gr"`
			Hr    int `json:"hr"`
			Hu    int `json:"hu"`
			Ie    int `json:"ie"`
			Il    int `json:"il"`
			Im    int `json:"im"`
			Is    int `json:"is"`
			It    int `json:"it"`
			Je    int `json:"je"`
			Lb    int `json:"lb"`
			Li    int `json:"li"`
			Lt    int `json:"lt"`
			Lu    int `json:"lu"`
			Lv    int `json:"lv"`
			Ly    int `json:"ly"`
			Ma    int `json:"ma"`
			Mc    int `json:"mc"`
			Md    int `json:"md"`
			Me    int `json:"me"`
			Mk    int `json:"mk"`
			Mt    int `json:"mt"`
			Nl    int `json:"nl"`
			No    int `json:"no"`
			Pl    int `json:"pl"`
			Ps    int `json:"ps"`
			Pt    int `json:"pt"`
			Ro    int `json:"ro"`
			Rs    int `json:"rs"`
			Se    int `json:"se"`
			Si    int `json:"si"`
			Sj    int `json:"sj"`
			Sk    int `json:"sk"`
			Sm    int `json:"sm"`
			Sy    int `json:"sy"`
			Tn    int `json:"tn"`
			Tr    int `json:"tr"`
			Ua    int `json:"ua"`
			Uk    int `json:"uk"`
			Us    int `json:"us"`
			Va    int `json:"va"`
			World int `json:"world"`
			Xk    int `json:"xk"`
		} `json:"values"`
		Warning string `json:"warning"`
	} `json:"origins_of_ingredients"`
	Packaging struct {
		NonRecyclableAndNonBiodegradableMaterials int `json:"non_recyclable_and_non_biodegradable_materials"`
		Packagings                                []struct {
			EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
			EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
			Material                         string `json:"material"`
			NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
			Shape                            string `json:"shape"`
		} `json:"packagings"`
		Score int `json:"score"`
		Value int `json:"value"`
	} `json:"packaging"`
	ProductionSystem struct {
		Labels  []interface{} `json:"labels"`
		Value   int           `json:"value"`
		Warning string        `json:"warning"`
	} `json:"production_system"`
	ThreatenedSpecies struct{} `json:"threatened_species"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "origins_of_ingredients":
			easyjsonC4ff3609Decode38(in, &out.OriginsOfIngredients)
		case "packaging":
			easyjsonC4ff3609Decode39(in, &out.Packaging)
		case "production_system":
			easyjsonC4ff3609Decode40(in, &out.ProductionSystem)
		case "threatened_species":
			easyjsonC4ff3609Decode41(in, &out.ThreatenedSpecies)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode31(out *jwriter.Writer, in struct {
	OriginsOfIngredients struct {
		AggregatedOrigins []struct {
			EpiScore            string      `json:"epi_score"`
			Origin              string      `json:"origin"`
			Percent             int         `json:"percent"`
			TransportationScore interface{} `json:"transportation_score"`
		} `json:"aggregated_origins"`
		EpiScore                int      `json:"epi_score"`
		EpiValue                int      `json:"epi_value"`
		OriginsFromOriginsField []string `json:"origins_from_origins_field"`
		TransportationScore     int      `json:"transportation_score"`
		TransportationScores    struct {
			Ad    int `json:"ad"`
			Al    int `json:"al"`
			At    int `json:"at"`
			Ax    int `json:"ax"`
			Ba    int `json:"ba"`
			Be    int `json:"be"`
			Bg    int `json:"bg"`
			Ch    int `json:"ch"`
			Cy    int `json:"cy"`
			Cz    int `json:"cz"`
			De    int `json:"de"`
			Dk    int `json:"dk"`
			Dz    int `json:"dz"`
			Ee    int `json:"ee"`
			Eg    int `json:"eg"`
			Es    int `json:"es"`
			Fi    int `json:"fi"`
			Fo    int `json:"fo"`
			Fr    int `json:"fr"`
			Gg    int `json:"gg"`
			Gi    int `json:"gi"`
			Gr    int `json:"gr"`
			Hr    int `json:"hr"`
			Hu    int `json:"hu"`
			Ie    int `json:"ie"`
			Il    int `json:"il"`
			Im    int `json:"im"`
			Is    int `json:"is"`
			It    int `json:"it"`
			Je    int `json:"je"`
			Lb    int `json:"lb"`
			Li    int `json:"li"`
			Lt    int `json:"lt"`
			Lu    int `json:"lu"`
			Lv    int `json:"lv"`
			Ly    int `json:"ly"`
			Ma    int `json:"ma"`
			Mc    int `json:"mc"`
			Md    int `json:"md"`
			Me    int `json:"me"`
			Mk    int `json:"mk"`
			Mt    int `json:"mt"`
			Nl    int `json:"nl"`
			No    int `json:"no"`
			Pl    int `json:"pl"`
			Ps    int `json:"ps"`
			Pt    int `json:"pt"`
			Ro    int `json:"ro"`
			Rs    int `json:"rs"`
			Se    int `json:"se"`
			Si    int `json:"si"`
			Sj    int `json:"sj"`
			Sk    int `json:"sk"`
			Sm    int `json:"sm"`
			Sy    int `json:"sy"`
			Tn    int `json:"tn"`
			Tr    int `json:"tr"`
			Ua    int `json:"ua"`
			Uk    int `json:"uk"`
			Us    int `json:"us"`
			Va    int `json:"va"`
			World int `json:"world"`
			Xk    int `json:"xk"`
		} `json:"transportation_scores"`
		TransportationValue  int `json:"transportation_value"`
		TransportationValues struct {
			Ad    int `json:"ad"`
			Al    int `json:"al"`
			At    int `json:"at"`
			Ax    int `json:"ax"`
			Ba    int `json:"ba"`
			Be    int `json:"be"`
			Bg    int `json:"bg"`
			Ch    int `json:"ch"`
			Cy    int `json:"cy"`
			Cz    int `json:"cz"`
			De    int `json:"de"`
			Dk    int `json:"dk"`
			Dz    int `json:"dz"`
			Ee    int `json:"ee"`
			Eg    int `json:"eg"`
			Es    int `json:"es"`
			Fi    int `json:"fi"`
			Fo    int `json:"fo"`
			Fr    int `json:"fr"`
			Gg    int `json:"gg"`
			Gi    int `json:"gi"`
			Gr    int `json:"gr"`
			Hr    int `json:"hr"`
			Hu    int `json:"hu"`
			Ie    int `json:"ie"`
			Il    int `json:"il"`
			Im    int `json:"im"`
			Is    int `json:"is"`
			It    int `json:"it"`
			Je    int `json:"je"`
			Lb    int `json:"lb"`
			Li    int `json:"li"`
			Lt    int `json:"lt"`
			Lu    int `json:"lu"`
			Lv    int `json:"lv"`
			Ly    int `json:"ly"`
			Ma    int `json:"ma"`
			Mc    int `json:"mc"`
			Md    int `json:"md"`
			Me    int `json:"me"`
			Mk    int `json:"mk"`
			Mt    int `json:"mt"`
			Nl    int `json:"nl"`
			No    int `json:"no"`
			Pl    int `json:"pl"`
			Ps    int `json:"ps"`
			Pt    int `json:"pt"`
			Ro    int `json:"ro"`
			Rs    int `json:"rs"`
			Se    int `json:"se"`
			Si    int `json:"si"`
			Sj    int `json:"sj"`
			Sk    int `json:"sk"`
			Sm    int `json:"sm"`
			Sy    int `json:"sy"`
			Tn    int `json:"tn"`
			Tr    int `json:"tr"`
			Ua    int `json:"ua"`
			Uk    int `json:"uk"`
			Us    int `json:"us"`
			Va    int `json:"va"`
			World int `json:"world"`
			Xk    int `json:"xk"`
		} `json:"transportation_values"`
		Value  int `json:"value"`
		Values struct {
			Ad    int `json:"ad"`
			Al    int `json:"al"`
			At    int `json:"at"`
			Ax    int `json:"ax"`
			Ba    int `json:"ba"`
			Be    int `json:"be"`
			Bg    int `json:"bg"`
			Ch    int `json:"ch"`
			Cy    int `json:"cy"`
			Cz    int `json:"cz"`
			De    int `json:"de"`
			Dk    int `json:"dk"`
			Dz    int `json:"dz"`
			Ee    int `json:"ee"`
			Eg    int `json:"eg"`
			Es    int `json:"es"`
			Fi    int `json:"fi"`
			Fo    int `json:"fo"`
			Fr    int `json:"fr"`
			Gg    int `json:"gg"`
			Gi    int `json:"gi"`
			Gr    int `json:"gr"`
			Hr    int `json:"hr"`
			Hu    int `json:"hu"`
			Ie    int `json:"ie"`
			Il    int `json:"il"`
			Im    int `json:"im"`
			Is    int `json:"is"`
			It    int `json:"it"`
			Je    int `json:"je"`
			Lb    int `json:"lb"`
			Li    int `json:"li"`
			Lt    int `json:"lt"`
			Lu    int `json:"lu"`
			Lv    int `json:"lv"`
			Ly    int `json:"ly"`
			Ma    int `json:"ma"`
			Mc    int `json:"mc"`
			Md    int `json:"md"`
			Me    int `json:"me"`
			Mk    int `json:"mk"`
			Mt    int `json:"mt"`
			Nl    int `json:"nl"`
			No    int `json:"no"`
			Pl    int `json:"pl"`
			Ps    int `json:"ps"`
			Pt    int `json:"pt"`
			Ro    int `json:"ro"`
			Rs    int `json:"rs"`
			Se    int `json:"se"`
			Si    int `json:"si"`
			Sj    int `json:"sj"`
			Sk    int `json:"sk"`
			Sm    int `json:"sm"`
			Sy    int `json:"sy"`
			Tn    int `json:"tn"`
			Tr    int `json:"tr"`
			Ua    int `json:"ua"`
			Uk    int `json:"uk"`
			Us    int `json:"us"`
			Va    int `json:"va"`
			World int `json:"world"`
			Xk    int `json:"xk"`
		} `json:"values"`
		Warning string `json:"warning"`
	} `json:"origins_of_ingredients"`
	Packaging struct {
		NonRecyclableAndNonBiodegradableMaterials int `json:"non_recyclable_and_non_biodegradable_materials"`
		Packagings                                []struct {
			EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
			EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
			Material                         string `json:"material"`
			NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
			Shape                            string `json:"shape"`
		} `json:"packagings"`
		Score int `json:"score"`
		Value int `json:"value"`
	} `json:"packaging"`
	ProductionSystem struct {
		Labels  []interface{} `json:"labels"`
		Value   int           `json:"value"`
		Warning string        `json:"warning"`
	} `json:"production_system"`
	ThreatenedSpecies struct{} `json:"threatened_species"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"origins_of_ingredients\":"
		out.RawString(prefix[1:])
		easyjsonC4ff3609Encode38(out, in.OriginsOfIngredients)
	}
	{
		const prefix string = ",\"packaging\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode39(out, in.Packaging)
	}
	{
		const prefix string = ",\"production_system\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode40(out, in.ProductionSystem)
	}
	{
		const prefix string = ",\"threatened_species\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode41(out, in.ThreatenedSpecies)
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode41(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode41(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonC4ff3609Decode40(in *jlexer.Lexer, out *struct {
	Labels  []interface{} `json:"labels"`
	Value   int           `json:"value"`
	Warning string        `json:"warning"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]interface{}, 0, 4)
					} else {
						out.Labels = []interface{}{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v298 interface{}
					if m, ok := v298.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v298.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v298 = in.Interface()
					}
					out.Labels = append(out.Labels, v298)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "value":
			out.Value = int(in.Int())
		case "warning":
			out.Warning = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode40(out *jwriter.Writer, in struct {
	Labels  []interface{} `json:"labels"`
	Value   int           `json:"value"`
	Warning string        `json:"warning"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix[1:])
		if in.Labels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v299, v300 := range in.Labels {
				if v299 > 0 {
					out.RawByte(',')
				}
				if m, ok := v300.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v300.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v300))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int(int(in.Value))
	}
	{
		const prefix string = ",\"warning\":"
		out.RawString(prefix)
		out.String(string(in.Warning))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode39(in *jlexer.Lexer, out *struct {
	NonRecyclableAndNonBiodegradableMaterials int `json:"non_recyclable_and_non_biodegradable_materials"`
	Packagings                                []struct {
		EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
		EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
		Material                         string `json:"material"`
		NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
		Shape                            string `json:"shape"`
	} `json:"packagings"`
	Score int `json:"score"`
	Value int `json:"value"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "non_recyclable_and_non_biodegradable_materials":
			out.NonRecyclableAndNonBiodegradableMaterials = int(in.Int())
		case "packagings":
			if in.IsNull() {
				in.Skip()
				out.Packagings = nil
			} else {
				in.Delim('[')
				if out.Packagings == nil {
					if !in.IsDelim(']') {
						out.Packagings = make([]struct {
							EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
							EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
							Material                         string `json:"material"`
							NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
							Shape                            string `json:"shape"`
						}, 0, 1)
					} else {
						out.Packagings = []struct {
							EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
							EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
							Material                         string `json:"material"`
							NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
							Shape                            string `json:"shape"`
						}{}
					}
				} else {
					out.Packagings = (out.Packagings)[:0]
				}
				for !in.IsDelim(']') {
					var v301 struct {
						EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
						EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
						Material                         string `json:"material"`
						NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
						Shape                            string `json:"shape"`
					}
					easyjsonC4ff3609Decode42(in, &v301)
					out.Packagings = append(out.Packagings, v301)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "score":
			out.Score = int(in.Int())
		case "value":
			out.Value = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode39(out *jwriter.Writer, in struct {
	NonRecyclableAndNonBiodegradableMaterials int `json:"non_recyclable_and_non_biodegradable_materials"`
	Packagings                                []struct {
		EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
		EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
		Material                         string `json:"material"`
		NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
		Shape                            string `json:"shape"`
	} `json:"packagings"`
	Score int `json:"score"`
	Value int `json:"value"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"non_recyclable_and_non_biodegradable_materials\":"
		out.RawString(prefix[1:])
		out.Int(int(in.NonRecyclableAndNonBiodegradableMaterials))
	}
	{
		const prefix string = ",\"packagings\":"
		out.RawString(prefix)
		if in.Packagings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v302, v303 := range in.Packagings {
				if v302 > 0 {
					out.RawByte(',')
				}
				easyjsonC4ff3609Encode42(out, v303)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Int(int(in.Score))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int(int(in.Value))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode42(in *jlexer.Lexer, out *struct {
	EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
	EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
	Material                         string `json:"material"`
	NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
	Shape                            string `json:"shape"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ecoscore_material_score":
			out.EcoscoreMaterialScore = int(in.Int())
		case "ecoscore_shape_ratio":
			out.EcoscoreShapeRatio = int(in.Int())
		case "material":
			out.Material = string(in.String())
		case "non_recyclable_and_non_biodegradable":
			out.NonRecyclableAndNonBiodegradable = string(in.String())
		case "shape":
			out.Shape = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode42(out *jwriter.Writer, in struct {
	EcoscoreMaterialScore            int    `json:"ecoscore_material_score"`
	EcoscoreShapeRatio               int    `json:"ecoscore_shape_ratio"`
	Material                         string `json:"material"`
	NonRecyclableAndNonBiodegradable string `json:"non_recyclable_and_non_biodegradable"`
	Shape                            string `json:"shape"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ecoscore_material_score\":"
		out.RawString(prefix[1:])
		out.Int(int(in.EcoscoreMaterialScore))
	}
	{
		const prefix string = ",\"ecoscore_shape_ratio\":"
		out.RawString(prefix)
		out.Int(int(in.EcoscoreShapeRatio))
	}
	{
		const prefix string = ",\"material\":"
		out.RawString(prefix)
		out.String(string(in.Material))
	}
	{
		const prefix string = ",\"non_recyclable_and_non_biodegradable\":"
		out.RawString(prefix)
		out.String(string(in.NonRecyclableAndNonBiodegradable))
	}
	{
		const prefix string = ",\"shape\":"
		out.RawString(prefix)
		out.String(string(in.Shape))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode38(in *jlexer.Lexer, out *struct {
	AggregatedOrigins []struct {
		EpiScore            string      `json:"epi_score"`
		Origin              string      `json:"origin"`
		Percent             int         `json:"percent"`
		TransportationScore interface{} `json:"transportation_score"`
	} `json:"aggregated_origins"`
	EpiScore                int      `json:"epi_score"`
	EpiValue                int      `json:"epi_value"`
	OriginsFromOriginsField []string `json:"origins_from_origins_field"`
	TransportationScore     int      `json:"transportation_score"`
	TransportationScores    struct {
		Ad    int `json:"ad"`
		Al    int `json:"al"`
		At    int `json:"at"`
		Ax    int `json:"ax"`
		Ba    int `json:"ba"`
		Be    int `json:"be"`
		Bg    int `json:"bg"`
		Ch    int `json:"ch"`
		Cy    int `json:"cy"`
		Cz    int `json:"cz"`
		De    int `json:"de"`
		Dk    int `json:"dk"`
		Dz    int `json:"dz"`
		Ee    int `json:"ee"`
		Eg    int `json:"eg"`
		Es    int `json:"es"`
		Fi    int `json:"fi"`
		Fo    int `json:"fo"`
		Fr    int `json:"fr"`
		Gg    int `json:"gg"`
		Gi    int `json:"gi"`
		Gr    int `json:"gr"`
		Hr    int `json:"hr"`
		Hu    int `json:"hu"`
		Ie    int `json:"ie"`
		Il    int `json:"il"`
		Im    int `json:"im"`
		Is    int `json:"is"`
		It    int `json:"it"`
		Je    int `json:"je"`
		Lb    int `json:"lb"`
		Li    int `json:"li"`
		Lt    int `json:"lt"`
		Lu    int `json:"lu"`
		Lv    int `json:"lv"`
		Ly    int `json:"ly"`
		Ma    int `json:"ma"`
		Mc    int `json:"mc"`
		Md    int `json:"md"`
		Me    int `json:"me"`
		Mk    int `json:"mk"`
		Mt    int `json:"mt"`
		Nl    int `json:"nl"`
		No    int `json:"no"`
		Pl    int `json:"pl"`
		Ps    int `json:"ps"`
		Pt    int `json:"pt"`
		Ro    int `json:"ro"`
		Rs    int `json:"rs"`
		Se    int `json:"se"`
		Si    int `json:"si"`
		Sj    int `json:"sj"`
		Sk    int `json:"sk"`
		Sm    int `json:"sm"`
		Sy    int `json:"sy"`
		Tn    int `json:"tn"`
		Tr    int `json:"tr"`
		Ua    int `json:"ua"`
		Uk    int `json:"uk"`
		Us    int `json:"us"`
		Va    int `json:"va"`
		World int `json:"world"`
		Xk    int `json:"xk"`
	} `json:"transportation_scores"`
	TransportationValue  int `json:"transportation_value"`
	TransportationValues struct {
		Ad    int `json:"ad"`
		Al    int `json:"al"`
		At    int `json:"at"`
		Ax    int `json:"ax"`
		Ba    int `json:"ba"`
		Be    int `json:"be"`
		Bg    int `json:"bg"`
		Ch    int `json:"ch"`
		Cy    int `json:"cy"`
		Cz    int `json:"cz"`
		De    int `json:"de"`
		Dk    int `json:"dk"`
		Dz    int `json:"dz"`
		Ee    int `json:"ee"`
		Eg    int `json:"eg"`
		Es    int `json:"es"`
		Fi    int `json:"fi"`
		Fo    int `json:"fo"`
		Fr    int `json:"fr"`
		Gg    int `json:"gg"`
		Gi    int `json:"gi"`
		Gr    int `json:"gr"`
		Hr    int `json:"hr"`
		Hu    int `json:"hu"`
		Ie    int `json:"ie"`
		Il    int `json:"il"`
		Im    int `json:"im"`
		Is    int `json:"is"`
		It    int `json:"it"`
		Je    int `json:"je"`
		Lb    int `json:"lb"`
		Li    int `json:"li"`
		Lt    int `json:"lt"`
		Lu    int `json:"lu"`
		Lv    int `json:"lv"`
		Ly    int `json:"ly"`
		Ma    int `json:"ma"`
		Mc    int `json:"mc"`
		Md    int `json:"md"`
		Me    int `json:"me"`
		Mk    int `json:"mk"`
		Mt    int `json:"mt"`
		Nl    int `json:"nl"`
		No    int `json:"no"`
		Pl    int `json:"pl"`
		Ps    int `json:"ps"`
		Pt    int `json:"pt"`
		Ro    int `json:"ro"`
		Rs    int `json:"rs"`
		Se    int `json:"se"`
		Si    int `json:"si"`
		Sj    int `json:"sj"`
		Sk    int `json:"sk"`
		Sm    int `json:"sm"`
		Sy    int `json:"sy"`
		Tn    int `json:"tn"`
		Tr    int `json:"tr"`
		Ua    int `json:"ua"`
		Uk    int `json:"uk"`
		Us    int `json:"us"`
		Va    int `json:"va"`
		World int `json:"world"`
		Xk    int `json:"xk"`
	} `json:"transportation_values"`
	Value  int `json:"value"`
	Values struct {
		Ad    int `json:"ad"`
		Al    int `json:"al"`
		At    int `json:"at"`
		Ax    int `json:"ax"`
		Ba    int `json:"ba"`
		Be    int `json:"be"`
		Bg    int `json:"bg"`
		Ch    int `json:"ch"`
		Cy    int `json:"cy"`
		Cz    int `json:"cz"`
		De    int `json:"de"`
		Dk    int `json:"dk"`
		Dz    int `json:"dz"`
		Ee    int `json:"ee"`
		Eg    int `json:"eg"`
		Es    int `json:"es"`
		Fi    int `json:"fi"`
		Fo    int `json:"fo"`
		Fr    int `json:"fr"`
		Gg    int `json:"gg"`
		Gi    int `json:"gi"`
		Gr    int `json:"gr"`
		Hr    int `json:"hr"`
		Hu    int `json:"hu"`
		Ie    int `json:"ie"`
		Il    int `json:"il"`
		Im    int `json:"im"`
		Is    int `json:"is"`
		It    int `json:"it"`
		Je    int `json:"je"`
		Lb    int `json:"lb"`
		Li    int `json:"li"`
		Lt    int `json:"lt"`
		Lu    int `json:"lu"`
		Lv    int `json:"lv"`
		Ly    int `json:"ly"`
		Ma    int `json:"ma"`
		Mc    int `json:"mc"`
		Md    int `json:"md"`
		Me    int `json:"me"`
		Mk    int `json:"mk"`
		Mt    int `json:"mt"`
		Nl    int `json:"nl"`
		No    int `json:"no"`
		Pl    int `json:"pl"`
		Ps    int `json:"ps"`
		Pt    int `json:"pt"`
		Ro    int `json:"ro"`
		Rs    int `json:"rs"`
		Se    int `json:"se"`
		Si    int `json:"si"`
		Sj    int `json:"sj"`
		Sk    int `json:"sk"`
		Sm    int `json:"sm"`
		Sy    int `json:"sy"`
		Tn    int `json:"tn"`
		Tr    int `json:"tr"`
		Ua    int `json:"ua"`
		Uk    int `json:"uk"`
		Us    int `json:"us"`
		Va    int `json:"va"`
		World int `json:"world"`
		Xk    int `json:"xk"`
	} `json:"values"`
	Warning string `json:"warning"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aggregated_origins":
			if in.IsNull() {
				in.Skip()
				out.AggregatedOrigins = nil
			} else {
				in.Delim('[')
				if out.AggregatedOrigins == nil {
					if !in.IsDelim(']') {
						out.AggregatedOrigins = make([]struct {
							EpiScore            string      `json:"epi_score"`
							Origin              string      `json:"origin"`
							Percent             int         `json:"percent"`
							TransportationScore interface{} `json:"transportation_score"`
						}, 0, 1)
					} else {
						out.AggregatedOrigins = []struct {
							EpiScore            string      `json:"epi_score"`
							Origin              string      `json:"origin"`
							Percent             int         `json:"percent"`
							TransportationScore interface{} `json:"transportation_score"`
						}{}
					}
				} else {
					out.AggregatedOrigins = (out.AggregatedOrigins)[:0]
				}
				for !in.IsDelim(']') {
					var v304 struct {
						EpiScore            string      `json:"epi_score"`
						Origin              string      `json:"origin"`
						Percent             int         `json:"percent"`
						TransportationScore interface{} `json:"transportation_score"`
					}
					easyjsonC4ff3609Decode43(in, &v304)
					out.AggregatedOrigins = append(out.AggregatedOrigins, v304)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "epi_score":
			out.EpiScore = int(in.Int())
		case "epi_value":
			out.EpiValue = int(in.Int())
		case "origins_from_origins_field":
			if in.IsNull() {
				in.Skip()
				out.OriginsFromOriginsField = nil
			} else {
				in.Delim('[')
				if out.OriginsFromOriginsField == nil {
					if !in.IsDelim(']') {
						out.OriginsFromOriginsField = make([]string, 0, 4)
					} else {
						out.OriginsFromOriginsField = []string{}
					}
				} else {
					out.OriginsFromOriginsField = (out.OriginsFromOriginsField)[:0]
				}
				for !in.IsDelim(']') {
					var v305 string
					v305 = string(in.String())
					out.OriginsFromOriginsField = append(out.OriginsFromOriginsField, v305)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "transportation_score":
			out.TransportationScore = int(in.Int())
		case "transportation_scores":
			easyjsonC4ff3609Decode36(in, &out.TransportationScores)
		case "transportation_value":
			out.TransportationValue = int(in.Int())
		case "transportation_values":
			easyjsonC4ff3609Decode36(in, &out.TransportationValues)
		case "value":
			out.Value = int(in.Int())
		case "values":
			easyjsonC4ff3609Decode36(in, &out.Values)
		case "warning":
			out.Warning = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode38(out *jwriter.Writer, in struct {
	AggregatedOrigins []struct {
		EpiScore            string      `json:"epi_score"`
		Origin              string      `json:"origin"`
		Percent             int         `json:"percent"`
		TransportationScore interface{} `json:"transportation_score"`
	} `json:"aggregated_origins"`
	EpiScore                int      `json:"epi_score"`
	EpiValue                int      `json:"epi_value"`
	OriginsFromOriginsField []string `json:"origins_from_origins_field"`
	TransportationScore     int      `json:"transportation_score"`
	TransportationScores    struct {
		Ad    int `json:"ad"`
		Al    int `json:"al"`
		At    int `json:"at"`
		Ax    int `json:"ax"`
		Ba    int `json:"ba"`
		Be    int `json:"be"`
		Bg    int `json:"bg"`
		Ch    int `json:"ch"`
		Cy    int `json:"cy"`
		Cz    int `json:"cz"`
		De    int `json:"de"`
		Dk    int `json:"dk"`
		Dz    int `json:"dz"`
		Ee    int `json:"ee"`
		Eg    int `json:"eg"`
		Es    int `json:"es"`
		Fi    int `json:"fi"`
		Fo    int `json:"fo"`
		Fr    int `json:"fr"`
		Gg    int `json:"gg"`
		Gi    int `json:"gi"`
		Gr    int `json:"gr"`
		Hr    int `json:"hr"`
		Hu    int `json:"hu"`
		Ie    int `json:"ie"`
		Il    int `json:"il"`
		Im    int `json:"im"`
		Is    int `json:"is"`
		It    int `json:"it"`
		Je    int `json:"je"`
		Lb    int `json:"lb"`
		Li    int `json:"li"`
		Lt    int `json:"lt"`
		Lu    int `json:"lu"`
		Lv    int `json:"lv"`
		Ly    int `json:"ly"`
		Ma    int `json:"ma"`
		Mc    int `json:"mc"`
		Md    int `json:"md"`
		Me    int `json:"me"`
		Mk    int `json:"mk"`
		Mt    int `json:"mt"`
		Nl    int `json:"nl"`
		No    int `json:"no"`
		Pl    int `json:"pl"`
		Ps    int `json:"ps"`
		Pt    int `json:"pt"`
		Ro    int `json:"ro"`
		Rs    int `json:"rs"`
		Se    int `json:"se"`
		Si    int `json:"si"`
		Sj    int `json:"sj"`
		Sk    int `json:"sk"`
		Sm    int `json:"sm"`
		Sy    int `json:"sy"`
		Tn    int `json:"tn"`
		Tr    int `json:"tr"`
		Ua    int `json:"ua"`
		Uk    int `json:"uk"`
		Us    int `json:"us"`
		Va    int `json:"va"`
		World int `json:"world"`
		Xk    int `json:"xk"`
	} `json:"transportation_scores"`
	TransportationValue  int `json:"transportation_value"`
	TransportationValues struct {
		Ad    int `json:"ad"`
		Al    int `json:"al"`
		At    int `json:"at"`
		Ax    int `json:"ax"`
		Ba    int `json:"ba"`
		Be    int `json:"be"`
		Bg    int `json:"bg"`
		Ch    int `json:"ch"`
		Cy    int `json:"cy"`
		Cz    int `json:"cz"`
		De    int `json:"de"`
		Dk    int `json:"dk"`
		Dz    int `json:"dz"`
		Ee    int `json:"ee"`
		Eg    int `json:"eg"`
		Es    int `json:"es"`
		Fi    int `json:"fi"`
		Fo    int `json:"fo"`
		Fr    int `json:"fr"`
		Gg    int `json:"gg"`
		Gi    int `json:"gi"`
		Gr    int `json:"gr"`
		Hr    int `json:"hr"`
		Hu    int `json:"hu"`
		Ie    int `json:"ie"`
		Il    int `json:"il"`
		Im    int `json:"im"`
		Is    int `json:"is"`
		It    int `json:"it"`
		Je    int `json:"je"`
		Lb    int `json:"lb"`
		Li    int `json:"li"`
		Lt    int `json:"lt"`
		Lu    int `json:"lu"`
		Lv    int `json:"lv"`
		Ly    int `json:"ly"`
		Ma    int `json:"ma"`
		Mc    int `json:"mc"`
		Md    int `json:"md"`
		Me    int `json:"me"`
		Mk    int `json:"mk"`
		Mt    int `json:"mt"`
		Nl    int `json:"nl"`
		No    int `json:"no"`
		Pl    int `json:"pl"`
		Ps    int `json:"ps"`
		Pt    int `json:"pt"`
		Ro    int `json:"ro"`
		Rs    int `json:"rs"`
		Se    int `json:"se"`
		Si    int `json:"si"`
		Sj    int `json:"sj"`
		Sk    int `json:"sk"`
		Sm    int `json:"sm"`
		Sy    int `json:"sy"`
		Tn    int `json:"tn"`
		Tr    int `json:"tr"`
		Ua    int `json:"ua"`
		Uk    int `json:"uk"`
		Us    int `json:"us"`
		Va    int `json:"va"`
		World int `json:"world"`
		Xk    int `json:"xk"`
	} `json:"transportation_values"`
	Value  int `json:"value"`
	Values struct {
		Ad    int `json:"ad"`
		Al    int `json:"al"`
		At    int `json:"at"`
		Ax    int `json:"ax"`
		Ba    int `json:"ba"`
		Be    int `json:"be"`
		Bg    int `json:"bg"`
		Ch    int `json:"ch"`
		Cy    int `json:"cy"`
		Cz    int `json:"cz"`
		De    int `json:"de"`
		Dk    int `json:"dk"`
		Dz    int `json:"dz"`
		Ee    int `json:"ee"`
		Eg    int `json:"eg"`
		Es    int `json:"es"`
		Fi    int `json:"fi"`
		Fo    int `json:"fo"`
		Fr    int `json:"fr"`
		Gg    int `json:"gg"`
		Gi    int `json:"gi"`
		Gr    int `json:"gr"`
		Hr    int `json:"hr"`
		Hu    int `json:"hu"`
		Ie    int `json:"ie"`
		Il    int `json:"il"`
		Im    int `json:"im"`
		Is    int `json:"is"`
		It    int `json:"it"`
		Je    int `json:"je"`
		Lb    int `json:"lb"`
		Li    int `json:"li"`
		Lt    int `json:"lt"`
		Lu    int `json:"lu"`
		Lv    int `json:"lv"`
		Ly    int `json:"ly"`
		Ma    int `json:"ma"`
		Mc    int `json:"mc"`
		Md    int `json:"md"`
		Me    int `json:"me"`
		Mk    int `json:"mk"`
		Mt    int `json:"mt"`
		Nl    int `json:"nl"`
		No    int `json:"no"`
		Pl    int `json:"pl"`
		Ps    int `json:"ps"`
		Pt    int `json:"pt"`
		Ro    int `json:"ro"`
		Rs    int `json:"rs"`
		Se    int `json:"se"`
		Si    int `json:"si"`
		Sj    int `json:"sj"`
		Sk    int `json:"sk"`
		Sm    int `json:"sm"`
		Sy    int `json:"sy"`
		Tn    int `json:"tn"`
		Tr    int `json:"tr"`
		Ua    int `json:"ua"`
		Uk    int `json:"uk"`
		Us    int `json:"us"`
		Va    int `json:"va"`
		World int `json:"world"`
		Xk    int `json:"xk"`
	} `json:"values"`
	Warning string `json:"warning"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"aggregated_origins\":"
		out.RawString(prefix[1:])
		if in.AggregatedOrigins == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v306, v307 := range in.AggregatedOrigins {
				if v306 > 0 {
					out.RawByte(',')
				}
				easyjsonC4ff3609Encode43(out, v307)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"epi_score\":"
		out.RawString(prefix)
		out.Int(int(in.EpiScore))
	}
	{
		const prefix string = ",\"epi_value\":"
		out.RawString(prefix)
		out.Int(int(in.EpiValue))
	}
	{
		const prefix string = ",\"origins_from_origins_field\":"
		out.RawString(prefix)
		if in.OriginsFromOriginsField == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v308, v309 := range in.OriginsFromOriginsField {
				if v308 > 0 {
					out.RawByte(',')
				}
				out.String(string(v309))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"transportation_score\":"
		out.RawString(prefix)
		out.Int(int(in.TransportationScore))
	}
	{
		const prefix string = ",\"transportation_scores\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode36(out, in.TransportationScores)
	}
	{
		const prefix string = ",\"transportation_value\":"
		out.RawString(prefix)
		out.Int(int(in.TransportationValue))
	}
	{
		const prefix string = ",\"transportation_values\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode36(out, in.TransportationValues)
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Int(int(in.Value))
	}
	{
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		easyjsonC4ff3609Encode36(out, in.Values)
	}
	{
		const prefix string = ",\"warning\":"
		out.RawString(prefix)
		out.String(string(in.Warning))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode43(in *jlexer.Lexer, out *struct {
	EpiScore            string      `json:"epi_score"`
	Origin              string      `json:"origin"`
	Percent             int         `json:"percent"`
	TransportationScore interface{} `json:"transportation_score"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "epi_score":
			out.EpiScore = string(in.String())
		case "origin":
			out.Origin = string(in.String())
		case "percent":
			out.Percent = int(in.Int())
		case "transportation_score":
			if m, ok := out.TransportationScore.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.TransportationScore.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.TransportationScore = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode43(out *jwriter.Writer, in struct {
	EpiScore            string      `json:"epi_score"`
	Origin              string      `json:"origin"`
	Percent             int         `json:"percent"`
	TransportationScore interface{} `json:"transportation_score"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"epi_score\":"
		out.RawString(prefix[1:])
		out.String(string(in.EpiScore))
	}
	{
		const prefix string = ",\"origin\":"
		out.RawString(prefix)
		out.String(string(in.Origin))
	}
	{
		const prefix string = ",\"percent\":"
		out.RawString(prefix)
		out.Int(int(in.Percent))
	}
	{
		const prefix string = ",\"transportation_score\":"
		out.RawString(prefix)
		if m, ok := in.TransportationScore.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.TransportationScore.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.TransportationScore))
		}
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode2(in *jlexer.Lexer, out *struct {
	CiqualFoodNameEn string `json:"ciqual_food_name:en"`
	CiqualFoodNameFr string `json:"ciqual_food_name:fr"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ciqual_food_name:en":
			out.CiqualFoodNameEn = string(in.String())
		case "ciqual_food_name:fr":
			out.CiqualFoodNameFr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode2(out *jwriter.Writer, in struct {
	CiqualFoodNameEn string `json:"ciqual_food_name:en"`
	CiqualFoodNameFr string `json:"ciqual_food_name:fr"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ciqual_food_name:en\":"
		out.RawString(prefix[1:])
		out.String(string(in.CiqualFoodNameEn))
	}
	{
		const prefix string = ",\"ciqual_food_name:fr\":"
		out.RawString(prefix)
		out.String(string(in.CiqualFoodNameFr))
	}
	out.RawByte('}')
}
func easyjsonC4ff3609Decode1(in *jlexer.Lexer, out *struct {
	AgribalyseFoodCodeEn string `json:"agribalyse_food_code:en"`
	CiqualFoodCodeEn     string `json:"ciqual_food_code:en"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "agribalyse_food_code:en":
			out.AgribalyseFoodCodeEn = string(in.String())
		case "ciqual_food_code:en":
			out.CiqualFoodCodeEn = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC4ff3609Encode1(out *jwriter.Writer, in struct {
	AgribalyseFoodCodeEn string `json:"agribalyse_food_code:en"`
	CiqualFoodCodeEn     string `json:"ciqual_food_code:en"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"agribalyse_food_code:en\":"
		out.RawString(prefix[1:])
		out.String(string(in.AgribalyseFoodCodeEn))
	}
	{
		const prefix string = ",\"ciqual_food_code:en\":"
		out.RawString(prefix)
		out.String(string(in.CiqualFoodCodeEn))
	}
	out.RawByte('}')
}
