package benchjsonallocate_test

import (
	"encoding/json"
	"testing"

	_ "embed"

	jsoniter "github.com/json-iterator/go"
	"github.com/mailru/easyjson"
	benchjsonallocate "github.com/thanhpp/gopher/cmd/bench-json-allocate"
)

//go:embed large_json.json
var largeData string

func BenchmarkJSONiterAllocateLarge(b *testing.B) {
	json := jsoniter.ConfigDefault
	for i := 0; i < b.N; i++ {
		var s benchjsonallocate.AutoGenerated
		json.UnmarshalFromString(largeData, &s)
	}
}

func BenchmarkJSONAllocateLarge(b *testing.B) {
	for i := 0; i < b.N; i++ {
		var s benchjsonallocate.AutoGenerated
		json.Unmarshal([]byte(largeData), &s)
	}
}

func BenchmarkEasyJSONLarge(b *testing.B) {
	for i := 0; i < b.N; i++ {
		var s benchjsonallocate.AutoGenerated
		easyjson.Unmarshal([]byte(largeData), &s)
	}
}

/*
goos: linux
goarch: amd64
pkg: github.com/thanhpp/gopher/cmd/bench-json-allocate
cpu: AMD Ryzen 5 5600G with Radeon Graphics
BenchmarkJSONiterAllocateLarge
BenchmarkJSONiterAllocateLarge-12    	    5314	    477975 ns/op	  189794 B/op	    1512 allocs/op
BenchmarkJSONAllocateLarge
BenchmarkJSONAllocateLarge-12        	    2044	    617651 ns/op	   99648 B/op	     330 allocs/op
BenchmarkEasyJSONLarge
BenchmarkEasyJSONLarge-12            	    7150	    222143 ns/op	   87088 B/op	     324 allocs/op
PASS
ok  	github.com/thanhpp/gopher/cmd/bench-json-allocate	6.507s
*/
