// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package benchpool

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool(in *jlexer.Lexer, out *PoolToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "decimals":
			out.Decimals = uint8(in.Uint8())
		case "weight":
			out.Weight = uint(in.Uint())
		case "swappable":
			out.Swappable = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool(out *jwriter.Writer, in PoolToken) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != "" {
		const prefix string = ",\"address\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Address))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Symbol != "" {
		const prefix string = ",\"symbol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Symbol))
	}
	if in.Decimals != 0 {
		const prefix string = ",\"decimals\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Decimals))
	}
	if in.Weight != 0 {
		const prefix string = ",\"weight\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint(uint(in.Weight))
	}
	if in.Swappable {
		const prefix string = ",\"swappable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Swappable))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PoolToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PoolToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PoolToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PoolToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool(l, v)
}
func easyjson6601e8cdDecodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool1(in *jlexer.Lexer, out *Pool) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reserveUsd":
			out.ReserveUsd = float64(in.Float64())
		case "amplifiedTvl":
			out.AmplifiedTvl = float64(in.Float64())
		case "swapFee":
			out.SwapFee = float64(in.Float64())
		case "exchange":
			out.Exchange = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "reserves":
			if in.IsNull() {
				in.Skip()
				out.Reserves = nil
			} else {
				in.Delim('[')
				if out.Reserves == nil {
					if !in.IsDelim(']') {
						out.Reserves = make(PoolReserves, 0, 4)
					} else {
						out.Reserves = PoolReserves{}
					}
				} else {
					out.Reserves = (out.Reserves)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Reserves = append(out.Reserves, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tokens":
			if in.IsNull() {
				in.Skip()
				out.Tokens = nil
			} else {
				in.Delim('[')
				if out.Tokens == nil {
					if !in.IsDelim(']') {
						out.Tokens = make([]*PoolToken, 0, 8)
					} else {
						out.Tokens = []*PoolToken{}
					}
				} else {
					out.Tokens = (out.Tokens)[:0]
				}
				for !in.IsDelim(']') {
					var v2 *PoolToken
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(PoolToken)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					out.Tokens = append(out.Tokens, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "extra":
			out.Extra = string(in.String())
		case "staticExtra":
			out.StaticExtra = string(in.String())
		case "totalSupply":
			out.TotalSupply = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool1(out *jwriter.Writer, in Pool) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ReserveUsd != 0 {
		const prefix string = ",\"reserveUsd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.ReserveUsd))
	}
	if in.AmplifiedTvl != 0 {
		const prefix string = ",\"amplifiedTvl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.AmplifiedTvl))
	}
	if in.SwapFee != 0 {
		const prefix string = ",\"swapFee\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.SwapFee))
	}
	if in.Exchange != "" {
		const prefix string = ",\"exchange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Exchange))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Timestamp != 0 {
		const prefix string = ",\"timestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Timestamp))
	}
	if len(in.Reserves) != 0 {
		const prefix string = ",\"reserves\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v3, v4 := range in.Reserves {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.String(string(v4))
			}
			out.RawByte(']')
		}
	}
	if len(in.Tokens) != 0 {
		const prefix string = ",\"tokens\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Tokens {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if in.Extra != "" {
		const prefix string = ",\"extra\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Extra))
	}
	if in.StaticExtra != "" {
		const prefix string = ",\"staticExtra\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StaticExtra))
	}
	if in.TotalSupply != "" {
		const prefix string = ",\"totalSupply\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TotalSupply))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pool) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pool) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pool) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pool) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComThanhppGopherCmdBenchJsonAllocateBenchPool1(l, v)
}
